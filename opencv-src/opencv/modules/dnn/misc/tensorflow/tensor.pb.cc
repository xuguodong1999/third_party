// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensor.proto

#include "tensor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opencv_tensorflow {

inline constexpr TensorProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        float_val_{},
        double_val_{},
        int_val_{},
        _int_val_cached_byte_size_{0},
        string_val_{},
        scomplex_val_{},
        int64_val_{},
        _int64_val_cached_byte_size_{0},
        bool_val_{},
        dcomplex_val_{},
        half_val_{},
        _half_val_cached_byte_size_{0},
        tensor_content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tensor_shape_{nullptr},
        dtype_{static_cast< ::opencv_tensorflow::DataType >(0)},
        version_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TensorProto::TensorProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorProtoDefaultTypeInternal() {}
  union {
    TensorProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
}  // namespace opencv_tensorflow
static ::_pb::Metadata file_level_metadata_tensor_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tensor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tensor_2eproto = nullptr;
const ::uint32_t TableStruct_tensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.dtype_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.tensor_shape_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.version_number_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.tensor_content_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.half_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.float_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.double_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.int_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.string_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.scomplex_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.int64_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.bool_val_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::TensorProto, _impl_.dcomplex_val_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 21, -1, sizeof(::opencv_tensorflow::TensorProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::opencv_tensorflow::_TensorProto_default_instance_._instance,
};
const char descriptor_table_protodef_tensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014tensor.proto\022\021opencv_tensorflow\032\022tenso"
    "r_shape.proto\032\013types.proto\"\363\002\n\013TensorPro"
    "to\022*\n\005dtype\030\001 \001(\0162\033.opencv_tensorflow.Da"
    "taType\0229\n\014tensor_shape\030\002 \001(\0132#.opencv_te"
    "nsorflow.TensorShapeProto\022\026\n\016version_num"
    "ber\030\003 \001(\005\022\026\n\016tensor_content\030\004 \001(\014\022\024\n\010hal"
    "f_val\030\r \003(\005B\002\020\001\022\025\n\tfloat_val\030\005 \003(\002B\002\020\001\022\026"
    "\n\ndouble_val\030\006 \003(\001B\002\020\001\022\023\n\007int_val\030\007 \003(\005B"
    "\002\020\001\022\022\n\nstring_val\030\010 \003(\014\022\030\n\014scomplex_val\030"
    "\t \003(\002B\002\020\001\022\025\n\tint64_val\030\n \003(\003B\002\020\001\022\024\n\010bool"
    "_val\030\013 \003(\010B\002\020\001\022\030\n\014dcomplex_val\030\014 \003(\001B\002\020\001"
    "B-\n\030org.tensorflow.frameworkB\014TensorProt"
    "osP\001\370\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tensor_2eproto_deps[2] =
    {
        &::descriptor_table_tensor_5fshape_2eproto,
        &::descriptor_table_types_2eproto,
};
static ::absl::once_flag descriptor_table_tensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensor_2eproto = {
    false,
    false,
    495,
    descriptor_table_protodef_tensor_2eproto,
    "tensor.proto",
    &descriptor_table_tensor_2eproto_once,
    descriptor_table_tensor_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_tensor_2eproto::offsets,
    file_level_metadata_tensor_2eproto,
    file_level_enum_descriptors_tensor_2eproto,
    file_level_service_descriptors_tensor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensor_2eproto_getter() {
  return &descriptor_table_tensor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensor_2eproto(&descriptor_table_tensor_2eproto);
namespace opencv_tensorflow {
// ===================================================================

class TensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorProto, _impl_._has_bits_);
  static const ::opencv_tensorflow::TensorShapeProto& tensor_shape(const TensorProto* msg);
  static void set_has_tensor_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::opencv_tensorflow::TensorShapeProto& TensorProto::_Internal::tensor_shape(const TensorProto* msg) {
  return *msg->_impl_.tensor_shape_;
}
void TensorProto::clear_tensor_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tensor_shape_ != nullptr) _impl_.tensor_shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TensorProto::TensorProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.TensorProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        float_val_{visibility, arena, from.float_val_},
        double_val_{visibility, arena, from.double_val_},
        int_val_{visibility, arena, from.int_val_},
        _int_val_cached_byte_size_{0},
        string_val_{visibility, arena, from.string_val_},
        scomplex_val_{visibility, arena, from.scomplex_val_},
        int64_val_{visibility, arena, from.int64_val_},
        _int64_val_cached_byte_size_{0},
        bool_val_{visibility, arena, from.bool_val_},
        dcomplex_val_{visibility, arena, from.dcomplex_val_},
        half_val_{visibility, arena, from.half_val_},
        _half_val_cached_byte_size_{0},
        tensor_content_(arena, from.tensor_content_) {}

TensorProto::TensorProto(
    ::google::protobuf::Arena* arena,
    const TensorProto& from)
    : ::google::protobuf::Message(arena) {
  TensorProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tensor_shape_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::opencv_tensorflow::TensorShapeProto>(arena, *from._impl_.tensor_shape_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dtype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, dtype_),
           offsetof(Impl_, version_number_) -
               offsetof(Impl_, dtype_) +
               sizeof(Impl_::version_number_));

  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.TensorProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        float_val_{visibility, arena},
        double_val_{visibility, arena},
        int_val_{visibility, arena},
        _int_val_cached_byte_size_{0},
        string_val_{visibility, arena},
        scomplex_val_{visibility, arena},
        int64_val_{visibility, arena},
        _int64_val_cached_byte_size_{0},
        bool_val_{visibility, arena},
        dcomplex_val_{visibility, arena},
        half_val_{visibility, arena},
        _half_val_cached_byte_size_{0},
        tensor_content_(arena) {}

inline void TensorProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tensor_shape_),
           0,
           offsetof(Impl_, version_number_) -
               offsetof(Impl_, tensor_shape_) +
               sizeof(Impl_::version_number_));
}
TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.TensorProto)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TensorProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tensor_content_.Destroy();
  delete _impl_.tensor_shape_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.TensorProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.float_val_.Clear();
  _impl_.double_val_.Clear();
  _impl_.int_val_.Clear();
  _impl_.string_val_.Clear();
  _impl_.scomplex_val_.Clear();
  _impl_.int64_val_.Clear();
  _impl_.bool_val_.Clear();
  _impl_.dcomplex_val_.Clear();
  _impl_.half_val_.Clear();
  _impl_.tensor_content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tensor_shape_ != nullptr);
    _impl_.tensor_shape_->Clear();
  }
  ::memset(&_impl_.dtype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_number_) -
      reinterpret_cast<char*>(&_impl_.dtype_)) + sizeof(_impl_.version_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TensorProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 1, 0, 2> TensorProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TensorProto, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TensorProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .opencv_tensorflow.DataType dtype = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TensorProto, _impl_.dtype_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dtype_)}},
    // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.tensor_shape_)}},
    // int32 version_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TensorProto, _impl_.version_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.version_number_)}},
    // bytes tensor_content = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.tensor_content_)}},
    // repeated float float_val = 5 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.float_val_)}},
    // repeated double double_val = 6 [packed = true];
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.double_val_)}},
    // repeated int32 int_val = 7 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int_val_)}},
    // repeated bytes string_val = 8;
    {::_pbi::TcParser::FastBR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.string_val_)}},
    // repeated float scomplex_val = 9 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.scomplex_val_)}},
    // repeated int64 int64_val = 10 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int64_val_)}},
    // repeated bool bool_val = 11 [packed = true];
    {::_pbi::TcParser::FastV8P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.bool_val_)}},
    // repeated double dcomplex_val = 12 [packed = true];
    {::_pbi::TcParser::FastF64P1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dcomplex_val_)}},
    // repeated int32 half_val = 13 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.half_val_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .opencv_tensorflow.DataType dtype = 1;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dtype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.tensor_shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 version_number = 3;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.version_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes tensor_content = 4;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.tensor_content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated float float_val = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.float_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated double double_val = 6 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.double_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated int32 int_val = 7 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated bytes string_val = 8;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.string_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated float scomplex_val = 9 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.scomplex_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated int64 int64_val = 10 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int64_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated bool bool_val = 11 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.bool_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedBool)},
    // repeated double dcomplex_val = 12 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dcomplex_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated int32 half_val = 13 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.half_val_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opencv_tensorflow::TensorShapeProto>()},
  }}, {{
  }},
};

::uint8_t* TensorProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.TensorProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .opencv_tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_dtype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::tensor_shape(this),
        _Internal::tensor_shape(this).GetCachedSize(), target, stream);
  }

  // int32 version_number = 3;
  if (this->_internal_version_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_version_number(), target);
  }

  // bytes tensor_content = 4;
  if (!this->_internal_tensor_content().empty()) {
    const std::string& _s = this->_internal_tensor_content();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // repeated float float_val = 5 [packed = true];
  if (this->_internal_float_val_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_float_val(), target);
  }

  // repeated double double_val = 6 [packed = true];
  if (this->_internal_double_val_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_double_val(), target);
  }

  // repeated int32 int_val = 7 [packed = true];
  {
    int byte_size = _impl_._int_val_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_int_val(), byte_size, target);
    }
  }

  // repeated bytes string_val = 8;
  for (int i = 0, n = this->_internal_string_val_size(); i < n; ++i) {
    const auto& s = this->_internal_string_val().Get(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated float scomplex_val = 9 [packed = true];
  if (this->_internal_scomplex_val_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_scomplex_val(), target);
  }

  // repeated int64 int64_val = 10 [packed = true];
  {
    int byte_size = _impl_._int64_val_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_int64_val(), byte_size, target);
    }
  }

  // repeated bool bool_val = 11 [packed = true];
  if (this->_internal_bool_val_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_bool_val(), target);
  }

  // repeated double dcomplex_val = 12 [packed = true];
  if (this->_internal_dcomplex_val_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_dcomplex_val(), target);
  }

  // repeated int32 half_val = 13 [packed = true];
  {
    int byte_size = _impl_._half_val_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_half_val(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.TensorProto)
  return target;
}

::size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.TensorProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_val = 5 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_float_val_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double double_val = 6 [packed = true];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_double_val_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 int_val = 7 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_val())
    ;
    _impl_._int_val_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bytes string_val = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_string_val().size());
  for (int i = 0, n = _internal_string_val().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_string_val().Get(i));
  }
  // repeated float scomplex_val = 9 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_scomplex_val_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 int64_val = 10 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_int64_val())
    ;
    _impl_._int64_val_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bool bool_val = 11 [packed = true];
  {
    std::size_t data_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_bool_val_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double dcomplex_val = 12 [packed = true];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_dcomplex_val_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 half_val = 13 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_half_val())
    ;
    _impl_._half_val_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // bytes tensor_content = 4;
  if (!this->_internal_tensor_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_tensor_content());
  }

  // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tensor_shape_);
  }

  // .opencv_tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  // int32 version_number = 3;
  if (this->_internal_version_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TensorProto::_class_data_ = {
    TensorProto::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TensorProto::GetClassData() const {
  return &_class_data_;
}

void TensorProto::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TensorProto*>(&to_msg);
  auto& from = static_cast<const TensorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.TensorProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_float_val()->MergeFrom(from._internal_float_val());
  _this->_internal_mutable_double_val()->MergeFrom(from._internal_double_val());
  _this->_internal_mutable_int_val()->MergeFrom(from._internal_int_val());
  _this->_internal_mutable_string_val()->MergeFrom(from._internal_string_val());
  _this->_internal_mutable_scomplex_val()->MergeFrom(from._internal_scomplex_val());
  _this->_internal_mutable_int64_val()->MergeFrom(from._internal_int64_val());
  _this->_internal_mutable_bool_val()->MergeFrom(from._internal_bool_val());
  _this->_internal_mutable_dcomplex_val()->MergeFrom(from._internal_dcomplex_val());
  _this->_internal_mutable_half_val()->MergeFrom(from._internal_half_val());
  if (!from._internal_tensor_content().empty()) {
    _this->_internal_set_tensor_content(from._internal_tensor_content());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_tensor_shape()->::opencv_tensorflow::TensorShapeProto::MergeFrom(
        from._internal_tensor_shape());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  if (from._internal_version_number() != 0) {
    _this->_internal_set_version_number(from._internal_version_number());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorProto::InternalSwap(TensorProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.float_val_.InternalSwap(&other->_impl_.float_val_);
  _impl_.double_val_.InternalSwap(&other->_impl_.double_val_);
  _impl_.int_val_.InternalSwap(&other->_impl_.int_val_);
  _impl_.string_val_.InternalSwap(&other->_impl_.string_val_);
  _impl_.scomplex_val_.InternalSwap(&other->_impl_.scomplex_val_);
  _impl_.int64_val_.InternalSwap(&other->_impl_.int64_val_);
  _impl_.bool_val_.InternalSwap(&other->_impl_.bool_val_);
  _impl_.dcomplex_val_.InternalSwap(&other->_impl_.dcomplex_val_);
  _impl_.half_val_.InternalSwap(&other->_impl_.half_val_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tensor_content_, &other->_impl_.tensor_content_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.version_number_)
      + sizeof(TensorProto::_impl_.version_number_)
      - PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.tensor_shape_)>(
          reinterpret_cast<char*>(&_impl_.tensor_shape_),
          reinterpret_cast<char*>(&other->_impl_.tensor_shape_));
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensor_2eproto_getter, &descriptor_table_tensor_2eproto_once,
      file_level_metadata_tensor_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
