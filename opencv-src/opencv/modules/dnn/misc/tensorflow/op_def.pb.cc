// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_def.proto

#include "op_def.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace opencv_tensorflow {
template <typename>
PROTOBUF_CONSTEXPR OpDef_ArgDef::OpDef_ArgDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_attr_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.number_attr_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_list_attr_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.is_ref_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpDef_ArgDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDef_ArgDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDef_ArgDefDefaultTypeInternal() {}
  union {
    OpDef_ArgDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDef_ArgDefDefaultTypeInternal _OpDef_ArgDef_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpDef_AttrDef::OpDef_AttrDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.default_value_)*/nullptr
  , /*decltype(_impl_.allowed_values_)*/nullptr
  , /*decltype(_impl_.minimum_)*/ ::int64_t{0}

  , /*decltype(_impl_.has_minimum_)*/ false
} {}
struct OpDef_AttrDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDef_AttrDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDef_AttrDefDefaultTypeInternal() {}
  union {
    OpDef_AttrDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDef_AttrDefDefaultTypeInternal _OpDef_AttrDef_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpDef::OpDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.input_arg_)*/{}
  , /*decltype(_impl_.output_arg_)*/{}
  , /*decltype(_impl_.attr_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.summary_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deprecation_)*/nullptr
  , /*decltype(_impl_.is_commutative_)*/ false

  , /*decltype(_impl_.is_aggregate_)*/ false

  , /*decltype(_impl_.is_stateful_)*/ false

  , /*decltype(_impl_.allows_uninitialized_input_)*/ false
} {}
struct OpDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDefDefaultTypeInternal() {}
  union {
    OpDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDefDefaultTypeInternal _OpDef_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpDeprecation::OpDeprecation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.explanation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpDeprecationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDeprecationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDeprecationDefaultTypeInternal() {}
  union {
    OpDeprecation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDeprecationDefaultTypeInternal _OpDeprecation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpList::OpList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpListDefaultTypeInternal() {}
  union {
    OpList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpListDefaultTypeInternal _OpList_default_instance_;
}  // namespace opencv_tensorflow
static ::_pb::Metadata file_level_metadata_op_5fdef_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_op_5fdef_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_op_5fdef_2eproto = nullptr;
const ::uint32_t TableStruct_op_5fdef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.type_attr_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.number_attr_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.type_list_attr_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_ArgDef, _impl_.is_ref_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.default_value_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.has_minimum_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.minimum_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef_AttrDef, _impl_.allowed_values_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.input_arg_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.output_arg_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.attr_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.deprecation_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.summary_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.is_commutative_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.is_aggregate_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.is_stateful_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDef, _impl_.allows_uninitialized_input_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDeprecation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDeprecation, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpDeprecation, _impl_.explanation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::OpList, _impl_.op_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::opencv_tensorflow::OpDef_ArgDef)},
        { 15, 30, -1, sizeof(::opencv_tensorflow::OpDef_AttrDef)},
        { 37, 56, -1, sizeof(::opencv_tensorflow::OpDef)},
        { 67, -1, -1, sizeof(::opencv_tensorflow::OpDeprecation)},
        { 77, -1, -1, sizeof(::opencv_tensorflow::OpList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::opencv_tensorflow::_OpDef_ArgDef_default_instance_._instance,
    &::opencv_tensorflow::_OpDef_AttrDef_default_instance_._instance,
    &::opencv_tensorflow::_OpDef_default_instance_._instance,
    &::opencv_tensorflow::_OpDeprecation_default_instance_._instance,
    &::opencv_tensorflow::_OpList_default_instance_._instance,
};
const char descriptor_table_protodef_op_5fdef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014op_def.proto\022\021opencv_tensorflow\032\020attr_"
    "value.proto\032\013types.proto\"\351\005\n\005OpDef\022\014\n\004na"
    "me\030\001 \001(\t\0222\n\tinput_arg\030\002 \003(\0132\037.opencv_ten"
    "sorflow.OpDef.ArgDef\0223\n\noutput_arg\030\003 \003(\013"
    "2\037.opencv_tensorflow.OpDef.ArgDef\022.\n\004att"
    "r\030\004 \003(\0132 .opencv_tensorflow.OpDef.AttrDe"
    "f\0225\n\013deprecation\030\010 \001(\0132 .opencv_tensorfl"
    "ow.OpDeprecation\022\017\n\007summary\030\005 \001(\t\022\023\n\013des"
    "cription\030\006 \001(\t\022\026\n\016is_commutative\030\022 \001(\010\022\024"
    "\n\014is_aggregate\030\020 \001(\010\022\023\n\013is_stateful\030\021 \001("
    "\010\022\"\n\032allows_uninitialized_input\030\023 \001(\010\032\246\001"
    "\n\006ArgDef\022\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 "
    "\001(\t\022)\n\004type\030\003 \001(\0162\033.opencv_tensorflow.Da"
    "taType\022\021\n\ttype_attr\030\004 \001(\t\022\023\n\013number_attr"
    "\030\005 \001(\t\022\026\n\016type_list_attr\030\006 \001(\t\022\016\n\006is_ref"
    "\030\020 \001(\010\032\313\001\n\007AttrDef\022\014\n\004name\030\001 \001(\t\022\014\n\004type"
    "\030\002 \001(\t\0223\n\rdefault_value\030\003 \001(\0132\034.opencv_t"
    "ensorflow.AttrValue\022\023\n\013description\030\004 \001(\t"
    "\022\023\n\013has_minimum\030\005 \001(\010\022\017\n\007minimum\030\006 \001(\003\0224"
    "\n\016allowed_values\030\007 \001(\0132\034.opencv_tensorfl"
    "ow.AttrValue\"5\n\rOpDeprecation\022\017\n\007version"
    "\030\001 \001(\005\022\023\n\013explanation\030\002 \001(\t\".\n\006OpList\022$\n"
    "\002op\030\001 \003(\0132\030.opencv_tensorflow.OpDefB,\n\030o"
    "rg.tensorflow.frameworkB\013OpDefProtosP\001\370\001"
    "\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_op_5fdef_2eproto_deps[2] =
    {
        &::descriptor_table_attr_5fvalue_2eproto,
        &::descriptor_table_types_2eproto,
};
static ::absl::once_flag descriptor_table_op_5fdef_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_op_5fdef_2eproto = {
    false,
    false,
    969,
    descriptor_table_protodef_op_5fdef_2eproto,
    "op_def.proto",
    &descriptor_table_op_5fdef_2eproto_once,
    descriptor_table_op_5fdef_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_op_5fdef_2eproto::offsets,
    file_level_metadata_op_5fdef_2eproto,
    file_level_enum_descriptors_op_5fdef_2eproto,
    file_level_service_descriptors_op_5fdef_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_op_5fdef_2eproto_getter() {
  return &descriptor_table_op_5fdef_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_op_5fdef_2eproto(&descriptor_table_op_5fdef_2eproto);
namespace opencv_tensorflow {
// ===================================================================

class OpDef_ArgDef::_Internal {
 public:
};

OpDef_ArgDef::OpDef_ArgDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.OpDef.ArgDef)
}
OpDef_ArgDef::OpDef_ArgDef(const OpDef_ArgDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDef_ArgDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.type_attr_) {}

    , decltype(_impl_.number_attr_) {}

    , decltype(_impl_.type_list_attr_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.is_ref_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.type_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_attr().empty()) {
    _this->_impl_.type_attr_.Set(from._internal_type_attr(), _this->GetArenaForAllocation());
  }
  _impl_.number_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.number_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number_attr().empty()) {
    _this->_impl_.number_attr_.Set(from._internal_number_attr(), _this->GetArenaForAllocation());
  }
  _impl_.type_list_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_list_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_list_attr().empty()) {
    _this->_impl_.type_list_attr_.Set(from._internal_type_list_attr(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_ref_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_ref_));
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.OpDef.ArgDef)
}

inline void OpDef_ArgDef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.type_attr_) {}

    , decltype(_impl_.number_attr_) {}

    , decltype(_impl_.type_list_attr_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.is_ref_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.number_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.number_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_list_attr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_list_attr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpDef_ArgDef::~OpDef_ArgDef() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.OpDef.ArgDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDef_ArgDef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  _impl_.type_attr_.Destroy();
  _impl_.number_attr_.Destroy();
  _impl_.type_list_attr_.Destroy();
}

void OpDef_ArgDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDef_ArgDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef.ArgDef)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.type_attr_.ClearToEmpty();
  _impl_.number_attr_.ClearToEmpty();
  _impl_.type_list_attr_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_ref_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_ref_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDef_ArgDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.ArgDef.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.ArgDef.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .opencv_tensorflow.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::opencv_tensorflow::DataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type_attr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type_attr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.ArgDef.type_attr"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string number_attr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_number_attr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.ArgDef.number_attr"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type_list_attr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type_list_attr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.ArgDef.type_list_attr"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_ref = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.is_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpDef_ArgDef::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDef.ArgDef)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.ArgDef.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.ArgDef.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .opencv_tensorflow.DataType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // string type_attr = 4;
  if (!this->_internal_type_attr().empty()) {
    const std::string& _s = this->_internal_type_attr();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.ArgDef.type_attr");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string number_attr = 5;
  if (!this->_internal_number_attr().empty()) {
    const std::string& _s = this->_internal_number_attr();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.ArgDef.number_attr");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string type_list_attr = 6;
  if (!this->_internal_type_list_attr().empty()) {
    const std::string& _s = this->_internal_type_list_attr();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.ArgDef.type_list_attr");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool is_ref = 16;
  if (this->_internal_is_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_is_ref(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.OpDef.ArgDef)
  return target;
}

::size_t OpDef_ArgDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef.ArgDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string type_attr = 4;
  if (!this->_internal_type_attr().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type_attr());
  }

  // string number_attr = 5;
  if (!this->_internal_number_attr().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_number_attr());
  }

  // string type_list_attr = 6;
  if (!this->_internal_type_list_attr().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type_list_attr());
  }

  // .opencv_tensorflow.DataType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_ref = 16;
  if (this->_internal_is_ref() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDef_ArgDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDef_ArgDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDef_ArgDef::GetClassData() const { return &_class_data_; }


void OpDef_ArgDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDef_ArgDef*>(&to_msg);
  auto& from = static_cast<const OpDef_ArgDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDef.ArgDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_type_attr().empty()) {
    _this->_internal_set_type_attr(from._internal_type_attr());
  }
  if (!from._internal_number_attr().empty()) {
    _this->_internal_set_number_attr(from._internal_number_attr());
  }
  if (!from._internal_type_list_attr().empty()) {
    _this->_internal_set_type_list_attr(from._internal_type_list_attr());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_ref() != 0) {
    _this->_internal_set_is_ref(from._internal_is_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDef_ArgDef::CopyFrom(const OpDef_ArgDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.OpDef.ArgDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDef_ArgDef::IsInitialized() const {
  return true;
}

void OpDef_ArgDef::InternalSwap(OpDef_ArgDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_attr_, lhs_arena,
                                       &other->_impl_.type_attr_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.number_attr_, lhs_arena,
                                       &other->_impl_.number_attr_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_list_attr_, lhs_arena,
                                       &other->_impl_.type_list_attr_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef_ArgDef, _impl_.is_ref_)
      + sizeof(OpDef_ArgDef::_impl_.is_ref_)
      - PROTOBUF_FIELD_OFFSET(OpDef_ArgDef, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDef_ArgDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[0]);
}
// ===================================================================

class OpDef_AttrDef::_Internal {
 public:
  using HasBits = decltype(std::declval<OpDef_AttrDef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OpDef_AttrDef, _impl_._has_bits_);
  static const ::opencv_tensorflow::AttrValue& default_value(const OpDef_AttrDef* msg);
  static void set_has_default_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::opencv_tensorflow::AttrValue& allowed_values(const OpDef_AttrDef* msg);
  static void set_has_allowed_values(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::opencv_tensorflow::AttrValue&
OpDef_AttrDef::_Internal::default_value(const OpDef_AttrDef* msg) {
  return *msg->_impl_.default_value_;
}
const ::opencv_tensorflow::AttrValue&
OpDef_AttrDef::_Internal::allowed_values(const OpDef_AttrDef* msg) {
  return *msg->_impl_.allowed_values_;
}
void OpDef_AttrDef::clear_default_value() {
  if (_impl_.default_value_ != nullptr) _impl_.default_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OpDef_AttrDef::clear_allowed_values() {
  if (_impl_.allowed_values_ != nullptr) _impl_.allowed_values_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
OpDef_AttrDef::OpDef_AttrDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.OpDef.AttrDef)
}
OpDef_AttrDef::OpDef_AttrDef(const OpDef_AttrDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDef_AttrDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.allowed_values_){nullptr}
    , decltype(_impl_.minimum_) {}

    , decltype(_impl_.has_minimum_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.default_value_ = new ::opencv_tensorflow::AttrValue(*from._impl_.default_value_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.allowed_values_ = new ::opencv_tensorflow::AttrValue(*from._impl_.allowed_values_);
  }
  ::memcpy(&_impl_.minimum_, &from._impl_.minimum_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.has_minimum_) -
    reinterpret_cast<char*>(&_impl_.minimum_)) + sizeof(_impl_.has_minimum_));
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.OpDef.AttrDef)
}

inline void OpDef_AttrDef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.default_value_){nullptr}
    , decltype(_impl_.allowed_values_){nullptr}
    , decltype(_impl_.minimum_) { ::int64_t{0} }

    , decltype(_impl_.has_minimum_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpDef_AttrDef::~OpDef_AttrDef() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.OpDef.AttrDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDef_AttrDef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.default_value_;
  if (this != internal_default_instance()) delete _impl_.allowed_values_;
}

void OpDef_AttrDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDef_AttrDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef.AttrDef)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.default_value_ != nullptr);
      _impl_.default_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.allowed_values_ != nullptr);
      _impl_.allowed_values_->Clear();
    }
  }
  ::memset(&_impl_.minimum_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_minimum_) -
      reinterpret_cast<char*>(&_impl_.minimum_)) + sizeof(_impl_.has_minimum_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDef_AttrDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.AttrDef.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.AttrDef.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .opencv_tensorflow.AttrValue default_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.AttrDef.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool has_minimum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.has_minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 minimum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .opencv_tensorflow.AttrValue allowed_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_values(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpDef_AttrDef::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDef.AttrDef)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.AttrDef.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.AttrDef.type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .opencv_tensorflow.AttrValue default_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::default_value(this),
        _Internal::default_value(this).GetCachedSize(), target, stream);
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.AttrDef.description");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool has_minimum = 5;
  if (this->_internal_has_minimum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_has_minimum(), target);
  }

  // int64 minimum = 6;
  if (this->_internal_minimum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_minimum(), target);
  }

  // .opencv_tensorflow.AttrValue allowed_values = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::allowed_values(this),
        _Internal::allowed_values(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.OpDef.AttrDef)
  return target;
}

::size_t OpDef_AttrDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef.AttrDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string description = 4;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .opencv_tensorflow.AttrValue default_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_value_);
    }

    // .opencv_tensorflow.AttrValue allowed_values = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.allowed_values_);
    }

  }
  // int64 minimum = 6;
  if (this->_internal_minimum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_minimum());
  }

  // bool has_minimum = 5;
  if (this->_internal_has_minimum() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDef_AttrDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDef_AttrDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDef_AttrDef::GetClassData() const { return &_class_data_; }


void OpDef_AttrDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDef_AttrDef*>(&to_msg);
  auto& from = static_cast<const OpDef_AttrDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDef.AttrDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_default_value()->::opencv_tensorflow::AttrValue::MergeFrom(
          from._internal_default_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_allowed_values()->::opencv_tensorflow::AttrValue::MergeFrom(
          from._internal_allowed_values());
    }
  }
  if (from._internal_minimum() != 0) {
    _this->_internal_set_minimum(from._internal_minimum());
  }
  if (from._internal_has_minimum() != 0) {
    _this->_internal_set_has_minimum(from._internal_has_minimum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDef_AttrDef::CopyFrom(const OpDef_AttrDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.OpDef.AttrDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDef_AttrDef::IsInitialized() const {
  return true;
}

void OpDef_AttrDef::InternalSwap(OpDef_AttrDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef_AttrDef, _impl_.has_minimum_)
      + sizeof(OpDef_AttrDef::_impl_.has_minimum_)
      - PROTOBUF_FIELD_OFFSET(OpDef_AttrDef, _impl_.default_value_)>(
          reinterpret_cast<char*>(&_impl_.default_value_),
          reinterpret_cast<char*>(&other->_impl_.default_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDef_AttrDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[1]);
}
// ===================================================================

class OpDef::_Internal {
 public:
  using HasBits = decltype(std::declval<OpDef>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OpDef, _impl_._has_bits_);
  static const ::opencv_tensorflow::OpDeprecation& deprecation(const OpDef* msg);
  static void set_has_deprecation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::opencv_tensorflow::OpDeprecation&
OpDef::_Internal::deprecation(const OpDef* msg) {
  return *msg->_impl_.deprecation_;
}
OpDef::OpDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.OpDef)
}
OpDef::OpDef(const OpDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_arg_){from._impl_.input_arg_}
    , decltype(_impl_.output_arg_){from._impl_.output_arg_}
    , decltype(_impl_.attr_){from._impl_.attr_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.deprecation_){nullptr}
    , decltype(_impl_.is_commutative_) {}

    , decltype(_impl_.is_aggregate_) {}

    , decltype(_impl_.is_stateful_) {}

    , decltype(_impl_.allows_uninitialized_input_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deprecation_ = new ::opencv_tensorflow::OpDeprecation(*from._impl_.deprecation_);
  }
  ::memcpy(&_impl_.is_commutative_, &from._impl_.is_commutative_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.allows_uninitialized_input_) -
    reinterpret_cast<char*>(&_impl_.is_commutative_)) + sizeof(_impl_.allows_uninitialized_input_));
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.OpDef)
}

inline void OpDef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.input_arg_){arena}
    , decltype(_impl_.output_arg_){arena}
    , decltype(_impl_.attr_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.deprecation_){nullptr}
    , decltype(_impl_.is_commutative_) { false }

    , decltype(_impl_.is_aggregate_) { false }

    , decltype(_impl_.is_stateful_) { false }

    , decltype(_impl_.allows_uninitialized_input_) { false }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpDef::~OpDef() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.OpDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_input_arg()->~RepeatedPtrField();
  _internal_mutable_output_arg()->~RepeatedPtrField();
  _internal_mutable_attr()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deprecation_;
}

void OpDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDef)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_input_arg()->Clear();
  _internal_mutable_output_arg()->Clear();
  _internal_mutable_attr()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deprecation_ != nullptr);
    _impl_.deprecation_->Clear();
  }
  ::memset(&_impl_.is_commutative_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.allows_uninitialized_input_) -
      reinterpret_cast<char*>(&_impl_.is_commutative_)) + sizeof(_impl_.allows_uninitialized_input_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_arg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_arg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.summary"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDef.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .opencv_tensorflow.OpDeprecation deprecation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_aggregate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.is_aggregate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_stateful = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.is_stateful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_commutative = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.is_commutative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool allows_uninitialized_input = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _impl_.allows_uninitialized_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpDef::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDef)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_arg_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_arg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_arg_size()); i < n; i++) {
    const auto& repfield = this->_internal_output_arg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attr_size()); i < n; i++) {
    const auto& repfield = this->_internal_attr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string summary = 5;
  if (!this->_internal_summary().empty()) {
    const std::string& _s = this->_internal_summary();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.summary");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDef.description");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .opencv_tensorflow.OpDeprecation deprecation = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deprecation(this),
        _Internal::deprecation(this).GetCachedSize(), target, stream);
  }

  // bool is_aggregate = 16;
  if (this->_internal_is_aggregate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_is_aggregate(), target);
  }

  // bool is_stateful = 17;
  if (this->_internal_is_stateful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_is_stateful(), target);
  }

  // bool is_commutative = 18;
  if (this->_internal_is_commutative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_is_commutative(), target);
  }

  // bool allows_uninitialized_input = 19;
  if (this->_internal_allows_uninitialized_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this->_internal_allows_uninitialized_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.OpDef)
  return target;
}

::size_t OpDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
  total_size += 1UL * this->_internal_input_arg_size();
  for (const auto& msg : this->_internal_input_arg()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
  total_size += 1UL * this->_internal_output_arg_size();
  for (const auto& msg : this->_internal_output_arg()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->_internal_attr()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string summary = 5;
  if (!this->_internal_summary().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_summary());
  }

  // string description = 6;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .opencv_tensorflow.OpDeprecation deprecation = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecation_);
  }

  // bool is_commutative = 18;
  if (this->_internal_is_commutative() != 0) {
    total_size += 3;
  }

  // bool is_aggregate = 16;
  if (this->_internal_is_aggregate() != 0) {
    total_size += 3;
  }

  // bool is_stateful = 17;
  if (this->_internal_is_stateful() != 0) {
    total_size += 3;
  }

  // bool allows_uninitialized_input = 19;
  if (this->_internal_allows_uninitialized_input() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDef::GetClassData() const { return &_class_data_; }


void OpDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDef*>(&to_msg);
  auto& from = static_cast<const OpDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input_arg()->MergeFrom(from._internal_input_arg());
  _this->_internal_mutable_output_arg()->MergeFrom(from._internal_output_arg());
  _this->_internal_mutable_attr()->MergeFrom(from._internal_attr());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deprecation()->::opencv_tensorflow::OpDeprecation::MergeFrom(
        from._internal_deprecation());
  }
  if (from._internal_is_commutative() != 0) {
    _this->_internal_set_is_commutative(from._internal_is_commutative());
  }
  if (from._internal_is_aggregate() != 0) {
    _this->_internal_set_is_aggregate(from._internal_is_aggregate());
  }
  if (from._internal_is_stateful() != 0) {
    _this->_internal_set_is_stateful(from._internal_is_stateful());
  }
  if (from._internal_allows_uninitialized_input() != 0) {
    _this->_internal_set_allows_uninitialized_input(from._internal_allows_uninitialized_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDef::CopyFrom(const OpDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.OpDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDef::IsInitialized() const {
  return true;
}

void OpDef::InternalSwap(OpDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_input_arg()->InternalSwap(other->_internal_mutable_input_arg());
  _internal_mutable_output_arg()->InternalSwap(other->_internal_mutable_output_arg());
  _internal_mutable_attr()->InternalSwap(other->_internal_mutable_attr());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_, lhs_arena,
                                       &other->_impl_.summary_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDef, _impl_.allows_uninitialized_input_)
      + sizeof(OpDef::_impl_.allows_uninitialized_input_)
      - PROTOBUF_FIELD_OFFSET(OpDef, _impl_.deprecation_)>(
          reinterpret_cast<char*>(&_impl_.deprecation_),
          reinterpret_cast<char*>(&other->_impl_.deprecation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[2]);
}
// ===================================================================

class OpDeprecation::_Internal {
 public:
};

OpDeprecation::OpDeprecation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.OpDeprecation)
}
OpDeprecation::OpDeprecation(const OpDeprecation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpDeprecation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.explanation_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.explanation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.explanation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_explanation().empty()) {
    _this->_impl_.explanation_.Set(from._internal_explanation(), _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.OpDeprecation)
}

inline void OpDeprecation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.explanation_) {}

    , decltype(_impl_.version_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.explanation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.explanation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OpDeprecation::~OpDeprecation() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.OpDeprecation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpDeprecation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.explanation_.Destroy();
}

void OpDeprecation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpDeprecation::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpDeprecation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.explanation_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDeprecation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string explanation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_explanation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "opencv_tensorflow.OpDeprecation.explanation"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpDeprecation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpDeprecation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // string explanation = 2;
  if (!this->_internal_explanation().empty()) {
    const std::string& _s = this->_internal_explanation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "opencv_tensorflow.OpDeprecation.explanation");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.OpDeprecation)
  return target;
}

::size_t OpDeprecation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpDeprecation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string explanation = 2;
  if (!this->_internal_explanation().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_explanation());
  }

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpDeprecation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpDeprecation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpDeprecation::GetClassData() const { return &_class_data_; }


void OpDeprecation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpDeprecation*>(&to_msg);
  auto& from = static_cast<const OpDeprecation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpDeprecation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_explanation().empty()) {
    _this->_internal_set_explanation(from._internal_explanation());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpDeprecation::CopyFrom(const OpDeprecation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.OpDeprecation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDeprecation::IsInitialized() const {
  return true;
}

void OpDeprecation::InternalSwap(OpDeprecation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.explanation_, lhs_arena,
                                       &other->_impl_.explanation_, rhs_arena);

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDeprecation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[3]);
}
// ===================================================================

class OpList::_Internal {
 public:
};

OpList::OpList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.OpList)
}
OpList::OpList(const OpList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){from._impl_.op_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.OpList)
}

inline void OpList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.op_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpList::~OpList() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.OpList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_op()->~RepeatedPtrField();
}

void OpList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpList::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.OpList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_op()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .opencv_tensorflow.OpDef op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_op(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.OpList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.OpDef op = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_op_size()); i < n; i++) {
    const auto& repfield = this->_internal_op(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.OpList)
  return target;
}

::size_t OpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.OpList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .opencv_tensorflow.OpDef op = 1;
  total_size += 1UL * this->_internal_op_size();
  for (const auto& msg : this->_internal_op()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpList::GetClassData() const { return &_class_data_; }


void OpList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpList*>(&to_msg);
  auto& from = static_cast<const OpList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.OpList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_op()->MergeFrom(from._internal_op());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpList::CopyFrom(const OpList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.OpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpList::IsInitialized() const {
  return true;
}

void OpList::InternalSwap(OpList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_op()->InternalSwap(other->_internal_mutable_op());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_op_5fdef_2eproto_getter, &descriptor_table_op_5fdef_2eproto_once,
      file_level_metadata_op_5fdef_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::OpDef_ArgDef*
Arena::CreateMaybeMessage< ::opencv_tensorflow::OpDef_ArgDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::OpDef_ArgDef >(arena);
}
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::OpDef_AttrDef*
Arena::CreateMaybeMessage< ::opencv_tensorflow::OpDef_AttrDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::OpDef_AttrDef >(arena);
}
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::OpDef*
Arena::CreateMaybeMessage< ::opencv_tensorflow::OpDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::OpDef >(arena);
}
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::OpDeprecation*
Arena::CreateMaybeMessage< ::opencv_tensorflow::OpDeprecation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::OpDeprecation >(arena);
}
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::OpList*
Arena::CreateMaybeMessage< ::opencv_tensorflow::OpList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::OpList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
