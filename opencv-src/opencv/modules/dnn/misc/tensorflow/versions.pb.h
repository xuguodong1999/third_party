// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: versions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_versions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_versions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_versions_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_versions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_versions_2eproto;
namespace opencv_tensorflow {
class VersionDef;
struct VersionDefDefaultTypeInternal;
extern VersionDefDefaultTypeInternal _VersionDef_default_instance_;
}  // namespace opencv_tensorflow
PROTOBUF_NAMESPACE_OPEN
template <>
::opencv_tensorflow::VersionDef* Arena::CreateMaybeMessage<::opencv_tensorflow::VersionDef>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace opencv_tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class VersionDef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.VersionDef) */ {
 public:
  inline VersionDef() : VersionDef(nullptr) {}
  ~VersionDef() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VersionDef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionDef(const VersionDef& from);
  VersionDef(VersionDef&& from) noexcept
    : VersionDef() {
    *this = ::std::move(from);
  }

  inline VersionDef& operator=(const VersionDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionDef& operator=(VersionDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionDef* internal_default_instance() {
    return reinterpret_cast<const VersionDef*>(
               &_VersionDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionDef& a, VersionDef& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionDef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionDef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionDef& from) {
    VersionDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionDef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.VersionDef";
  }
  protected:
  explicit VersionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBadConsumersFieldNumber = 3,
    kProducerFieldNumber = 1,
    kMinConsumerFieldNumber = 2,
  };
  // repeated int32 bad_consumers = 3;
  int bad_consumers_size() const;
  private:
  int _internal_bad_consumers_size() const;

  public:
  void clear_bad_consumers() ;
  ::int32_t bad_consumers(int index) const;
  void set_bad_consumers(int index, ::int32_t value);
  void add_bad_consumers(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& bad_consumers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_bad_consumers();

  private:
  ::int32_t _internal_bad_consumers(int index) const;
  void _internal_add_bad_consumers(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_bad_consumers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_bad_consumers();

  public:
  // int32 producer = 1;
  void clear_producer() ;
  ::int32_t producer() const;
  void set_producer(::int32_t value);

  private:
  ::int32_t _internal_producer() const;
  void _internal_set_producer(::int32_t value);

  public:
  // int32 min_consumer = 2;
  void clear_min_consumer() ;
  ::int32_t min_consumer() const;
  void set_min_consumer(::int32_t value);

  private:
  ::int32_t _internal_min_consumer() const;
  void _internal_set_min_consumer(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.VersionDef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> bad_consumers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _bad_consumers_cached_byte_size_;
    ::int32_t producer_;
    ::int32_t min_consumer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_versions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VersionDef

// int32 producer = 1;
inline void VersionDef::clear_producer() {
  _impl_.producer_ = 0;
}
inline ::int32_t VersionDef::producer() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.VersionDef.producer)
  return _internal_producer();
}
inline void VersionDef::set_producer(::int32_t value) {
  _internal_set_producer(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.VersionDef.producer)
}
inline ::int32_t VersionDef::_internal_producer() const {
  return _impl_.producer_;
}
inline void VersionDef::_internal_set_producer(::int32_t value) {
  ;
  _impl_.producer_ = value;
}

// int32 min_consumer = 2;
inline void VersionDef::clear_min_consumer() {
  _impl_.min_consumer_ = 0;
}
inline ::int32_t VersionDef::min_consumer() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.VersionDef.min_consumer)
  return _internal_min_consumer();
}
inline void VersionDef::set_min_consumer(::int32_t value) {
  _internal_set_min_consumer(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.VersionDef.min_consumer)
}
inline ::int32_t VersionDef::_internal_min_consumer() const {
  return _impl_.min_consumer_;
}
inline void VersionDef::_internal_set_min_consumer(::int32_t value) {
  ;
  _impl_.min_consumer_ = value;
}

// repeated int32 bad_consumers = 3;
inline int VersionDef::_internal_bad_consumers_size() const {
  return _impl_.bad_consumers_.size();
}
inline int VersionDef::bad_consumers_size() const {
  return _internal_bad_consumers_size();
}
inline void VersionDef::clear_bad_consumers() {
  _internal_mutable_bad_consumers()->Clear();
}
inline ::int32_t VersionDef::bad_consumers(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.VersionDef.bad_consumers)
  return _internal_bad_consumers(index);
}
inline void VersionDef::set_bad_consumers(int index, ::int32_t value) {
  _internal_mutable_bad_consumers()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.VersionDef.bad_consumers)
}
inline void VersionDef::add_bad_consumers(::int32_t value) {
  _internal_add_bad_consumers(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.VersionDef.bad_consumers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& VersionDef::bad_consumers() const {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.VersionDef.bad_consumers)
  return _internal_bad_consumers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* VersionDef::mutable_bad_consumers() {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.VersionDef.bad_consumers)
  return _internal_mutable_bad_consumers();
}

inline ::int32_t VersionDef::_internal_bad_consumers(int index) const {
  return _internal_bad_consumers().Get(index);
}
inline void VersionDef::_internal_add_bad_consumers(::int32_t value) {
  _internal_mutable_bad_consumers()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& VersionDef::_internal_bad_consumers() const {
  return _impl_.bad_consumers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* VersionDef::_internal_mutable_bad_consumers() {
  return &_impl_.bad_consumers_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_versions_2eproto_2epb_2eh
