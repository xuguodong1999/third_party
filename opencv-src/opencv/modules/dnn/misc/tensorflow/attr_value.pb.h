// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attr_value.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "tensor.pb.h"
#include "tensor_shape.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_attr_5fvalue_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_attr_5fvalue_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_attr_5fvalue_2eproto;
namespace opencv_tensorflow {
class AttrValue;
struct AttrValueDefaultTypeInternal;
extern AttrValueDefaultTypeInternal _AttrValue_default_instance_;
class AttrValue_ListValue;
struct AttrValue_ListValueDefaultTypeInternal;
extern AttrValue_ListValueDefaultTypeInternal _AttrValue_ListValue_default_instance_;
class NameAttrList;
struct NameAttrListDefaultTypeInternal;
extern NameAttrListDefaultTypeInternal _NameAttrList_default_instance_;
class NameAttrList_AttrEntry_DoNotUse;
struct NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal;
extern NameAttrList_AttrEntry_DoNotUseDefaultTypeInternal _NameAttrList_AttrEntry_DoNotUse_default_instance_;
}  // namespace opencv_tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opencv_tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class AttrValue_ListValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.AttrValue.ListValue) */ {
 public:
  inline AttrValue_ListValue() : AttrValue_ListValue(nullptr) {}
  ~AttrValue_ListValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttrValue_ListValue(::google::protobuf::internal::ConstantInitialized);

  inline AttrValue_ListValue(const AttrValue_ListValue& from)
      : AttrValue_ListValue(nullptr, from) {}
  AttrValue_ListValue(AttrValue_ListValue&& from) noexcept
    : AttrValue_ListValue() {
    *this = ::std::move(from);
  }

  inline AttrValue_ListValue& operator=(const AttrValue_ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue_ListValue& operator=(AttrValue_ListValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue_ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttrValue_ListValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue_ListValue*>(
               &_AttrValue_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AttrValue_ListValue& a, AttrValue_ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrValue_ListValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue_ListValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue_ListValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttrValue_ListValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttrValue_ListValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttrValue_ListValue& from) {
    AttrValue_ListValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttrValue_ListValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.AttrValue.ListValue";
  }
  protected:
  explicit AttrValue_ListValue(::google::protobuf::Arena* arena);
  AttrValue_ListValue(::google::protobuf::Arena* arena, const AttrValue_ListValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kTypeFieldNumber = 6,
    kShapeFieldNumber = 7,
    kTensorFieldNumber = 8,
  };
  // repeated bytes s = 2;
  int s_size() const;
  private:
  int _internal_s_size() const;

  public:
  void clear_s() ;
  const std::string& s(int index) const;
  std::string* mutable_s(int index);
  void set_s(int index, const std::string& value);
  void set_s(int index, std::string&& value);
  void set_s(int index, const char* value);
  void set_s(int index, const void* value, std::size_t size);
  void set_s(int index, absl::string_view value);
  std::string* add_s();
  void add_s(const std::string& value);
  void add_s(std::string&& value);
  void add_s(const char* value);
  void add_s(const void* value, std::size_t size);
  void add_s(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& s() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_s();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_s() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_s();

  public:
  // repeated int64 i = 3 [packed = true];
  int i_size() const;
  private:
  int _internal_i_size() const;

  public:
  void clear_i() ;
  ::int64_t i(int index) const;
  void set_i(int index, ::int64_t value);
  void add_i(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& i() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_i();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_i() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_i();

  public:
  // repeated float f = 4 [packed = true];
  int f_size() const;
  private:
  int _internal_f_size() const;

  public:
  void clear_f() ;
  float f(int index) const;
  void set_f(int index, float value);
  void add_f(float value);
  const ::google::protobuf::RepeatedField<float>& f() const;
  ::google::protobuf::RepeatedField<float>* mutable_f();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f();

  public:
  // repeated bool b = 5 [packed = true];
  int b_size() const;
  private:
  int _internal_b_size() const;

  public:
  void clear_b() ;
  bool b(int index) const;
  void set_b(int index, bool value);
  void add_b(bool value);
  const ::google::protobuf::RepeatedField<bool>& b() const;
  ::google::protobuf::RepeatedField<bool>* mutable_b();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_b() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_b();

  public:
  // repeated .opencv_tensorflow.DataType type = 6 [packed = true];
  int type_size() const;
  private:
  int _internal_type_size() const;

  public:
  void clear_type() ;
  public:
  ::opencv_tensorflow::DataType type(int index) const;
  void set_type(int index, ::opencv_tensorflow::DataType value);
  void add_type(::opencv_tensorflow::DataType value);
  const ::google::protobuf::RepeatedField<int>& type() const;
  ::google::protobuf::RepeatedField<int>* mutable_type();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_type() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_type();

  public:
  // repeated .opencv_tensorflow.TensorShapeProto shape = 7;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::opencv_tensorflow::TensorShapeProto* mutable_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorShapeProto >*
      mutable_shape();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>& _internal_shape() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>* _internal_mutable_shape();
  public:
  const ::opencv_tensorflow::TensorShapeProto& shape(int index) const;
  ::opencv_tensorflow::TensorShapeProto* add_shape();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorShapeProto >&
      shape() const;
  // repeated .opencv_tensorflow.TensorProto tensor = 8;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;

  public:
  void clear_tensor() ;
  ::opencv_tensorflow::TensorProto* mutable_tensor(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorProto >*
      mutable_tensor();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>& _internal_tensor() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>* _internal_mutable_tensor();
  public:
  const ::opencv_tensorflow::TensorProto& tensor(int index) const;
  ::opencv_tensorflow::TensorProto* add_tensor();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorProto >&
      tensor() const;
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.AttrValue.ListValue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> s_;
    ::google::protobuf::RepeatedField<::int64_t> i_;
    mutable ::google::protobuf::internal::CachedSize _i_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> f_;
    ::google::protobuf::RepeatedField<bool> b_;
    ::google::protobuf::RepeatedField<int> type_;
    mutable ::google::protobuf::internal::CachedSize _type_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorShapeProto > shape_;
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::TensorProto > tensor_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};// -------------------------------------------------------------------

class AttrValue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.AttrValue) */ {
 public:
  inline AttrValue() : AttrValue(nullptr) {}
  ~AttrValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttrValue(::google::protobuf::internal::ConstantInitialized);

  inline AttrValue(const AttrValue& from)
      : AttrValue(nullptr, from) {}
  AttrValue(AttrValue&& from) noexcept
    : AttrValue() {
    *this = ::std::move(from);
  }

  inline AttrValue& operator=(const AttrValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttrValue& operator=(AttrValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttrValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kS = 2,
    kI = 3,
    kF = 4,
    kB = 5,
    kType = 6,
    kShape = 7,
    kTensor = 8,
    kList = 1,
    kFunc = 10,
    kPlaceholder = 9,
    VALUE_NOT_SET = 0,
  };

  static inline const AttrValue* internal_default_instance() {
    return reinterpret_cast<const AttrValue*>(
               &_AttrValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttrValue& a, AttrValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttrValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttrValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttrValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttrValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttrValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttrValue& from) {
    AttrValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttrValue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.AttrValue";
  }
  protected:
  explicit AttrValue(::google::protobuf::Arena* arena);
  AttrValue(::google::protobuf::Arena* arena, const AttrValue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ListValue = AttrValue_ListValue;

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 5,
    kTypeFieldNumber = 6,
    kShapeFieldNumber = 7,
    kTensorFieldNumber = 8,
    kListFieldNumber = 1,
    kFuncFieldNumber = 10,
    kPlaceholderFieldNumber = 9,
  };
  // bytes s = 2;
  bool has_s() const;
  void clear_s() ;
  const std::string& s() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* value);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // int64 i = 3;
  bool has_i() const;
  void clear_i() ;
  ::int64_t i() const;
  void set_i(::int64_t value);

  private:
  ::int64_t _internal_i() const;
  void _internal_set_i(::int64_t value);

  public:
  // float f = 4;
  bool has_f() const;
  void clear_f() ;
  float f() const;
  void set_f(float value);

  private:
  float _internal_f() const;
  void _internal_set_f(float value);

  public:
  // bool b = 5;
  bool has_b() const;
  void clear_b() ;
  bool b() const;
  void set_b(bool value);

  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);

  public:
  // .opencv_tensorflow.DataType type = 6;
  bool has_type() const;
  void clear_type() ;
  ::opencv_tensorflow::DataType type() const;
  void set_type(::opencv_tensorflow::DataType value);

  private:
  ::opencv_tensorflow::DataType _internal_type() const;
  void _internal_set_type(::opencv_tensorflow::DataType value);

  public:
  // .opencv_tensorflow.TensorShapeProto shape = 7;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;

  public:
  void clear_shape() ;
  const ::opencv_tensorflow::TensorShapeProto& shape() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::TensorShapeProto* release_shape();
  ::opencv_tensorflow::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::opencv_tensorflow::TensorShapeProto* value);
  void unsafe_arena_set_allocated_shape(::opencv_tensorflow::TensorShapeProto* value);
  ::opencv_tensorflow::TensorShapeProto* unsafe_arena_release_shape();

  private:
  const ::opencv_tensorflow::TensorShapeProto& _internal_shape() const;
  ::opencv_tensorflow::TensorShapeProto* _internal_mutable_shape();

  public:
  // .opencv_tensorflow.TensorProto tensor = 8;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;

  public:
  void clear_tensor() ;
  const ::opencv_tensorflow::TensorProto& tensor() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::TensorProto* release_tensor();
  ::opencv_tensorflow::TensorProto* mutable_tensor();
  void set_allocated_tensor(::opencv_tensorflow::TensorProto* value);
  void unsafe_arena_set_allocated_tensor(::opencv_tensorflow::TensorProto* value);
  ::opencv_tensorflow::TensorProto* unsafe_arena_release_tensor();

  private:
  const ::opencv_tensorflow::TensorProto& _internal_tensor() const;
  ::opencv_tensorflow::TensorProto* _internal_mutable_tensor();

  public:
  // .opencv_tensorflow.AttrValue.ListValue list = 1;
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::opencv_tensorflow::AttrValue_ListValue& list() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::AttrValue_ListValue* release_list();
  ::opencv_tensorflow::AttrValue_ListValue* mutable_list();
  void set_allocated_list(::opencv_tensorflow::AttrValue_ListValue* value);
  void unsafe_arena_set_allocated_list(::opencv_tensorflow::AttrValue_ListValue* value);
  ::opencv_tensorflow::AttrValue_ListValue* unsafe_arena_release_list();

  private:
  const ::opencv_tensorflow::AttrValue_ListValue& _internal_list() const;
  ::opencv_tensorflow::AttrValue_ListValue* _internal_mutable_list();

  public:
  // .opencv_tensorflow.NameAttrList func = 10;
  bool has_func() const;
  private:
  bool _internal_has_func() const;

  public:
  void clear_func() ;
  const ::opencv_tensorflow::NameAttrList& func() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::NameAttrList* release_func();
  ::opencv_tensorflow::NameAttrList* mutable_func();
  void set_allocated_func(::opencv_tensorflow::NameAttrList* value);
  void unsafe_arena_set_allocated_func(::opencv_tensorflow::NameAttrList* value);
  ::opencv_tensorflow::NameAttrList* unsafe_arena_release_func();

  private:
  const ::opencv_tensorflow::NameAttrList& _internal_func() const;
  ::opencv_tensorflow::NameAttrList* _internal_mutable_func();

  public:
  // string placeholder = 9;
  bool has_placeholder() const;
  void clear_placeholder() ;
  const std::string& placeholder() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_placeholder(Arg_&& arg, Args_... args);
  std::string* mutable_placeholder();
  PROTOBUF_NODISCARD std::string* release_placeholder();
  void set_allocated_placeholder(std::string* value);

  private:
  const std::string& _internal_placeholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_placeholder(
      const std::string& value);
  std::string* _internal_mutable_placeholder();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.AttrValue)
 private:
  class _Internal;
  void set_has_s();
  void set_has_i();
  void set_has_f();
  void set_has_b();
  void set_has_type();
  void set_has_shape();
  void set_has_tensor();
  void set_has_list();
  void set_has_func();
  void set_has_placeholder();

  inline bool has_value() const;
  inline void clear_has_value();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 10, 4,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr s_;
      ::int64_t i_;
      float f_;
      bool b_;
      int type_;
      ::opencv_tensorflow::TensorShapeProto* shape_;
      ::opencv_tensorflow::TensorProto* tensor_;
      ::opencv_tensorflow::AttrValue_ListValue* list_;
      ::opencv_tensorflow::NameAttrList* func_;
      ::google::protobuf::internal::ArenaStringPtr placeholder_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};// -------------------------------------------------------------------

class NameAttrList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.NameAttrList) */ {
 public:
  inline NameAttrList() : NameAttrList(nullptr) {}
  ~NameAttrList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NameAttrList(::google::protobuf::internal::ConstantInitialized);

  inline NameAttrList(const NameAttrList& from)
      : NameAttrList(nullptr, from) {}
  NameAttrList(NameAttrList&& from) noexcept
    : NameAttrList() {
    *this = ::std::move(from);
  }

  inline NameAttrList& operator=(const NameAttrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameAttrList& operator=(NameAttrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NameAttrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const NameAttrList* internal_default_instance() {
    return reinterpret_cast<const NameAttrList*>(
               &_NameAttrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NameAttrList& a, NameAttrList& b) {
    a.Swap(&b);
  }
  inline void Swap(NameAttrList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameAttrList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NameAttrList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NameAttrList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NameAttrList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NameAttrList& from) {
    NameAttrList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NameAttrList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.NameAttrList";
  }
  protected:
  explicit NameAttrList(::google::protobuf::Arena* arena);
  NameAttrList(::google::protobuf::Arena* arena, const NameAttrList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .opencv_tensorflow.AttrValue> attr = 2;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  const ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>& attr() const;
  ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>* mutable_attr();

  private:
  const ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>& _internal_attr() const;
  ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>* _internal_mutable_attr();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.NameAttrList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<NameAttrList_AttrEntry_DoNotUse, std::string, ::opencv_tensorflow::AttrValue,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        attr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};// -------------------------------------------------------------------

class NameAttrList_AttrEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          NameAttrList_AttrEntry_DoNotUse, std::string, ::opencv_tensorflow::AttrValue,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      NameAttrList_AttrEntry_DoNotUse, std::string, ::opencv_tensorflow::AttrValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  NameAttrList_AttrEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NameAttrList_AttrEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit NameAttrList_AttrEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const NameAttrList_AttrEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const NameAttrList_AttrEntry_DoNotUse*>(
        &_NameAttrList_AttrEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "opencv_tensorflow.NameAttrList.AttrEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_attr_5fvalue_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AttrValue_ListValue

// repeated bytes s = 2;
inline int AttrValue_ListValue::_internal_s_size() const {
  return _internal_s().size();
}
inline int AttrValue_ListValue::s_size() const {
  return _internal_s_size();
}
inline void AttrValue_ListValue::clear_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.s_.Clear();
}
inline std::string* AttrValue_ListValue::add_s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_s()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_tensorflow.AttrValue.ListValue.s)
  return _s;
}
inline const std::string& AttrValue_ListValue::s(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.s)
  return _internal_s().Get(index);
}
inline std::string* AttrValue_ListValue::mutable_s(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.ListValue.s)
  return _internal_mutable_s()->Mutable(index);
}
inline void AttrValue_ListValue::set_s(int index, const std::string& value) {
  _internal_mutable_s()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, std::string&& value) {
  _internal_mutable_s()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_s()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_s()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::set_s(int index, absl::string_view value) {
  _internal_mutable_s()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_s()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_s()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_s()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_s()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_tensorflow.AttrValue.ListValue.s)
}
inline void AttrValue_ListValue::add_s(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_s()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_tensorflow.AttrValue.ListValue.s)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttrValue_ListValue::s() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.s)
  return _internal_s();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttrValue_ListValue::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.s)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_s();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttrValue_ListValue::_internal_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.s_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttrValue_ListValue::_internal_mutable_s() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.s_;
}

// repeated int64 i = 3 [packed = true];
inline int AttrValue_ListValue::_internal_i_size() const {
  return _internal_i().size();
}
inline int AttrValue_ListValue::i_size() const {
  return _internal_i_size();
}
inline void AttrValue_ListValue::clear_i() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.i_.Clear();
}
inline ::int64_t AttrValue_ListValue::i(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.i)
  return _internal_i().Get(index);
}
inline void AttrValue_ListValue::set_i(int index, ::int64_t value) {
  _internal_mutable_i()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.i)
}
inline void AttrValue_ListValue::add_i(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_i()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.i)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AttrValue_ListValue::i() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.i)
  return _internal_i();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AttrValue_ListValue::mutable_i()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.i)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_i();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AttrValue_ListValue::_internal_i()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.i_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AttrValue_ListValue::_internal_mutable_i() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.i_;
}

// repeated float f = 4 [packed = true];
inline int AttrValue_ListValue::_internal_f_size() const {
  return _internal_f().size();
}
inline int AttrValue_ListValue::f_size() const {
  return _internal_f_size();
}
inline void AttrValue_ListValue::clear_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.f_.Clear();
}
inline float AttrValue_ListValue::f(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.f)
  return _internal_f().Get(index);
}
inline void AttrValue_ListValue::set_f(int index, float value) {
  _internal_mutable_f()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.f)
}
inline void AttrValue_ListValue::add_f(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_f()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.f)
}
inline const ::google::protobuf::RepeatedField<float>& AttrValue_ListValue::f() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.f)
  return _internal_f();
}
inline ::google::protobuf::RepeatedField<float>* AttrValue_ListValue::mutable_f()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.f)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_f();
}
inline const ::google::protobuf::RepeatedField<float>& AttrValue_ListValue::_internal_f()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.f_;
}
inline ::google::protobuf::RepeatedField<float>* AttrValue_ListValue::_internal_mutable_f() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.f_;
}

// repeated bool b = 5 [packed = true];
inline int AttrValue_ListValue::_internal_b_size() const {
  return _internal_b().size();
}
inline int AttrValue_ListValue::b_size() const {
  return _internal_b_size();
}
inline void AttrValue_ListValue::clear_b() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.b_.Clear();
}
inline bool AttrValue_ListValue::b(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.b)
  return _internal_b().Get(index);
}
inline void AttrValue_ListValue::set_b(int index, bool value) {
  _internal_mutable_b()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.b)
}
inline void AttrValue_ListValue::add_b(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_b()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.b)
}
inline const ::google::protobuf::RepeatedField<bool>& AttrValue_ListValue::b() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.b)
  return _internal_b();
}
inline ::google::protobuf::RepeatedField<bool>* AttrValue_ListValue::mutable_b()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.b)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_b();
}
inline const ::google::protobuf::RepeatedField<bool>& AttrValue_ListValue::_internal_b()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.b_;
}
inline ::google::protobuf::RepeatedField<bool>* AttrValue_ListValue::_internal_mutable_b() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.b_;
}

// repeated .opencv_tensorflow.DataType type = 6 [packed = true];
inline int AttrValue_ListValue::_internal_type_size() const {
  return _internal_type().size();
}
inline int AttrValue_ListValue::type_size() const {
  return _internal_type_size();
}
inline void AttrValue_ListValue::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.Clear();
}
inline ::opencv_tensorflow::DataType AttrValue_ListValue::type(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.type)
  return static_cast<::opencv_tensorflow::DataType>(_internal_type().Get(index));
}
inline void AttrValue_ListValue::set_type(int index, ::opencv_tensorflow::DataType value) {
  _internal_mutable_type()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.ListValue.type)
}
inline void AttrValue_ListValue::add_type(::opencv_tensorflow::DataType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.type)
}
inline const ::google::protobuf::RepeatedField<int>& AttrValue_ListValue::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.type)
  return _internal_type();
}
inline ::google::protobuf::RepeatedField<int>* AttrValue_ListValue::mutable_type()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.type)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_type();
}
inline const ::google::protobuf::RepeatedField<int>& AttrValue_ListValue::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline ::google::protobuf::RepeatedField<int>* AttrValue_ListValue::_internal_mutable_type() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.type_;
}

// repeated .opencv_tensorflow.TensorShapeProto shape = 7;
inline int AttrValue_ListValue::_internal_shape_size() const {
  return _internal_shape().size();
}
inline int AttrValue_ListValue::shape_size() const {
  return _internal_shape_size();
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue_ListValue::mutable_shape(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.ListValue.shape)
  return _internal_mutable_shape()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>* AttrValue_ListValue::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.shape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shape();
}
inline const ::opencv_tensorflow::TensorShapeProto& AttrValue_ListValue::shape(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.shape)
  return _internal_shape().Get(index);
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue_ListValue::add_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::TensorShapeProto* _add = _internal_mutable_shape()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.shape)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>& AttrValue_ListValue::shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.shape)
  return _internal_shape();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>&
AttrValue_ListValue::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shape_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorShapeProto>*
AttrValue_ListValue::_internal_mutable_shape() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shape_;
}

// repeated .opencv_tensorflow.TensorProto tensor = 8;
inline int AttrValue_ListValue::_internal_tensor_size() const {
  return _internal_tensor().size();
}
inline int AttrValue_ListValue::tensor_size() const {
  return _internal_tensor_size();
}
inline ::opencv_tensorflow::TensorProto* AttrValue_ListValue::mutable_tensor(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.ListValue.tensor)
  return _internal_mutable_tensor()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>* AttrValue_ListValue::mutable_tensor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.AttrValue.ListValue.tensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tensor();
}
inline const ::opencv_tensorflow::TensorProto& AttrValue_ListValue::tensor(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.ListValue.tensor)
  return _internal_tensor().Get(index);
}
inline ::opencv_tensorflow::TensorProto* AttrValue_ListValue::add_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::TensorProto* _add = _internal_mutable_tensor()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.AttrValue.ListValue.tensor)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>& AttrValue_ListValue::tensor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.AttrValue.ListValue.tensor)
  return _internal_tensor();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>&
AttrValue_ListValue::_internal_tensor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tensor_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::TensorProto>*
AttrValue_ListValue::_internal_mutable_tensor() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tensor_;
}

// -------------------------------------------------------------------

// AttrValue

// bytes s = 2;
inline bool AttrValue::has_s() const {
  return value_case() == kS;
}
inline void AttrValue::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void AttrValue::clear_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kS) {
    _impl_.value_.s_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttrValue::s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttrValue::set_s(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.s)
}
inline std::string* AttrValue::mutable_s() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.s)
  return _s;
}
inline const std::string& AttrValue::_internal_s() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (value_case() != kS) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.s_.Get();
}
inline void AttrValue::_internal_set_s(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  _impl_.value_.s_.Set(value, GetArena());
}
inline std::string* AttrValue::_internal_mutable_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kS) {
    clear_value();

    set_has_s();
    _impl_.value_.s_.InitDefault();
  }
  return _impl_.value_.s_.Mutable( GetArena());
}
inline std::string* AttrValue::release_s() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.s)
  if (value_case() != kS) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.s_.Release();
}
inline void AttrValue::set_allocated_s(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_s();
    _impl_.value_.s_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.s)
}

// int64 i = 3;
inline bool AttrValue::has_i() const {
  return value_case() == kI;
}
inline void AttrValue::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void AttrValue::clear_i() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kI) {
    _impl_.value_.i_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t AttrValue::i() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.i)
  return _internal_i();
}
inline void AttrValue::set_i(::int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.i)
}
inline ::int64_t AttrValue::_internal_i() const {
  if (value_case() == kI) {
    return _impl_.value_.i_;
  }
  return ::int64_t{0};
}
inline void AttrValue::_internal_set_i(::int64_t value) {
  if (value_case() != kI) {
    clear_value();
    set_has_i();
  }
  _impl_.value_.i_ = value;
}

// float f = 4;
inline bool AttrValue::has_f() const {
  return value_case() == kF;
}
inline void AttrValue::set_has_f() {
  _impl_._oneof_case_[0] = kF;
}
inline void AttrValue::clear_f() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kF) {
    _impl_.value_.f_ = 0;
    clear_has_value();
  }
}
inline float AttrValue::f() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.f)
  return _internal_f();
}
inline void AttrValue::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.f)
}
inline float AttrValue::_internal_f() const {
  if (value_case() == kF) {
    return _impl_.value_.f_;
  }
  return 0;
}
inline void AttrValue::_internal_set_f(float value) {
  if (value_case() != kF) {
    clear_value();
    set_has_f();
  }
  _impl_.value_.f_ = value;
}

// bool b = 5;
inline bool AttrValue::has_b() const {
  return value_case() == kB;
}
inline void AttrValue::set_has_b() {
  _impl_._oneof_case_[0] = kB;
}
inline void AttrValue::clear_b() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kB) {
    _impl_.value_.b_ = false;
    clear_has_value();
  }
}
inline bool AttrValue::b() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.b)
  return _internal_b();
}
inline void AttrValue::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.b)
}
inline bool AttrValue::_internal_b() const {
  if (value_case() == kB) {
    return _impl_.value_.b_;
  }
  return false;
}
inline void AttrValue::_internal_set_b(bool value) {
  if (value_case() != kB) {
    clear_value();
    set_has_b();
  }
  _impl_.value_.b_ = value;
}

// .opencv_tensorflow.DataType type = 6;
inline bool AttrValue::has_type() const {
  return value_case() == kType;
}
inline void AttrValue::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline void AttrValue::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kType) {
    _impl_.value_.type_ = 0;
    clear_has_value();
  }
}
inline ::opencv_tensorflow::DataType AttrValue::type() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.type)
  return _internal_type();
}
inline void AttrValue::set_type(::opencv_tensorflow::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.type)
}
inline ::opencv_tensorflow::DataType AttrValue::_internal_type() const {
  if (value_case() == kType) {
    return static_cast<::opencv_tensorflow::DataType>(_impl_.value_.type_);
  }
  return static_cast<::opencv_tensorflow::DataType>(0);
}
inline void AttrValue::_internal_set_type(::opencv_tensorflow::DataType value) {
  if (value_case() != kType) {
    clear_value();
    set_has_type();
  }
  _impl_.value_.type_ = value;
}

// .opencv_tensorflow.TensorShapeProto shape = 7;
inline bool AttrValue::has_shape() const {
  return value_case() == kShape;
}
inline bool AttrValue::_internal_has_shape() const {
  return value_case() == kShape;
}
inline void AttrValue::set_has_shape() {
  _impl_._oneof_case_[0] = kShape;
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue::release_shape() {
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.shape)
  if (value_case() == kShape) {
    clear_has_value();
    auto* temp = _impl_.value_.shape_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.shape_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencv_tensorflow::TensorShapeProto& AttrValue::_internal_shape() const {
  return value_case() == kShape ? *_impl_.value_.shape_ : reinterpret_cast<::opencv_tensorflow::TensorShapeProto&>(::opencv_tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::opencv_tensorflow::TensorShapeProto& AttrValue::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.shape)
  return _internal_shape();
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opencv_tensorflow.AttrValue.shape)
  if (value_case() == kShape) {
    clear_has_value();
    auto* temp = _impl_.value_.shape_;
    _impl_.value_.shape_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_shape(::opencv_tensorflow::TensorShapeProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_shape();
    _impl_.value_.shape_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.AttrValue.shape)
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue::_internal_mutable_shape() {
  if (value_case() != kShape) {
    clear_value();
    set_has_shape();
    _impl_.value_.shape_ = CreateMaybeMessage<::opencv_tensorflow::TensorShapeProto>(GetArena());
  }
  return _impl_.value_.shape_;
}
inline ::opencv_tensorflow::TensorShapeProto* AttrValue::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::TensorShapeProto* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.shape)
  return _msg;
}

// .opencv_tensorflow.TensorProto tensor = 8;
inline bool AttrValue::has_tensor() const {
  return value_case() == kTensor;
}
inline bool AttrValue::_internal_has_tensor() const {
  return value_case() == kTensor;
}
inline void AttrValue::set_has_tensor() {
  _impl_._oneof_case_[0] = kTensor;
}
inline ::opencv_tensorflow::TensorProto* AttrValue::release_tensor() {
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.tensor)
  if (value_case() == kTensor) {
    clear_has_value();
    auto* temp = _impl_.value_.tensor_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencv_tensorflow::TensorProto& AttrValue::_internal_tensor() const {
  return value_case() == kTensor ? *_impl_.value_.tensor_ : reinterpret_cast<::opencv_tensorflow::TensorProto&>(::opencv_tensorflow::_TensorProto_default_instance_);
}
inline const ::opencv_tensorflow::TensorProto& AttrValue::tensor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.tensor)
  return _internal_tensor();
}
inline ::opencv_tensorflow::TensorProto* AttrValue::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opencv_tensorflow.AttrValue.tensor)
  if (value_case() == kTensor) {
    clear_has_value();
    auto* temp = _impl_.value_.tensor_;
    _impl_.value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_tensor(::opencv_tensorflow::TensorProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_tensor();
    _impl_.value_.tensor_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.AttrValue.tensor)
}
inline ::opencv_tensorflow::TensorProto* AttrValue::_internal_mutable_tensor() {
  if (value_case() != kTensor) {
    clear_value();
    set_has_tensor();
    _impl_.value_.tensor_ = CreateMaybeMessage<::opencv_tensorflow::TensorProto>(GetArena());
  }
  return _impl_.value_.tensor_;
}
inline ::opencv_tensorflow::TensorProto* AttrValue::mutable_tensor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::TensorProto* _msg = _internal_mutable_tensor();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.tensor)
  return _msg;
}

// .opencv_tensorflow.AttrValue.ListValue list = 1;
inline bool AttrValue::has_list() const {
  return value_case() == kList;
}
inline bool AttrValue::_internal_has_list() const {
  return value_case() == kList;
}
inline void AttrValue::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void AttrValue::clear_list() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kList) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.list_;
    }
    clear_has_value();
  }
}
inline ::opencv_tensorflow::AttrValue_ListValue* AttrValue::release_list() {
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencv_tensorflow::AttrValue_ListValue& AttrValue::_internal_list() const {
  return value_case() == kList ? *_impl_.value_.list_ : reinterpret_cast<::opencv_tensorflow::AttrValue_ListValue&>(::opencv_tensorflow::_AttrValue_ListValue_default_instance_);
}
inline const ::opencv_tensorflow::AttrValue_ListValue& AttrValue::list() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.list)
  return _internal_list();
}
inline ::opencv_tensorflow::AttrValue_ListValue* AttrValue::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opencv_tensorflow.AttrValue.list)
  if (value_case() == kList) {
    clear_has_value();
    auto* temp = _impl_.value_.list_;
    _impl_.value_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_list(::opencv_tensorflow::AttrValue_ListValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_list();
    _impl_.value_.list_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.AttrValue.list)
}
inline ::opencv_tensorflow::AttrValue_ListValue* AttrValue::_internal_mutable_list() {
  if (value_case() != kList) {
    clear_value();
    set_has_list();
    _impl_.value_.list_ = CreateMaybeMessage<::opencv_tensorflow::AttrValue_ListValue>(GetArena());
  }
  return _impl_.value_.list_;
}
inline ::opencv_tensorflow::AttrValue_ListValue* AttrValue::mutable_list() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::AttrValue_ListValue* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.list)
  return _msg;
}

// .opencv_tensorflow.NameAttrList func = 10;
inline bool AttrValue::has_func() const {
  return value_case() == kFunc;
}
inline bool AttrValue::_internal_has_func() const {
  return value_case() == kFunc;
}
inline void AttrValue::set_has_func() {
  _impl_._oneof_case_[0] = kFunc;
}
inline void AttrValue::clear_func() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kFunc) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.func_;
    }
    clear_has_value();
  }
}
inline ::opencv_tensorflow::NameAttrList* AttrValue::release_func() {
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.func)
  if (value_case() == kFunc) {
    clear_has_value();
    auto* temp = _impl_.value_.func_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::opencv_tensorflow::NameAttrList& AttrValue::_internal_func() const {
  return value_case() == kFunc ? *_impl_.value_.func_ : reinterpret_cast<::opencv_tensorflow::NameAttrList&>(::opencv_tensorflow::_NameAttrList_default_instance_);
}
inline const ::opencv_tensorflow::NameAttrList& AttrValue::func() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.func)
  return _internal_func();
}
inline ::opencv_tensorflow::NameAttrList* AttrValue::unsafe_arena_release_func() {
  // @@protoc_insertion_point(field_unsafe_arena_release:opencv_tensorflow.AttrValue.func)
  if (value_case() == kFunc) {
    clear_has_value();
    auto* temp = _impl_.value_.func_;
    _impl_.value_.func_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttrValue::unsafe_arena_set_allocated_func(::opencv_tensorflow::NameAttrList* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_func();
    _impl_.value_.func_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.AttrValue.func)
}
inline ::opencv_tensorflow::NameAttrList* AttrValue::_internal_mutable_func() {
  if (value_case() != kFunc) {
    clear_value();
    set_has_func();
    _impl_.value_.func_ = CreateMaybeMessage<::opencv_tensorflow::NameAttrList>(GetArena());
  }
  return _impl_.value_.func_;
}
inline ::opencv_tensorflow::NameAttrList* AttrValue::mutable_func() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::NameAttrList* _msg = _internal_mutable_func();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.func)
  return _msg;
}

// string placeholder = 9;
inline bool AttrValue::has_placeholder() const {
  return value_case() == kPlaceholder;
}
inline void AttrValue::set_has_placeholder() {
  _impl_._oneof_case_[0] = kPlaceholder;
}
inline void AttrValue::clear_placeholder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kPlaceholder) {
    _impl_.value_.placeholder_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttrValue::placeholder() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.AttrValue.placeholder)
  return _internal_placeholder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttrValue::set_placeholder(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kPlaceholder) {
    clear_value();

    set_has_placeholder();
    _impl_.value_.placeholder_.InitDefault();
  }
  _impl_.value_.placeholder_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.AttrValue.placeholder)
}
inline std::string* AttrValue::mutable_placeholder() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_placeholder();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.AttrValue.placeholder)
  return _s;
}
inline const std::string& AttrValue::_internal_placeholder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (value_case() != kPlaceholder) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.placeholder_.Get();
}
inline void AttrValue::_internal_set_placeholder(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kPlaceholder) {
    clear_value();

    set_has_placeholder();
    _impl_.value_.placeholder_.InitDefault();
  }
  _impl_.value_.placeholder_.Set(value, GetArena());
}
inline std::string* AttrValue::_internal_mutable_placeholder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kPlaceholder) {
    clear_value();

    set_has_placeholder();
    _impl_.value_.placeholder_.InitDefault();
  }
  return _impl_.value_.placeholder_.Mutable( GetArena());
}
inline std::string* AttrValue::release_placeholder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.AttrValue.placeholder)
  if (value_case() != kPlaceholder) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.placeholder_.Release();
}
inline void AttrValue::set_allocated_placeholder(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_placeholder();
    _impl_.value_.placeholder_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.AttrValue.placeholder)
}

inline bool AttrValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttrValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AttrValue::ValueCase AttrValue::value_case() const {
  return AttrValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NameAttrList

// string name = 1;
inline void NameAttrList::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NameAttrList::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.NameAttrList.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NameAttrList::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.NameAttrList.name)
}
inline std::string* NameAttrList::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.NameAttrList.name)
  return _s;
}
inline const std::string& NameAttrList::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void NameAttrList::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NameAttrList::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NameAttrList::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.NameAttrList.name)
  return _impl_.name_.Release();
}
inline void NameAttrList::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.NameAttrList.name)
}

// map<string, .opencv_tensorflow.AttrValue> attr = 2;
inline int NameAttrList::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int NameAttrList::attr_size() const {
  return _internal_attr_size();
}
inline void NameAttrList::clear_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attr_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>& NameAttrList::_internal_attr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attr_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>& NameAttrList::attr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:opencv_tensorflow.NameAttrList.attr)
  return _internal_attr();
}
inline ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>* NameAttrList::_internal_mutable_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.attr_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::opencv_tensorflow::AttrValue>* NameAttrList::mutable_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:opencv_tensorflow.NameAttrList.attr)
  return _internal_mutable_attr();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_attr_5fvalue_2eproto_2epb_2eh
