// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: versions.proto

#include "versions.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace opencv_tensorflow {
PROTOBUF_CONSTEXPR VersionDef::VersionDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bad_consumers_)*/ {}
  ,/* _impl_._bad_consumers_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.producer_)*/ 0

  , /*decltype(_impl_.min_consumer_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefDefaultTypeInternal() {}
  union {
    VersionDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefDefaultTypeInternal _VersionDef_default_instance_;
}  // namespace opencv_tensorflow
static ::_pb::Metadata file_level_metadata_versions_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_versions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_versions_2eproto = nullptr;
const ::uint32_t TableStruct_versions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.producer_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.min_consumer_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.bad_consumers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::opencv_tensorflow::VersionDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::opencv_tensorflow::_VersionDef_default_instance_._instance,
};
const char descriptor_table_protodef_versions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016versions.proto\022\021opencv_tensorflow\"K\n\nV"
    "ersionDef\022\020\n\010producer\030\001 \001(\005\022\024\n\014min_consu"
    "mer\030\002 \001(\005\022\025\n\rbad_consumers\030\003 \003(\005B/\n\030org."
    "tensorflow.frameworkB\016VersionsProtosP\001\370\001"
    "\001b\006proto3"
};
static ::absl::once_flag descriptor_table_versions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_versions_2eproto = {
    false,
    false,
    169,
    descriptor_table_protodef_versions_2eproto,
    "versions.proto",
    &descriptor_table_versions_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_versions_2eproto::offsets,
    file_level_metadata_versions_2eproto,
    file_level_enum_descriptors_versions_2eproto,
    file_level_service_descriptors_versions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_versions_2eproto_getter() {
  return &descriptor_table_versions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_versions_2eproto(&descriptor_table_versions_2eproto);
namespace opencv_tensorflow {
// ===================================================================

class VersionDef::_Internal {
 public:
};

VersionDef::VersionDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.VersionDef)
}
VersionDef::VersionDef(const VersionDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VersionDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_consumers_) { from._impl_.bad_consumers_ }
    ,/* _impl_._bad_consumers_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.producer_) {}

    , decltype(_impl_.min_consumer_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.producer_, &from._impl_.producer_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.min_consumer_) -
    reinterpret_cast<char*>(&_impl_.producer_)) + sizeof(_impl_.min_consumer_));
  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.VersionDef)
}

inline void VersionDef::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bad_consumers_) { arena }
    ,/* _impl_._bad_consumers_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.producer_) { 0 }

    , decltype(_impl_.min_consumer_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VersionDef::~VersionDef() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.VersionDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VersionDef::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bad_consumers_.~RepeatedField();
}

void VersionDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VersionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.VersionDef)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bad_consumers_.Clear();
  ::memset(&_impl_.producer_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_consumer_) -
      reinterpret_cast<char*>(&_impl_.producer_)) + sizeof(_impl_.min_consumer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 producer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.producer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 min_consumer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.min_consumer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 bad_consumers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bad_consumers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_bad_consumers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VersionDef::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.VersionDef)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_producer(), target);
  }

  // int32 min_consumer = 2;
  if (this->_internal_min_consumer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_min_consumer(), target);
  }

  // repeated int32 bad_consumers = 3;
  {
    int byte_size = _impl_._bad_consumers_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, _internal_bad_consumers(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.VersionDef)
  return target;
}

::size_t VersionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.VersionDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bad_consumers = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(this->_impl_.bad_consumers_)
    ;
    _impl_._bad_consumers_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_producer());
  }

  // int32 min_consumer = 2;
  if (this->_internal_min_consumer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_consumer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VersionDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionDef::GetClassData() const { return &_class_data_; }


void VersionDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VersionDef*>(&to_msg);
  auto& from = static_cast<const VersionDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.VersionDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bad_consumers_.MergeFrom(from._impl_.bad_consumers_);
  if (from._internal_producer() != 0) {
    _this->_internal_set_producer(from._internal_producer());
  }
  if (from._internal_min_consumer() != 0) {
    _this->_internal_set_min_consumer(from._internal_min_consumer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionDef::CopyFrom(const VersionDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.VersionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionDef::IsInitialized() const {
  return true;
}

void VersionDef::InternalSwap(VersionDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bad_consumers_.InternalSwap(&other->_impl_.bad_consumers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.min_consumer_)
      + sizeof(VersionDef::_impl_.min_consumer_)
      - PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.producer_)>(
          reinterpret_cast<char*>(&_impl_.producer_),
          reinterpret_cast<char*>(&other->_impl_.producer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_versions_2eproto_getter, &descriptor_table_versions_2eproto_once,
      file_level_metadata_versions_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::opencv_tensorflow::VersionDef*
Arena::CreateMaybeMessage< ::opencv_tensorflow::VersionDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::opencv_tensorflow::VersionDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
