// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: op_def.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "attr_value.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_op_5fdef_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_op_5fdef_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_op_5fdef_2eproto;
namespace opencv_tensorflow {
class OpDef;
struct OpDefDefaultTypeInternal;
extern OpDefDefaultTypeInternal _OpDef_default_instance_;
class OpDef_ArgDef;
struct OpDef_ArgDefDefaultTypeInternal;
extern OpDef_ArgDefDefaultTypeInternal _OpDef_ArgDef_default_instance_;
class OpDef_AttrDef;
struct OpDef_AttrDefDefaultTypeInternal;
extern OpDef_AttrDefDefaultTypeInternal _OpDef_AttrDef_default_instance_;
class OpDeprecation;
struct OpDeprecationDefaultTypeInternal;
extern OpDeprecationDefaultTypeInternal _OpDeprecation_default_instance_;
class OpList;
struct OpListDefaultTypeInternal;
extern OpListDefaultTypeInternal _OpList_default_instance_;
}  // namespace opencv_tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opencv_tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class OpDeprecation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.OpDeprecation) */ {
 public:
  inline OpDeprecation() : OpDeprecation(nullptr) {}
  ~OpDeprecation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpDeprecation(::google::protobuf::internal::ConstantInitialized);

  inline OpDeprecation(const OpDeprecation& from)
      : OpDeprecation(nullptr, from) {}
  OpDeprecation(OpDeprecation&& from) noexcept
    : OpDeprecation() {
    *this = ::std::move(from);
  }

  inline OpDeprecation& operator=(const OpDeprecation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDeprecation& operator=(OpDeprecation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDeprecation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDeprecation* internal_default_instance() {
    return reinterpret_cast<const OpDeprecation*>(
               &_OpDeprecation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpDeprecation& a, OpDeprecation& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDeprecation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDeprecation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpDeprecation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpDeprecation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpDeprecation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpDeprecation& from) {
    OpDeprecation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpDeprecation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.OpDeprecation";
  }
  protected:
  explicit OpDeprecation(::google::protobuf::Arena* arena);
  OpDeprecation(::google::protobuf::Arena* arena, const OpDeprecation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExplanationFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // string explanation = 2;
  void clear_explanation() ;
  const std::string& explanation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_explanation(Arg_&& arg, Args_... args);
  std::string* mutable_explanation();
  PROTOBUF_NODISCARD std::string* release_explanation();
  void set_allocated_explanation(std::string* value);

  private:
  const std::string& _internal_explanation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explanation(
      const std::string& value);
  std::string* _internal_mutable_explanation();

  public:
  // int32 version = 1;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.OpDeprecation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr explanation_;
    ::int32_t version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};// -------------------------------------------------------------------

class OpDef_ArgDef final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.OpDef.ArgDef) */ {
 public:
  inline OpDef_ArgDef() : OpDef_ArgDef(nullptr) {}
  ~OpDef_ArgDef() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpDef_ArgDef(::google::protobuf::internal::ConstantInitialized);

  inline OpDef_ArgDef(const OpDef_ArgDef& from)
      : OpDef_ArgDef(nullptr, from) {}
  OpDef_ArgDef(OpDef_ArgDef&& from) noexcept
    : OpDef_ArgDef() {
    *this = ::std::move(from);
  }

  inline OpDef_ArgDef& operator=(const OpDef_ArgDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef_ArgDef& operator=(OpDef_ArgDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDef_ArgDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDef_ArgDef* internal_default_instance() {
    return reinterpret_cast<const OpDef_ArgDef*>(
               &_OpDef_ArgDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OpDef_ArgDef& a, OpDef_ArgDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef_ArgDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef_ArgDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpDef_ArgDef* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpDef_ArgDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpDef_ArgDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpDef_ArgDef& from) {
    OpDef_ArgDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpDef_ArgDef* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.OpDef.ArgDef";
  }
  protected:
  explicit OpDef_ArgDef(::google::protobuf::Arena* arena);
  OpDef_ArgDef(::google::protobuf::Arena* arena, const OpDef_ArgDef& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kTypeAttrFieldNumber = 4,
    kNumberAttrFieldNumber = 5,
    kTypeListAttrFieldNumber = 6,
    kTypeFieldNumber = 3,
    kIsRefFieldNumber = 16,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string type_attr = 4;
  void clear_type_attr() ;
  const std::string& type_attr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_attr(Arg_&& arg, Args_... args);
  std::string* mutable_type_attr();
  PROTOBUF_NODISCARD std::string* release_type_attr();
  void set_allocated_type_attr(std::string* value);

  private:
  const std::string& _internal_type_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_attr(
      const std::string& value);
  std::string* _internal_mutable_type_attr();

  public:
  // string number_attr = 5;
  void clear_number_attr() ;
  const std::string& number_attr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_number_attr(Arg_&& arg, Args_... args);
  std::string* mutable_number_attr();
  PROTOBUF_NODISCARD std::string* release_number_attr();
  void set_allocated_number_attr(std::string* value);

  private:
  const std::string& _internal_number_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_number_attr(
      const std::string& value);
  std::string* _internal_mutable_number_attr();

  public:
  // string type_list_attr = 6;
  void clear_type_list_attr() ;
  const std::string& type_list_attr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_list_attr(Arg_&& arg, Args_... args);
  std::string* mutable_type_list_attr();
  PROTOBUF_NODISCARD std::string* release_type_list_attr();
  void set_allocated_type_list_attr(std::string* value);

  private:
  const std::string& _internal_type_list_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_list_attr(
      const std::string& value);
  std::string* _internal_mutable_type_list_attr();

  public:
  // .opencv_tensorflow.DataType type = 3;
  void clear_type() ;
  ::opencv_tensorflow::DataType type() const;
  void set_type(::opencv_tensorflow::DataType value);

  private:
  ::opencv_tensorflow::DataType _internal_type() const;
  void _internal_set_type(::opencv_tensorflow::DataType value);

  public:
  // bool is_ref = 16;
  void clear_is_ref() ;
  bool is_ref() const;
  void set_is_ref(bool value);

  private:
  bool _internal_is_ref() const;
  void _internal_set_is_ref(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.OpDef.ArgDef)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      88, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr type_attr_;
    ::google::protobuf::internal::ArenaStringPtr number_attr_;
    ::google::protobuf::internal::ArenaStringPtr type_list_attr_;
    int type_;
    bool is_ref_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};// -------------------------------------------------------------------

class OpDef_AttrDef final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.OpDef.AttrDef) */ {
 public:
  inline OpDef_AttrDef() : OpDef_AttrDef(nullptr) {}
  ~OpDef_AttrDef() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpDef_AttrDef(::google::protobuf::internal::ConstantInitialized);

  inline OpDef_AttrDef(const OpDef_AttrDef& from)
      : OpDef_AttrDef(nullptr, from) {}
  OpDef_AttrDef(OpDef_AttrDef&& from) noexcept
    : OpDef_AttrDef() {
    *this = ::std::move(from);
  }

  inline OpDef_AttrDef& operator=(const OpDef_AttrDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef_AttrDef& operator=(OpDef_AttrDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDef_AttrDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDef_AttrDef* internal_default_instance() {
    return reinterpret_cast<const OpDef_AttrDef*>(
               &_OpDef_AttrDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpDef_AttrDef& a, OpDef_AttrDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef_AttrDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef_AttrDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpDef_AttrDef* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpDef_AttrDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpDef_AttrDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpDef_AttrDef& from) {
    OpDef_AttrDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpDef_AttrDef* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.OpDef.AttrDef";
  }
  protected:
  explicit OpDef_AttrDef(::google::protobuf::Arena* arena);
  OpDef_AttrDef(::google::protobuf::Arena* arena, const OpDef_AttrDef& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kDefaultValueFieldNumber = 3,
    kAllowedValuesFieldNumber = 7,
    kMinimumFieldNumber = 6,
    kHasMinimumFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 2;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string description = 4;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .opencv_tensorflow.AttrValue default_value = 3;
  bool has_default_value() const;
  void clear_default_value() ;
  const ::opencv_tensorflow::AttrValue& default_value() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::AttrValue* release_default_value();
  ::opencv_tensorflow::AttrValue* mutable_default_value();
  void set_allocated_default_value(::opencv_tensorflow::AttrValue* value);
  void unsafe_arena_set_allocated_default_value(::opencv_tensorflow::AttrValue* value);
  ::opencv_tensorflow::AttrValue* unsafe_arena_release_default_value();

  private:
  const ::opencv_tensorflow::AttrValue& _internal_default_value() const;
  ::opencv_tensorflow::AttrValue* _internal_mutable_default_value();

  public:
  // .opencv_tensorflow.AttrValue allowed_values = 7;
  bool has_allowed_values() const;
  void clear_allowed_values() ;
  const ::opencv_tensorflow::AttrValue& allowed_values() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::AttrValue* release_allowed_values();
  ::opencv_tensorflow::AttrValue* mutable_allowed_values();
  void set_allocated_allowed_values(::opencv_tensorflow::AttrValue* value);
  void unsafe_arena_set_allocated_allowed_values(::opencv_tensorflow::AttrValue* value);
  ::opencv_tensorflow::AttrValue* unsafe_arena_release_allowed_values();

  private:
  const ::opencv_tensorflow::AttrValue& _internal_allowed_values() const;
  ::opencv_tensorflow::AttrValue* _internal_mutable_allowed_values();

  public:
  // int64 minimum = 6;
  void clear_minimum() ;
  ::int64_t minimum() const;
  void set_minimum(::int64_t value);

  private:
  ::int64_t _internal_minimum() const;
  void _internal_set_minimum(::int64_t value);

  public:
  // bool has_minimum = 5;
  void clear_has_minimum() ;
  bool has_minimum() const;
  void set_has_minimum(bool value);

  private:
  bool _internal_has_minimum() const;
  void _internal_set_has_minimum(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.OpDef.AttrDef)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::opencv_tensorflow::AttrValue* default_value_;
    ::opencv_tensorflow::AttrValue* allowed_values_;
    ::int64_t minimum_;
    bool has_minimum_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};// -------------------------------------------------------------------

class OpDef final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.OpDef) */ {
 public:
  inline OpDef() : OpDef(nullptr) {}
  ~OpDef() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpDef(::google::protobuf::internal::ConstantInitialized);

  inline OpDef(const OpDef& from)
      : OpDef(nullptr, from) {}
  OpDef(OpDef&& from) noexcept
    : OpDef() {
    *this = ::std::move(from);
  }

  inline OpDef& operator=(const OpDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDef& operator=(OpDef&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpDef& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpDef* internal_default_instance() {
    return reinterpret_cast<const OpDef*>(
               &_OpDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpDef& a, OpDef& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDef* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpDef* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpDef>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpDef& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpDef& from) {
    OpDef::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpDef* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.OpDef";
  }
  protected:
  explicit OpDef(::google::protobuf::Arena* arena);
  OpDef(::google::protobuf::Arena* arena, const OpDef& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ArgDef = OpDef_ArgDef;
  using AttrDef = OpDef_AttrDef;

  // accessors -------------------------------------------------------

  enum : int {
    kInputArgFieldNumber = 2,
    kOutputArgFieldNumber = 3,
    kAttrFieldNumber = 4,
    kNameFieldNumber = 1,
    kSummaryFieldNumber = 5,
    kDescriptionFieldNumber = 6,
    kDeprecationFieldNumber = 8,
    kIsCommutativeFieldNumber = 18,
    kIsAggregateFieldNumber = 16,
    kIsStatefulFieldNumber = 17,
    kAllowsUninitializedInputFieldNumber = 19,
  };
  // repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
  int input_arg_size() const;
  private:
  int _internal_input_arg_size() const;

  public:
  void clear_input_arg() ;
  ::opencv_tensorflow::OpDef_ArgDef* mutable_input_arg(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef >*
      mutable_input_arg();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>& _internal_input_arg() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>* _internal_mutable_input_arg();
  public:
  const ::opencv_tensorflow::OpDef_ArgDef& input_arg(int index) const;
  ::opencv_tensorflow::OpDef_ArgDef* add_input_arg();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef >&
      input_arg() const;
  // repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
  int output_arg_size() const;
  private:
  int _internal_output_arg_size() const;

  public:
  void clear_output_arg() ;
  ::opencv_tensorflow::OpDef_ArgDef* mutable_output_arg(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef >*
      mutable_output_arg();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>& _internal_output_arg() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>* _internal_mutable_output_arg();
  public:
  const ::opencv_tensorflow::OpDef_ArgDef& output_arg(int index) const;
  ::opencv_tensorflow::OpDef_ArgDef* add_output_arg();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef >&
      output_arg() const;
  // repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
  int attr_size() const;
  private:
  int _internal_attr_size() const;

  public:
  void clear_attr() ;
  ::opencv_tensorflow::OpDef_AttrDef* mutable_attr(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_AttrDef >*
      mutable_attr();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>& _internal_attr() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>* _internal_mutable_attr();
  public:
  const ::opencv_tensorflow::OpDef_AttrDef& attr(int index) const;
  ::opencv_tensorflow::OpDef_AttrDef* add_attr();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_AttrDef >&
      attr() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string summary = 5;
  void clear_summary() ;
  const std::string& summary() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* value);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // string description = 6;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .opencv_tensorflow.OpDeprecation deprecation = 8;
  bool has_deprecation() const;
  void clear_deprecation() ;
  const ::opencv_tensorflow::OpDeprecation& deprecation() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::OpDeprecation* release_deprecation();
  ::opencv_tensorflow::OpDeprecation* mutable_deprecation();
  void set_allocated_deprecation(::opencv_tensorflow::OpDeprecation* value);
  void unsafe_arena_set_allocated_deprecation(::opencv_tensorflow::OpDeprecation* value);
  ::opencv_tensorflow::OpDeprecation* unsafe_arena_release_deprecation();

  private:
  const ::opencv_tensorflow::OpDeprecation& _internal_deprecation() const;
  ::opencv_tensorflow::OpDeprecation* _internal_mutable_deprecation();

  public:
  // bool is_commutative = 18;
  void clear_is_commutative() ;
  bool is_commutative() const;
  void set_is_commutative(bool value);

  private:
  bool _internal_is_commutative() const;
  void _internal_set_is_commutative(bool value);

  public:
  // bool is_aggregate = 16;
  void clear_is_aggregate() ;
  bool is_aggregate() const;
  void set_is_aggregate(bool value);

  private:
  bool _internal_is_aggregate() const;
  void _internal_set_is_aggregate(bool value);

  public:
  // bool is_stateful = 17;
  void clear_is_stateful() ;
  bool is_stateful() const;
  void set_is_stateful(bool value);

  private:
  bool _internal_is_stateful() const;
  void _internal_set_is_stateful(bool value);

  public:
  // bool allows_uninitialized_input = 19;
  void clear_allows_uninitialized_input() ;
  bool allows_uninitialized_input() const;
  void set_allows_uninitialized_input(bool value);

  private:
  bool _internal_allows_uninitialized_input() const;
  void _internal_set_allows_uninitialized_input(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.OpDef)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 4,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef > input_arg_;
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_ArgDef > output_arg_;
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef_AttrDef > attr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr summary_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::opencv_tensorflow::OpDeprecation* deprecation_;
    bool is_commutative_;
    bool is_aggregate_;
    bool is_stateful_;
    bool allows_uninitialized_input_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};// -------------------------------------------------------------------

class OpList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.OpList) */ {
 public:
  inline OpList() : OpList(nullptr) {}
  ~OpList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OpList(::google::protobuf::internal::ConstantInitialized);

  inline OpList(const OpList& from)
      : OpList(nullptr, from) {}
  OpList(OpList&& from) noexcept
    : OpList() {
    *this = ::std::move(from);
  }

  inline OpList& operator=(const OpList& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpList& operator=(OpList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpList& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpList* internal_default_instance() {
    return reinterpret_cast<const OpList*>(
               &_OpList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpList& a, OpList& b) {
    a.Swap(&b);
  }
  inline void Swap(OpList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OpList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OpList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OpList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OpList& from) {
    OpList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OpList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.OpList";
  }
  protected:
  explicit OpList(::google::protobuf::Arena* arena);
  OpList(::google::protobuf::Arena* arena, const OpList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // repeated .opencv_tensorflow.OpDef op = 1;
  int op_size() const;
  private:
  int _internal_op_size() const;

  public:
  void clear_op() ;
  ::opencv_tensorflow::OpDef* mutable_op(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef >*
      mutable_op();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>& _internal_op() const;
  ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>* _internal_mutable_op();
  public:
  const ::opencv_tensorflow::OpDef& op(int index) const;
  ::opencv_tensorflow::OpDef* add_op();
  const ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef >&
      op() const;
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.OpList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opencv_tensorflow::OpDef > op_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_op_5fdef_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OpDef_ArgDef

// string name = 1;
inline void OpDef_ArgDef::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& OpDef_ArgDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_ArgDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.name)
}
inline std::string* OpDef_ArgDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.ArgDef.name)
  return _s;
}
inline const std::string& OpDef_ArgDef::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void OpDef_ArgDef::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* OpDef_ArgDef::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* OpDef_ArgDef::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.ArgDef.name)
  return _impl_.name_.Release();
}
inline void OpDef_ArgDef::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.ArgDef.name)
}

// string description = 2;
inline void OpDef_ArgDef::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& OpDef_ArgDef::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_ArgDef::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.description)
}
inline std::string* OpDef_ArgDef::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.ArgDef.description)
  return _s;
}
inline const std::string& OpDef_ArgDef::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void OpDef_ArgDef::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* OpDef_ArgDef::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* OpDef_ArgDef::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.ArgDef.description)
  return _impl_.description_.Release();
}
inline void OpDef_ArgDef::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.ArgDef.description)
}

// .opencv_tensorflow.DataType type = 3;
inline void OpDef_ArgDef::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::opencv_tensorflow::DataType OpDef_ArgDef::type() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.type)
  return _internal_type();
}
inline void OpDef_ArgDef::set_type(::opencv_tensorflow::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.type)
}
inline ::opencv_tensorflow::DataType OpDef_ArgDef::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_tensorflow::DataType>(_impl_.type_);
}
inline void OpDef_ArgDef::_internal_set_type(::opencv_tensorflow::DataType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string type_attr = 4;
inline void OpDef_ArgDef::clear_type_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_attr_.ClearToEmpty();
}
inline const std::string& OpDef_ArgDef::type_attr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.type_attr)
  return _internal_type_attr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_ArgDef::set_type_attr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_attr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.type_attr)
}
inline std::string* OpDef_ArgDef::mutable_type_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type_attr();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.ArgDef.type_attr)
  return _s;
}
inline const std::string& OpDef_ArgDef::_internal_type_attr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_attr_.Get();
}
inline void OpDef_ArgDef::_internal_set_type_attr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_attr_.Set(value, GetArena());
}
inline std::string* OpDef_ArgDef::_internal_mutable_type_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_attr_.Mutable( GetArena());
}
inline std::string* OpDef_ArgDef::release_type_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.ArgDef.type_attr)
  return _impl_.type_attr_.Release();
}
inline void OpDef_ArgDef::set_allocated_type_attr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_attr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_attr_.IsDefault()) {
          _impl_.type_attr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.ArgDef.type_attr)
}

// string number_attr = 5;
inline void OpDef_ArgDef::clear_number_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_attr_.ClearToEmpty();
}
inline const std::string& OpDef_ArgDef::number_attr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.number_attr)
  return _internal_number_attr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_ArgDef::set_number_attr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_attr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.number_attr)
}
inline std::string* OpDef_ArgDef::mutable_number_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_number_attr();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.ArgDef.number_attr)
  return _s;
}
inline const std::string& OpDef_ArgDef::_internal_number_attr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_attr_.Get();
}
inline void OpDef_ArgDef::_internal_set_number_attr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_attr_.Set(value, GetArena());
}
inline std::string* OpDef_ArgDef::_internal_mutable_number_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.number_attr_.Mutable( GetArena());
}
inline std::string* OpDef_ArgDef::release_number_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.ArgDef.number_attr)
  return _impl_.number_attr_.Release();
}
inline void OpDef_ArgDef::set_allocated_number_attr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_attr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.number_attr_.IsDefault()) {
          _impl_.number_attr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.ArgDef.number_attr)
}

// string type_list_attr = 6;
inline void OpDef_ArgDef::clear_type_list_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_list_attr_.ClearToEmpty();
}
inline const std::string& OpDef_ArgDef::type_list_attr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
  return _internal_type_list_attr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_ArgDef::set_type_list_attr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_list_attr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
}
inline std::string* OpDef_ArgDef::mutable_type_list_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type_list_attr();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
  return _s;
}
inline const std::string& OpDef_ArgDef::_internal_type_list_attr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_list_attr_.Get();
}
inline void OpDef_ArgDef::_internal_set_type_list_attr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_list_attr_.Set(value, GetArena());
}
inline std::string* OpDef_ArgDef::_internal_mutable_type_list_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_list_attr_.Mutable( GetArena());
}
inline std::string* OpDef_ArgDef::release_type_list_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
  return _impl_.type_list_attr_.Release();
}
inline void OpDef_ArgDef::set_allocated_type_list_attr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_list_attr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_list_attr_.IsDefault()) {
          _impl_.type_list_attr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.ArgDef.type_list_attr)
}

// bool is_ref = 16;
inline void OpDef_ArgDef::clear_is_ref() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_ref_ = false;
}
inline bool OpDef_ArgDef::is_ref() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.ArgDef.is_ref)
  return _internal_is_ref();
}
inline void OpDef_ArgDef::set_is_ref(bool value) {
  _internal_set_is_ref(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.ArgDef.is_ref)
}
inline bool OpDef_ArgDef::_internal_is_ref() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_ref_;
}
inline void OpDef_ArgDef::_internal_set_is_ref(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_ref_ = value;
}

// -------------------------------------------------------------------

// OpDef_AttrDef

// string name = 1;
inline void OpDef_AttrDef::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& OpDef_AttrDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_AttrDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.name)
}
inline std::string* OpDef_AttrDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.AttrDef.name)
  return _s;
}
inline const std::string& OpDef_AttrDef::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void OpDef_AttrDef::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* OpDef_AttrDef::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* OpDef_AttrDef::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.AttrDef.name)
  return _impl_.name_.Release();
}
inline void OpDef_AttrDef::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.AttrDef.name)
}

// string type = 2;
inline void OpDef_AttrDef::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& OpDef_AttrDef::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_AttrDef::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.type)
}
inline std::string* OpDef_AttrDef::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.AttrDef.type)
  return _s;
}
inline const std::string& OpDef_AttrDef::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void OpDef_AttrDef::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* OpDef_AttrDef::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* OpDef_AttrDef::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.AttrDef.type)
  return _impl_.type_.Release();
}
inline void OpDef_AttrDef::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.AttrDef.type)
}

// .opencv_tensorflow.AttrValue default_value = 3;
inline bool OpDef_AttrDef::has_default_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_value_ != nullptr);
  return value;
}
inline const ::opencv_tensorflow::AttrValue& OpDef_AttrDef::_internal_default_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_tensorflow::AttrValue* p = _impl_.default_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_tensorflow::AttrValue&>(::opencv_tensorflow::_AttrValue_default_instance_);
}
inline const ::opencv_tensorflow::AttrValue& OpDef_AttrDef::default_value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.default_value)
  return _internal_default_value();
}
inline void OpDef_AttrDef::unsafe_arena_set_allocated_default_value(::opencv_tensorflow::AttrValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_value_);
  }
  _impl_.default_value_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.OpDef.AttrDef.default_value)
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::release_default_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::AttrValue* released = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::unsafe_arena_release_default_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.AttrDef.default_value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::AttrValue* temp = _impl_.default_value_;
  _impl_.default_value_ = nullptr;
  return temp;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::_internal_mutable_default_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_tensorflow::AttrValue>(GetArena());
    _impl_.default_value_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(p);
  }
  return _impl_.default_value_;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::mutable_default_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::AttrValue* _msg = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.AttrDef.default_value)
  return _msg;
}
inline void OpDef_AttrDef::set_allocated_default_value(::opencv_tensorflow::AttrValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.default_value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.default_value_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.AttrDef.default_value)
}

// string description = 4;
inline void OpDef_AttrDef::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& OpDef_AttrDef::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef_AttrDef::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.description)
}
inline std::string* OpDef_AttrDef::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.AttrDef.description)
  return _s;
}
inline const std::string& OpDef_AttrDef::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void OpDef_AttrDef::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* OpDef_AttrDef::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* OpDef_AttrDef::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.AttrDef.description)
  return _impl_.description_.Release();
}
inline void OpDef_AttrDef::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.AttrDef.description)
}

// bool has_minimum = 5;
inline void OpDef_AttrDef::clear_has_minimum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.has_minimum_ = false;
}
inline bool OpDef_AttrDef::has_minimum() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.has_minimum)
  return _internal_has_minimum();
}
inline void OpDef_AttrDef::set_has_minimum(bool value) {
  _internal_set_has_minimum(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.has_minimum)
}
inline bool OpDef_AttrDef::_internal_has_minimum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.has_minimum_;
}
inline void OpDef_AttrDef::_internal_set_has_minimum(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.has_minimum_ = value;
}

// int64 minimum = 6;
inline void OpDef_AttrDef::clear_minimum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minimum_ = ::int64_t{0};
}
inline ::int64_t OpDef_AttrDef::minimum() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.minimum)
  return _internal_minimum();
}
inline void OpDef_AttrDef::set_minimum(::int64_t value) {
  _internal_set_minimum(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.AttrDef.minimum)
}
inline ::int64_t OpDef_AttrDef::_internal_minimum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minimum_;
}
inline void OpDef_AttrDef::_internal_set_minimum(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minimum_ = value;
}

// .opencv_tensorflow.AttrValue allowed_values = 7;
inline bool OpDef_AttrDef::has_allowed_values() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowed_values_ != nullptr);
  return value;
}
inline const ::opencv_tensorflow::AttrValue& OpDef_AttrDef::_internal_allowed_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_tensorflow::AttrValue* p = _impl_.allowed_values_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_tensorflow::AttrValue&>(::opencv_tensorflow::_AttrValue_default_instance_);
}
inline const ::opencv_tensorflow::AttrValue& OpDef_AttrDef::allowed_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.AttrDef.allowed_values)
  return _internal_allowed_values();
}
inline void OpDef_AttrDef::unsafe_arena_set_allocated_allowed_values(::opencv_tensorflow::AttrValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowed_values_);
  }
  _impl_.allowed_values_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.OpDef.AttrDef.allowed_values)
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::release_allowed_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_tensorflow::AttrValue* released = _impl_.allowed_values_;
  _impl_.allowed_values_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::unsafe_arena_release_allowed_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.AttrDef.allowed_values)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_tensorflow::AttrValue* temp = _impl_.allowed_values_;
  _impl_.allowed_values_ = nullptr;
  return temp;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::_internal_mutable_allowed_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.allowed_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_tensorflow::AttrValue>(GetArena());
    _impl_.allowed_values_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(p);
  }
  return _impl_.allowed_values_;
}
inline ::opencv_tensorflow::AttrValue* OpDef_AttrDef::mutable_allowed_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::AttrValue* _msg = _internal_mutable_allowed_values();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.AttrDef.allowed_values)
  return _msg;
}
inline void OpDef_AttrDef::set_allocated_allowed_values(::opencv_tensorflow::AttrValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.allowed_values_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.allowed_values_ = reinterpret_cast<::opencv_tensorflow::AttrValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.AttrDef.allowed_values)
}

// -------------------------------------------------------------------

// OpDef

// string name = 1;
inline void OpDef::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& OpDef::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.name)
}
inline std::string* OpDef::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.name)
  return _s;
}
inline const std::string& OpDef::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void OpDef::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* OpDef::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* OpDef::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.name)
  return _impl_.name_.Release();
}
inline void OpDef::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.name)
}

// repeated .opencv_tensorflow.OpDef.ArgDef input_arg = 2;
inline int OpDef::_internal_input_arg_size() const {
  return _internal_input_arg().size();
}
inline int OpDef::input_arg_size() const {
  return _internal_input_arg_size();
}
inline void OpDef::clear_input_arg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_arg_.Clear();
}
inline ::opencv_tensorflow::OpDef_ArgDef* OpDef::mutable_input_arg(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.input_arg)
  return _internal_mutable_input_arg()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>* OpDef::mutable_input_arg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.OpDef.input_arg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_input_arg();
}
inline const ::opencv_tensorflow::OpDef_ArgDef& OpDef::input_arg(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.input_arg)
  return _internal_input_arg().Get(index);
}
inline ::opencv_tensorflow::OpDef_ArgDef* OpDef::add_input_arg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::OpDef_ArgDef* _add = _internal_mutable_input_arg()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.OpDef.input_arg)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>& OpDef::input_arg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.OpDef.input_arg)
  return _internal_input_arg();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>&
OpDef::_internal_input_arg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_arg_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>*
OpDef::_internal_mutable_input_arg() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.input_arg_;
}

// repeated .opencv_tensorflow.OpDef.ArgDef output_arg = 3;
inline int OpDef::_internal_output_arg_size() const {
  return _internal_output_arg().size();
}
inline int OpDef::output_arg_size() const {
  return _internal_output_arg_size();
}
inline void OpDef::clear_output_arg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_arg_.Clear();
}
inline ::opencv_tensorflow::OpDef_ArgDef* OpDef::mutable_output_arg(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.output_arg)
  return _internal_mutable_output_arg()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>* OpDef::mutable_output_arg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.OpDef.output_arg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_output_arg();
}
inline const ::opencv_tensorflow::OpDef_ArgDef& OpDef::output_arg(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.output_arg)
  return _internal_output_arg().Get(index);
}
inline ::opencv_tensorflow::OpDef_ArgDef* OpDef::add_output_arg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::OpDef_ArgDef* _add = _internal_mutable_output_arg()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.OpDef.output_arg)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>& OpDef::output_arg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.OpDef.output_arg)
  return _internal_output_arg();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>&
OpDef::_internal_output_arg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_arg_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_ArgDef>*
OpDef::_internal_mutable_output_arg() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.output_arg_;
}

// repeated .opencv_tensorflow.OpDef.AttrDef attr = 4;
inline int OpDef::_internal_attr_size() const {
  return _internal_attr().size();
}
inline int OpDef::attr_size() const {
  return _internal_attr_size();
}
inline void OpDef::clear_attr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attr_.Clear();
}
inline ::opencv_tensorflow::OpDef_AttrDef* OpDef::mutable_attr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.attr)
  return _internal_mutable_attr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>* OpDef::mutable_attr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.OpDef.attr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_attr();
}
inline const ::opencv_tensorflow::OpDef_AttrDef& OpDef::attr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.attr)
  return _internal_attr().Get(index);
}
inline ::opencv_tensorflow::OpDef_AttrDef* OpDef::add_attr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::OpDef_AttrDef* _add = _internal_mutable_attr()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.OpDef.attr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>& OpDef::attr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.OpDef.attr)
  return _internal_attr();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>&
OpDef::_internal_attr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attr_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef_AttrDef>*
OpDef::_internal_mutable_attr() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.attr_;
}

// .opencv_tensorflow.OpDeprecation deprecation = 8;
inline bool OpDef::has_deprecation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deprecation_ != nullptr);
  return value;
}
inline void OpDef::clear_deprecation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.deprecation_ != nullptr) _impl_.deprecation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_tensorflow::OpDeprecation& OpDef::_internal_deprecation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_tensorflow::OpDeprecation* p = _impl_.deprecation_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_tensorflow::OpDeprecation&>(::opencv_tensorflow::_OpDeprecation_default_instance_);
}
inline const ::opencv_tensorflow::OpDeprecation& OpDef::deprecation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.deprecation)
  return _internal_deprecation();
}
inline void OpDef::unsafe_arena_set_allocated_deprecation(::opencv_tensorflow::OpDeprecation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deprecation_);
  }
  _impl_.deprecation_ = reinterpret_cast<::opencv_tensorflow::OpDeprecation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.OpDef.deprecation)
}
inline ::opencv_tensorflow::OpDeprecation* OpDef::release_deprecation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::OpDeprecation* released = _impl_.deprecation_;
  _impl_.deprecation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_tensorflow::OpDeprecation* OpDef::unsafe_arena_release_deprecation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.deprecation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::OpDeprecation* temp = _impl_.deprecation_;
  _impl_.deprecation_ = nullptr;
  return temp;
}
inline ::opencv_tensorflow::OpDeprecation* OpDef::_internal_mutable_deprecation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.deprecation_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_tensorflow::OpDeprecation>(GetArena());
    _impl_.deprecation_ = reinterpret_cast<::opencv_tensorflow::OpDeprecation*>(p);
  }
  return _impl_.deprecation_;
}
inline ::opencv_tensorflow::OpDeprecation* OpDef::mutable_deprecation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::OpDeprecation* _msg = _internal_mutable_deprecation();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.deprecation)
  return _msg;
}
inline void OpDef::set_allocated_deprecation(::opencv_tensorflow::OpDeprecation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_tensorflow::OpDeprecation*>(_impl_.deprecation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_tensorflow::OpDeprecation*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.deprecation_ = reinterpret_cast<::opencv_tensorflow::OpDeprecation*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.deprecation)
}

// string summary = 5;
inline void OpDef::clear_summary() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& OpDef::summary() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef::set_summary(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.summary)
}
inline std::string* OpDef::mutable_summary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.summary)
  return _s;
}
inline const std::string& OpDef::_internal_summary() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.summary_.Get();
}
inline void OpDef::_internal_set_summary(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.summary_.Set(value, GetArena());
}
inline std::string* OpDef::_internal_mutable_summary() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.summary_.Mutable( GetArena());
}
inline std::string* OpDef::release_summary() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.summary)
  return _impl_.summary_.Release();
}
inline void OpDef::set_allocated_summary(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.summary_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.summary_.IsDefault()) {
          _impl_.summary_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.summary)
}

// string description = 6;
inline void OpDef::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& OpDef::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDef::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.description)
}
inline std::string* OpDef::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDef.description)
  return _s;
}
inline const std::string& OpDef::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void OpDef::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* OpDef::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* OpDef::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDef.description)
  return _impl_.description_.Release();
}
inline void OpDef::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDef.description)
}

// bool is_commutative = 18;
inline void OpDef::clear_is_commutative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_commutative_ = false;
}
inline bool OpDef::is_commutative() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.is_commutative)
  return _internal_is_commutative();
}
inline void OpDef::set_is_commutative(bool value) {
  _internal_set_is_commutative(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.is_commutative)
}
inline bool OpDef::_internal_is_commutative() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_commutative_;
}
inline void OpDef::_internal_set_is_commutative(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_commutative_ = value;
}

// bool is_aggregate = 16;
inline void OpDef::clear_is_aggregate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_aggregate_ = false;
}
inline bool OpDef::is_aggregate() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.is_aggregate)
  return _internal_is_aggregate();
}
inline void OpDef::set_is_aggregate(bool value) {
  _internal_set_is_aggregate(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.is_aggregate)
}
inline bool OpDef::_internal_is_aggregate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_aggregate_;
}
inline void OpDef::_internal_set_is_aggregate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_aggregate_ = value;
}

// bool is_stateful = 17;
inline void OpDef::clear_is_stateful() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_stateful_ = false;
}
inline bool OpDef::is_stateful() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.is_stateful)
  return _internal_is_stateful();
}
inline void OpDef::set_is_stateful(bool value) {
  _internal_set_is_stateful(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.is_stateful)
}
inline bool OpDef::_internal_is_stateful() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_stateful_;
}
inline void OpDef::_internal_set_is_stateful(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_stateful_ = value;
}

// bool allows_uninitialized_input = 19;
inline void OpDef::clear_allows_uninitialized_input() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allows_uninitialized_input_ = false;
}
inline bool OpDef::allows_uninitialized_input() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDef.allows_uninitialized_input)
  return _internal_allows_uninitialized_input();
}
inline void OpDef::set_allows_uninitialized_input(bool value) {
  _internal_set_allows_uninitialized_input(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDef.allows_uninitialized_input)
}
inline bool OpDef::_internal_allows_uninitialized_input() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allows_uninitialized_input_;
}
inline void OpDef::_internal_set_allows_uninitialized_input(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.allows_uninitialized_input_ = value;
}

// -------------------------------------------------------------------

// OpDeprecation

// int32 version = 1;
inline void OpDeprecation::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_ = 0;
}
inline ::int32_t OpDeprecation::version() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDeprecation.version)
  return _internal_version();
}
inline void OpDeprecation::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDeprecation.version)
}
inline ::int32_t OpDeprecation::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_;
}
inline void OpDeprecation::_internal_set_version(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_ = value;
}

// string explanation = 2;
inline void OpDeprecation::clear_explanation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explanation_.ClearToEmpty();
}
inline const std::string& OpDeprecation::explanation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpDeprecation.explanation)
  return _internal_explanation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OpDeprecation::set_explanation(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.explanation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.OpDeprecation.explanation)
}
inline std::string* OpDeprecation::mutable_explanation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_explanation();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpDeprecation.explanation)
  return _s;
}
inline const std::string& OpDeprecation::_internal_explanation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.explanation_.Get();
}
inline void OpDeprecation::_internal_set_explanation(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.explanation_.Set(value, GetArena());
}
inline std::string* OpDeprecation::_internal_mutable_explanation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.explanation_.Mutable( GetArena());
}
inline std::string* OpDeprecation::release_explanation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.OpDeprecation.explanation)
  return _impl_.explanation_.Release();
}
inline void OpDeprecation::set_allocated_explanation(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.explanation_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.explanation_.IsDefault()) {
          _impl_.explanation_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.OpDeprecation.explanation)
}

// -------------------------------------------------------------------

// OpList

// repeated .opencv_tensorflow.OpDef op = 1;
inline int OpList::_internal_op_size() const {
  return _internal_op().size();
}
inline int OpList::op_size() const {
  return _internal_op_size();
}
inline void OpList::clear_op() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.op_.Clear();
}
inline ::opencv_tensorflow::OpDef* OpList::mutable_op(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.OpList.op)
  return _internal_mutable_op()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>* OpList::mutable_op()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.OpList.op)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_op();
}
inline const ::opencv_tensorflow::OpDef& OpList::op(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.OpList.op)
  return _internal_op().Get(index);
}
inline ::opencv_tensorflow::OpDef* OpList::add_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_tensorflow::OpDef* _add = _internal_mutable_op()->Add();
  // @@protoc_insertion_point(field_add:opencv_tensorflow.OpList.op)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>& OpList::op() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.OpList.op)
  return _internal_op();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>&
OpList::_internal_op() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.op_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_tensorflow::OpDef>*
OpList::_internal_mutable_op() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.op_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_op_5fdef_2eproto_2epb_2eh
