// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensor.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tensor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tensor_shape.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tensor_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tensor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tensor_2eproto;
namespace opencv_tensorflow {
class TensorProto;
struct TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
}  // namespace opencv_tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opencv_tensorflow {

// ===================================================================


// -------------------------------------------------------------------

class TensorProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_tensorflow.TensorProto) */ {
 public:
  inline TensorProto() : TensorProto(nullptr) {}
  ~TensorProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TensorProto(::google::protobuf::internal::ConstantInitialized);

  inline TensorProto(const TensorProto& from)
      : TensorProto(nullptr, from) {}
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TensorProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TensorProto& from) {
    TensorProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TensorProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_tensorflow.TensorProto";
  }
  protected:
  explicit TensorProto(::google::protobuf::Arena* arena);
  TensorProto(::google::protobuf::Arena* arena, const TensorProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 5,
    kDoubleValFieldNumber = 6,
    kIntValFieldNumber = 7,
    kStringValFieldNumber = 8,
    kScomplexValFieldNumber = 9,
    kInt64ValFieldNumber = 10,
    kBoolValFieldNumber = 11,
    kDcomplexValFieldNumber = 12,
    kHalfValFieldNumber = 13,
    kTensorContentFieldNumber = 4,
    kTensorShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
    kVersionNumberFieldNumber = 3,
  };
  // repeated float float_val = 5 [packed = true];
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;

  public:
  void clear_float_val() ;
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::google::protobuf::RepeatedField<float>& float_val() const;
  ::google::protobuf::RepeatedField<float>* mutable_float_val();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_float_val() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_float_val();

  public:
  // repeated double double_val = 6 [packed = true];
  int double_val_size() const;
  private:
  int _internal_double_val_size() const;

  public:
  void clear_double_val() ;
  double double_val(int index) const;
  void set_double_val(int index, double value);
  void add_double_val(double value);
  const ::google::protobuf::RepeatedField<double>& double_val() const;
  ::google::protobuf::RepeatedField<double>* mutable_double_val();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_double_val() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_double_val();

  public:
  // repeated int32 int_val = 7 [packed = true];
  int int_val_size() const;
  private:
  int _internal_int_val_size() const;

  public:
  void clear_int_val() ;
  ::int32_t int_val(int index) const;
  void set_int_val(int index, ::int32_t value);
  void add_int_val(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& int_val() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_int_val();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int_val() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int_val();

  public:
  // repeated bytes string_val = 8;
  int string_val_size() const;
  private:
  int _internal_string_val_size() const;

  public:
  void clear_string_val() ;
  const std::string& string_val(int index) const;
  std::string* mutable_string_val(int index);
  void set_string_val(int index, const std::string& value);
  void set_string_val(int index, std::string&& value);
  void set_string_val(int index, const char* value);
  void set_string_val(int index, const void* value, std::size_t size);
  void set_string_val(int index, absl::string_view value);
  std::string* add_string_val();
  void add_string_val(const std::string& value);
  void add_string_val(std::string&& value);
  void add_string_val(const char* value);
  void add_string_val(const void* value, std::size_t size);
  void add_string_val(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& string_val() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_string_val();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_string_val() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_string_val();

  public:
  // repeated float scomplex_val = 9 [packed = true];
  int scomplex_val_size() const;
  private:
  int _internal_scomplex_val_size() const;

  public:
  void clear_scomplex_val() ;
  float scomplex_val(int index) const;
  void set_scomplex_val(int index, float value);
  void add_scomplex_val(float value);
  const ::google::protobuf::RepeatedField<float>& scomplex_val() const;
  ::google::protobuf::RepeatedField<float>* mutable_scomplex_val();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_scomplex_val() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_scomplex_val();

  public:
  // repeated int64 int64_val = 10 [packed = true];
  int int64_val_size() const;
  private:
  int _internal_int64_val_size() const;

  public:
  void clear_int64_val() ;
  ::int64_t int64_val(int index) const;
  void set_int64_val(int index, ::int64_t value);
  void add_int64_val(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& int64_val() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_int64_val();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_int64_val() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_int64_val();

  public:
  // repeated bool bool_val = 11 [packed = true];
  int bool_val_size() const;
  private:
  int _internal_bool_val_size() const;

  public:
  void clear_bool_val() ;
  bool bool_val(int index) const;
  void set_bool_val(int index, bool value);
  void add_bool_val(bool value);
  const ::google::protobuf::RepeatedField<bool>& bool_val() const;
  ::google::protobuf::RepeatedField<bool>* mutable_bool_val();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_bool_val() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_bool_val();

  public:
  // repeated double dcomplex_val = 12 [packed = true];
  int dcomplex_val_size() const;
  private:
  int _internal_dcomplex_val_size() const;

  public:
  void clear_dcomplex_val() ;
  double dcomplex_val(int index) const;
  void set_dcomplex_val(int index, double value);
  void add_dcomplex_val(double value);
  const ::google::protobuf::RepeatedField<double>& dcomplex_val() const;
  ::google::protobuf::RepeatedField<double>* mutable_dcomplex_val();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_dcomplex_val() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_dcomplex_val();

  public:
  // repeated int32 half_val = 13 [packed = true];
  int half_val_size() const;
  private:
  int _internal_half_val_size() const;

  public:
  void clear_half_val() ;
  ::int32_t half_val(int index) const;
  void set_half_val(int index, ::int32_t value);
  void add_half_val(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& half_val() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_half_val();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_half_val() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_half_val();

  public:
  // bytes tensor_content = 4;
  void clear_tensor_content() ;
  const std::string& tensor_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tensor_content(Arg_&& arg, Args_... args);
  std::string* mutable_tensor_content();
  PROTOBUF_NODISCARD std::string* release_tensor_content();
  void set_allocated_tensor_content(std::string* value);

  private:
  const std::string& _internal_tensor_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tensor_content(
      const std::string& value);
  std::string* _internal_mutable_tensor_content();

  public:
  // .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
  bool has_tensor_shape() const;
  void clear_tensor_shape() ;
  const ::opencv_tensorflow::TensorShapeProto& tensor_shape() const;
  PROTOBUF_NODISCARD ::opencv_tensorflow::TensorShapeProto* release_tensor_shape();
  ::opencv_tensorflow::TensorShapeProto* mutable_tensor_shape();
  void set_allocated_tensor_shape(::opencv_tensorflow::TensorShapeProto* value);
  void unsafe_arena_set_allocated_tensor_shape(::opencv_tensorflow::TensorShapeProto* value);
  ::opencv_tensorflow::TensorShapeProto* unsafe_arena_release_tensor_shape();

  private:
  const ::opencv_tensorflow::TensorShapeProto& _internal_tensor_shape() const;
  ::opencv_tensorflow::TensorShapeProto* _internal_mutable_tensor_shape();

  public:
  // .opencv_tensorflow.DataType dtype = 1;
  void clear_dtype() ;
  ::opencv_tensorflow::DataType dtype() const;
  void set_dtype(::opencv_tensorflow::DataType value);

  private:
  ::opencv_tensorflow::DataType _internal_dtype() const;
  void _internal_set_dtype(::opencv_tensorflow::DataType value);

  public:
  // int32 version_number = 3;
  void clear_version_number() ;
  ::int32_t version_number() const;
  void set_version_number(::int32_t value);

  private:
  ::int32_t _internal_version_number() const;
  void _internal_set_version_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_tensorflow.TensorProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> float_val_;
    ::google::protobuf::RepeatedField<double> double_val_;
    ::google::protobuf::RepeatedField<::int32_t> int_val_;
    mutable ::google::protobuf::internal::CachedSize _int_val_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> string_val_;
    ::google::protobuf::RepeatedField<float> scomplex_val_;
    ::google::protobuf::RepeatedField<::int64_t> int64_val_;
    mutable ::google::protobuf::internal::CachedSize _int64_val_cached_byte_size_;
    ::google::protobuf::RepeatedField<bool> bool_val_;
    ::google::protobuf::RepeatedField<double> dcomplex_val_;
    ::google::protobuf::RepeatedField<::int32_t> half_val_;
    mutable ::google::protobuf::internal::CachedSize _half_val_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr tensor_content_;
    ::opencv_tensorflow::TensorShapeProto* tensor_shape_;
    int dtype_;
    ::int32_t version_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TensorProto

// .opencv_tensorflow.DataType dtype = 1;
inline void TensorProto::clear_dtype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dtype_ = 0;
}
inline ::opencv_tensorflow::DataType TensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.dtype)
  return _internal_dtype();
}
inline void TensorProto::set_dtype(::opencv_tensorflow::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.dtype)
}
inline ::opencv_tensorflow::DataType TensorProto::_internal_dtype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_tensorflow::DataType>(_impl_.dtype_);
}
inline void TensorProto::_internal_set_dtype(::opencv_tensorflow::DataType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dtype_ = value;
}

// .opencv_tensorflow.TensorShapeProto tensor_shape = 2;
inline bool TensorProto::has_tensor_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tensor_shape_ != nullptr);
  return value;
}
inline const ::opencv_tensorflow::TensorShapeProto& TensorProto::_internal_tensor_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_tensorflow::TensorShapeProto* p = _impl_.tensor_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_tensorflow::TensorShapeProto&>(::opencv_tensorflow::_TensorShapeProto_default_instance_);
}
inline const ::opencv_tensorflow::TensorShapeProto& TensorProto::tensor_shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.tensor_shape)
  return _internal_tensor_shape();
}
inline void TensorProto::unsafe_arena_set_allocated_tensor_shape(::opencv_tensorflow::TensorShapeProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_shape_);
  }
  _impl_.tensor_shape_ = reinterpret_cast<::opencv_tensorflow::TensorShapeProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_tensorflow.TensorProto.tensor_shape)
}
inline ::opencv_tensorflow::TensorShapeProto* TensorProto::release_tensor_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::TensorShapeProto* released = _impl_.tensor_shape_;
  _impl_.tensor_shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_tensorflow::TensorShapeProto* TensorProto::unsafe_arena_release_tensor_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.TensorProto.tensor_shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_tensorflow::TensorShapeProto* temp = _impl_.tensor_shape_;
  _impl_.tensor_shape_ = nullptr;
  return temp;
}
inline ::opencv_tensorflow::TensorShapeProto* TensorProto::_internal_mutable_tensor_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tensor_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_tensorflow::TensorShapeProto>(GetArena());
    _impl_.tensor_shape_ = reinterpret_cast<::opencv_tensorflow::TensorShapeProto*>(p);
  }
  return _impl_.tensor_shape_;
}
inline ::opencv_tensorflow::TensorShapeProto* TensorProto::mutable_tensor_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_tensorflow::TensorShapeProto* _msg = _internal_mutable_tensor_shape();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.TensorProto.tensor_shape)
  return _msg;
}
inline void TensorProto::set_allocated_tensor_shape(::opencv_tensorflow::TensorShapeProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tensor_shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.tensor_shape_ = reinterpret_cast<::opencv_tensorflow::TensorShapeProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.TensorProto.tensor_shape)
}

// int32 version_number = 3;
inline void TensorProto::clear_version_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_number_ = 0;
}
inline ::int32_t TensorProto::version_number() const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.version_number)
  return _internal_version_number();
}
inline void TensorProto::set_version_number(::int32_t value) {
  _internal_set_version_number(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.version_number)
}
inline ::int32_t TensorProto::_internal_version_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_number_;
}
inline void TensorProto::_internal_set_version_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_number_ = value;
}

// bytes tensor_content = 4;
inline void TensorProto::clear_tensor_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tensor_content_.ClearToEmpty();
}
inline const std::string& TensorProto::tensor_content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.tensor_content)
  return _internal_tensor_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TensorProto::set_tensor_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tensor_content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.tensor_content)
}
inline std::string* TensorProto::mutable_tensor_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tensor_content();
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.TensorProto.tensor_content)
  return _s;
}
inline const std::string& TensorProto::_internal_tensor_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tensor_content_.Get();
}
inline void TensorProto::_internal_set_tensor_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tensor_content_.Set(value, GetArena());
}
inline std::string* TensorProto::_internal_mutable_tensor_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tensor_content_.Mutable( GetArena());
}
inline std::string* TensorProto::release_tensor_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_tensorflow.TensorProto.tensor_content)
  return _impl_.tensor_content_.Release();
}
inline void TensorProto::set_allocated_tensor_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tensor_content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tensor_content_.IsDefault()) {
          _impl_.tensor_content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_tensorflow.TensorProto.tensor_content)
}

// repeated int32 half_val = 13 [packed = true];
inline int TensorProto::_internal_half_val_size() const {
  return _internal_half_val().size();
}
inline int TensorProto::half_val_size() const {
  return _internal_half_val_size();
}
inline void TensorProto::clear_half_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.half_val_.Clear();
}
inline ::int32_t TensorProto::half_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.half_val)
  return _internal_half_val().Get(index);
}
inline void TensorProto::set_half_val(int index, ::int32_t value) {
  _internal_mutable_half_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.half_val)
}
inline void TensorProto::add_half_val(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_half_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.half_val)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TensorProto::half_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.half_val)
  return _internal_half_val();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TensorProto::mutable_half_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.half_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_half_val();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TensorProto::_internal_half_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.half_val_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TensorProto::_internal_mutable_half_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.half_val_;
}

// repeated float float_val = 5 [packed = true];
inline int TensorProto::_internal_float_val_size() const {
  return _internal_float_val().size();
}
inline int TensorProto::float_val_size() const {
  return _internal_float_val_size();
}
inline void TensorProto::clear_float_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_val_.Clear();
}
inline float TensorProto::float_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.float_val)
  return _internal_float_val().Get(index);
}
inline void TensorProto::set_float_val(int index, float value) {
  _internal_mutable_float_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.float_val)
}
inline void TensorProto::add_float_val(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_float_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.float_val)
}
inline const ::google::protobuf::RepeatedField<float>& TensorProto::float_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.float_val)
  return _internal_float_val();
}
inline ::google::protobuf::RepeatedField<float>* TensorProto::mutable_float_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.float_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_float_val();
}
inline const ::google::protobuf::RepeatedField<float>& TensorProto::_internal_float_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_val_;
}
inline ::google::protobuf::RepeatedField<float>* TensorProto::_internal_mutable_float_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.float_val_;
}

// repeated double double_val = 6 [packed = true];
inline int TensorProto::_internal_double_val_size() const {
  return _internal_double_val().size();
}
inline int TensorProto::double_val_size() const {
  return _internal_double_val_size();
}
inline void TensorProto::clear_double_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.double_val_.Clear();
}
inline double TensorProto::double_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.double_val)
  return _internal_double_val().Get(index);
}
inline void TensorProto::set_double_val(int index, double value) {
  _internal_mutable_double_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.double_val)
}
inline void TensorProto::add_double_val(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_double_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.double_val)
}
inline const ::google::protobuf::RepeatedField<double>& TensorProto::double_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.double_val)
  return _internal_double_val();
}
inline ::google::protobuf::RepeatedField<double>* TensorProto::mutable_double_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.double_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_double_val();
}
inline const ::google::protobuf::RepeatedField<double>& TensorProto::_internal_double_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.double_val_;
}
inline ::google::protobuf::RepeatedField<double>* TensorProto::_internal_mutable_double_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.double_val_;
}

// repeated int32 int_val = 7 [packed = true];
inline int TensorProto::_internal_int_val_size() const {
  return _internal_int_val().size();
}
inline int TensorProto::int_val_size() const {
  return _internal_int_val_size();
}
inline void TensorProto::clear_int_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_val_.Clear();
}
inline ::int32_t TensorProto::int_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.int_val)
  return _internal_int_val().Get(index);
}
inline void TensorProto::set_int_val(int index, ::int32_t value) {
  _internal_mutable_int_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.int_val)
}
inline void TensorProto::add_int_val(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_int_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.int_val)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TensorProto::int_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.int_val)
  return _internal_int_val();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TensorProto::mutable_int_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.int_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_int_val();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TensorProto::_internal_int_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_val_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TensorProto::_internal_mutable_int_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.int_val_;
}

// repeated bytes string_val = 8;
inline int TensorProto::_internal_string_val_size() const {
  return _internal_string_val().size();
}
inline int TensorProto::string_val_size() const {
  return _internal_string_val_size();
}
inline void TensorProto::clear_string_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_val_.Clear();
}
inline std::string* TensorProto::add_string_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_string_val()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_tensorflow.TensorProto.string_val)
  return _s;
}
inline const std::string& TensorProto::string_val(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.string_val)
  return _internal_string_val().Get(index);
}
inline std::string* TensorProto::mutable_string_val(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_tensorflow.TensorProto.string_val)
  return _internal_mutable_string_val()->Mutable(index);
}
inline void TensorProto::set_string_val(int index, const std::string& value) {
  _internal_mutable_string_val()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, std::string&& value) {
  _internal_mutable_string_val()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_string_val()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_string_val()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, absl::string_view value) {
  _internal_mutable_string_val()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_val()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::add_string_val(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_val()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_val()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const void* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_val()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_tensorflow.TensorProto.string_val)
}
inline void TensorProto::add_string_val(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_string_val()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_tensorflow.TensorProto.string_val)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TensorProto::string_val() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.string_val)
  return _internal_string_val();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TensorProto::mutable_string_val() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.string_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_string_val();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TensorProto::_internal_string_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_val_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TensorProto::_internal_mutable_string_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.string_val_;
}

// repeated float scomplex_val = 9 [packed = true];
inline int TensorProto::_internal_scomplex_val_size() const {
  return _internal_scomplex_val().size();
}
inline int TensorProto::scomplex_val_size() const {
  return _internal_scomplex_val_size();
}
inline void TensorProto::clear_scomplex_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scomplex_val_.Clear();
}
inline float TensorProto::scomplex_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.scomplex_val)
  return _internal_scomplex_val().Get(index);
}
inline void TensorProto::set_scomplex_val(int index, float value) {
  _internal_mutable_scomplex_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.scomplex_val)
}
inline void TensorProto::add_scomplex_val(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scomplex_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.scomplex_val)
}
inline const ::google::protobuf::RepeatedField<float>& TensorProto::scomplex_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.scomplex_val)
  return _internal_scomplex_val();
}
inline ::google::protobuf::RepeatedField<float>* TensorProto::mutable_scomplex_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.scomplex_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scomplex_val();
}
inline const ::google::protobuf::RepeatedField<float>& TensorProto::_internal_scomplex_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scomplex_val_;
}
inline ::google::protobuf::RepeatedField<float>* TensorProto::_internal_mutable_scomplex_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scomplex_val_;
}

// repeated int64 int64_val = 10 [packed = true];
inline int TensorProto::_internal_int64_val_size() const {
  return _internal_int64_val().size();
}
inline int TensorProto::int64_val_size() const {
  return _internal_int64_val_size();
}
inline void TensorProto::clear_int64_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int64_val_.Clear();
}
inline ::int64_t TensorProto::int64_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.int64_val)
  return _internal_int64_val().Get(index);
}
inline void TensorProto::set_int64_val(int index, ::int64_t value) {
  _internal_mutable_int64_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.int64_val)
}
inline void TensorProto::add_int64_val(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_int64_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.int64_val)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TensorProto::int64_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.int64_val)
  return _internal_int64_val();
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorProto::mutable_int64_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.int64_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_int64_val();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TensorProto::_internal_int64_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int64_val_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* TensorProto::_internal_mutable_int64_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.int64_val_;
}

// repeated bool bool_val = 11 [packed = true];
inline int TensorProto::_internal_bool_val_size() const {
  return _internal_bool_val().size();
}
inline int TensorProto::bool_val_size() const {
  return _internal_bool_val_size();
}
inline void TensorProto::clear_bool_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bool_val_.Clear();
}
inline bool TensorProto::bool_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.bool_val)
  return _internal_bool_val().Get(index);
}
inline void TensorProto::set_bool_val(int index, bool value) {
  _internal_mutable_bool_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.bool_val)
}
inline void TensorProto::add_bool_val(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bool_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.bool_val)
}
inline const ::google::protobuf::RepeatedField<bool>& TensorProto::bool_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.bool_val)
  return _internal_bool_val();
}
inline ::google::protobuf::RepeatedField<bool>* TensorProto::mutable_bool_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.bool_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bool_val();
}
inline const ::google::protobuf::RepeatedField<bool>& TensorProto::_internal_bool_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bool_val_;
}
inline ::google::protobuf::RepeatedField<bool>* TensorProto::_internal_mutable_bool_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bool_val_;
}

// repeated double dcomplex_val = 12 [packed = true];
inline int TensorProto::_internal_dcomplex_val_size() const {
  return _internal_dcomplex_val().size();
}
inline int TensorProto::dcomplex_val_size() const {
  return _internal_dcomplex_val_size();
}
inline void TensorProto::clear_dcomplex_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dcomplex_val_.Clear();
}
inline double TensorProto::dcomplex_val(int index) const {
  // @@protoc_insertion_point(field_get:opencv_tensorflow.TensorProto.dcomplex_val)
  return _internal_dcomplex_val().Get(index);
}
inline void TensorProto::set_dcomplex_val(int index, double value) {
  _internal_mutable_dcomplex_val()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_tensorflow.TensorProto.dcomplex_val)
}
inline void TensorProto::add_dcomplex_val(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dcomplex_val()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_tensorflow.TensorProto.dcomplex_val)
}
inline const ::google::protobuf::RepeatedField<double>& TensorProto::dcomplex_val() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_tensorflow.TensorProto.dcomplex_val)
  return _internal_dcomplex_val();
}
inline ::google::protobuf::RepeatedField<double>* TensorProto::mutable_dcomplex_val()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_tensorflow.TensorProto.dcomplex_val)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dcomplex_val();
}
inline const ::google::protobuf::RepeatedField<double>& TensorProto::_internal_dcomplex_val()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dcomplex_val_;
}
inline ::google::protobuf::RepeatedField<double>* TensorProto::_internal_mutable_dcomplex_val() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dcomplex_val_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tensor_2eproto_2epb_2eh
