// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: versions.proto

#include "versions.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opencv_tensorflow {

inline constexpr VersionDef::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bad_consumers_{},
        _bad_consumers_cached_byte_size_{0},
        producer_{0},
        min_consumer_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VersionDef::VersionDef(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VersionDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefDefaultTypeInternal() {}
  union {
    VersionDef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefDefaultTypeInternal _VersionDef_default_instance_;
}  // namespace opencv_tensorflow
static ::_pb::Metadata file_level_metadata_versions_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_versions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_versions_2eproto = nullptr;
const ::uint32_t TableStruct_versions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.producer_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.min_consumer_),
    PROTOBUF_FIELD_OFFSET(::opencv_tensorflow::VersionDef, _impl_.bad_consumers_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::opencv_tensorflow::VersionDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::opencv_tensorflow::_VersionDef_default_instance_._instance,
};
const char descriptor_table_protodef_versions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016versions.proto\022\021opencv_tensorflow\"K\n\nV"
    "ersionDef\022\020\n\010producer\030\001 \001(\005\022\024\n\014min_consu"
    "mer\030\002 \001(\005\022\025\n\rbad_consumers\030\003 \003(\005B/\n\030org."
    "tensorflow.frameworkB\016VersionsProtosP\001\370\001"
    "\001b\006proto3"
};
static ::absl::once_flag descriptor_table_versions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_versions_2eproto = {
    false,
    false,
    169,
    descriptor_table_protodef_versions_2eproto,
    "versions.proto",
    &descriptor_table_versions_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_versions_2eproto::offsets,
    file_level_metadata_versions_2eproto,
    file_level_enum_descriptors_versions_2eproto,
    file_level_service_descriptors_versions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_versions_2eproto_getter() {
  return &descriptor_table_versions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_versions_2eproto(&descriptor_table_versions_2eproto);
namespace opencv_tensorflow {
// ===================================================================

class VersionDef::_Internal {
 public:
};

VersionDef::VersionDef(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv_tensorflow.VersionDef)
}
inline PROTOBUF_NDEBUG_INLINE VersionDef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : bad_consumers_{visibility, arena, from.bad_consumers_},
        _bad_consumers_cached_byte_size_{0},
        _cached_size_{0} {}

VersionDef::VersionDef(
    ::google::protobuf::Arena* arena,
    const VersionDef& from)
    : ::google::protobuf::Message(arena) {
  VersionDef* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, producer_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, producer_),
           offsetof(Impl_, min_consumer_) -
               offsetof(Impl_, producer_) +
               sizeof(Impl_::min_consumer_));

  // @@protoc_insertion_point(copy_constructor:opencv_tensorflow.VersionDef)
}
inline PROTOBUF_NDEBUG_INLINE VersionDef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bad_consumers_{visibility, arena},
        _bad_consumers_cached_byte_size_{0},
        _cached_size_{0} {}

inline void VersionDef::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, producer_),
           0,
           offsetof(Impl_, min_consumer_) -
               offsetof(Impl_, producer_) +
               sizeof(Impl_::min_consumer_));
}
VersionDef::~VersionDef() {
  // @@protoc_insertion_point(destructor:opencv_tensorflow.VersionDef)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VersionDef::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VersionDef::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv_tensorflow.VersionDef)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bad_consumers_.Clear();
  ::memset(&_impl_.producer_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_consumer_) -
      reinterpret_cast<char*>(&_impl_.producer_)) + sizeof(_impl_.min_consumer_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VersionDef::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> VersionDef::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VersionDef_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 producer = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VersionDef, _impl_.producer_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.producer_)}},
    // int32 min_consumer = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VersionDef, _impl_.min_consumer_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.min_consumer_)}},
    // repeated int32 bad_consumers = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.bad_consumers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 producer = 1;
    {PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.producer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_consumer = 2;
    {PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.min_consumer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated int32 bad_consumers = 3;
    {PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.bad_consumers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* VersionDef::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv_tensorflow.VersionDef)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_producer(), target);
  }

  // int32 min_consumer = 2;
  if (this->_internal_min_consumer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_min_consumer(), target);
  }

  // repeated int32 bad_consumers = 3;
  {
    int byte_size = _impl_._bad_consumers_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_bad_consumers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv_tensorflow.VersionDef)
  return target;
}

::size_t VersionDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv_tensorflow.VersionDef)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bad_consumers = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_bad_consumers())
    ;
    _impl_._bad_consumers_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // int32 producer = 1;
  if (this->_internal_producer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_producer());
  }

  // int32 min_consumer = 2;
  if (this->_internal_min_consumer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_consumer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VersionDef::_class_data_ = {
    VersionDef::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VersionDef::GetClassData() const {
  return &_class_data_;
}

void VersionDef::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VersionDef*>(&to_msg);
  auto& from = static_cast<const VersionDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv_tensorflow.VersionDef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bad_consumers()->MergeFrom(from._internal_bad_consumers());
  if (from._internal_producer() != 0) {
    _this->_internal_set_producer(from._internal_producer());
  }
  if (from._internal_min_consumer() != 0) {
    _this->_internal_set_min_consumer(from._internal_min_consumer());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VersionDef::CopyFrom(const VersionDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv_tensorflow.VersionDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VersionDef::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VersionDef::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VersionDef::InternalSwap(VersionDef* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bad_consumers_.InternalSwap(&other->_impl_.bad_consumers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.min_consumer_)
      + sizeof(VersionDef::_impl_.min_consumer_)
      - PROTOBUF_FIELD_OFFSET(VersionDef, _impl_.producer_)>(
          reinterpret_cast<char*>(&_impl_.producer_),
          reinterpret_cast<char*>(&other->_impl_.producer_));
}

::google::protobuf::Metadata VersionDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_versions_2eproto_getter, &descriptor_table_versions_2eproto_once,
      file_level_metadata_versions_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_tensorflow
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
