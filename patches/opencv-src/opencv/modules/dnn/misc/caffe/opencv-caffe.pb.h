// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencv-caffe.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_opencv_2dcaffe_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_opencv_2dcaffe_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_opencv_2dcaffe_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_opencv_2dcaffe_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_opencv_2dcaffe_2eproto;
namespace opencv_caffe {
class AccuracyParameter;
struct AccuracyParameterDefaultTypeInternal;
extern AccuracyParameterDefaultTypeInternal _AccuracyParameter_default_instance_;
class ArgMaxParameter;
struct ArgMaxParameterDefaultTypeInternal;
extern ArgMaxParameterDefaultTypeInternal _ArgMaxParameter_default_instance_;
class BatchNormParameter;
struct BatchNormParameterDefaultTypeInternal;
extern BatchNormParameterDefaultTypeInternal _BatchNormParameter_default_instance_;
class BiasParameter;
struct BiasParameterDefaultTypeInternal;
extern BiasParameterDefaultTypeInternal _BiasParameter_default_instance_;
class BlobProto;
struct BlobProtoDefaultTypeInternal;
extern BlobProtoDefaultTypeInternal _BlobProto_default_instance_;
class BlobProtoVector;
struct BlobProtoVectorDefaultTypeInternal;
extern BlobProtoVectorDefaultTypeInternal _BlobProtoVector_default_instance_;
class BlobShape;
struct BlobShapeDefaultTypeInternal;
extern BlobShapeDefaultTypeInternal _BlobShape_default_instance_;
class ConcatParameter;
struct ConcatParameterDefaultTypeInternal;
extern ConcatParameterDefaultTypeInternal _ConcatParameter_default_instance_;
class ContrastiveLossParameter;
struct ContrastiveLossParameterDefaultTypeInternal;
extern ContrastiveLossParameterDefaultTypeInternal _ContrastiveLossParameter_default_instance_;
class ConvolutionParameter;
struct ConvolutionParameterDefaultTypeInternal;
extern ConvolutionParameterDefaultTypeInternal _ConvolutionParameter_default_instance_;
class CropParameter;
struct CropParameterDefaultTypeInternal;
extern CropParameterDefaultTypeInternal _CropParameter_default_instance_;
class DataParameter;
struct DataParameterDefaultTypeInternal;
extern DataParameterDefaultTypeInternal _DataParameter_default_instance_;
class Datum;
struct DatumDefaultTypeInternal;
extern DatumDefaultTypeInternal _Datum_default_instance_;
class DetectionOutputParameter;
struct DetectionOutputParameterDefaultTypeInternal;
extern DetectionOutputParameterDefaultTypeInternal _DetectionOutputParameter_default_instance_;
class DropoutParameter;
struct DropoutParameterDefaultTypeInternal;
extern DropoutParameterDefaultTypeInternal _DropoutParameter_default_instance_;
class DummyDataParameter;
struct DummyDataParameterDefaultTypeInternal;
extern DummyDataParameterDefaultTypeInternal _DummyDataParameter_default_instance_;
class ELUParameter;
struct ELUParameterDefaultTypeInternal;
extern ELUParameterDefaultTypeInternal _ELUParameter_default_instance_;
class EltwiseParameter;
struct EltwiseParameterDefaultTypeInternal;
extern EltwiseParameterDefaultTypeInternal _EltwiseParameter_default_instance_;
class EmbedParameter;
struct EmbedParameterDefaultTypeInternal;
extern EmbedParameterDefaultTypeInternal _EmbedParameter_default_instance_;
class ExpParameter;
struct ExpParameterDefaultTypeInternal;
extern ExpParameterDefaultTypeInternal _ExpParameter_default_instance_;
class FillerParameter;
struct FillerParameterDefaultTypeInternal;
extern FillerParameterDefaultTypeInternal _FillerParameter_default_instance_;
class FlattenParameter;
struct FlattenParameterDefaultTypeInternal;
extern FlattenParameterDefaultTypeInternal _FlattenParameter_default_instance_;
class HDF5DataParameter;
struct HDF5DataParameterDefaultTypeInternal;
extern HDF5DataParameterDefaultTypeInternal _HDF5DataParameter_default_instance_;
class HDF5OutputParameter;
struct HDF5OutputParameterDefaultTypeInternal;
extern HDF5OutputParameterDefaultTypeInternal _HDF5OutputParameter_default_instance_;
class HingeLossParameter;
struct HingeLossParameterDefaultTypeInternal;
extern HingeLossParameterDefaultTypeInternal _HingeLossParameter_default_instance_;
class ImageDataParameter;
struct ImageDataParameterDefaultTypeInternal;
extern ImageDataParameterDefaultTypeInternal _ImageDataParameter_default_instance_;
class InfogainLossParameter;
struct InfogainLossParameterDefaultTypeInternal;
extern InfogainLossParameterDefaultTypeInternal _InfogainLossParameter_default_instance_;
class InnerProductParameter;
struct InnerProductParameterDefaultTypeInternal;
extern InnerProductParameterDefaultTypeInternal _InnerProductParameter_default_instance_;
class InputParameter;
struct InputParameterDefaultTypeInternal;
extern InputParameterDefaultTypeInternal _InputParameter_default_instance_;
class LRNParameter;
struct LRNParameterDefaultTypeInternal;
extern LRNParameterDefaultTypeInternal _LRNParameter_default_instance_;
class LayerParameter;
struct LayerParameterDefaultTypeInternal;
extern LayerParameterDefaultTypeInternal _LayerParameter_default_instance_;
class LogParameter;
struct LogParameterDefaultTypeInternal;
extern LogParameterDefaultTypeInternal _LogParameter_default_instance_;
class LossParameter;
struct LossParameterDefaultTypeInternal;
extern LossParameterDefaultTypeInternal _LossParameter_default_instance_;
class MVNParameter;
struct MVNParameterDefaultTypeInternal;
extern MVNParameterDefaultTypeInternal _MVNParameter_default_instance_;
class MemoryDataParameter;
struct MemoryDataParameterDefaultTypeInternal;
extern MemoryDataParameterDefaultTypeInternal _MemoryDataParameter_default_instance_;
class NetParameter;
struct NetParameterDefaultTypeInternal;
extern NetParameterDefaultTypeInternal _NetParameter_default_instance_;
class NetState;
struct NetStateDefaultTypeInternal;
extern NetStateDefaultTypeInternal _NetState_default_instance_;
class NetStateRule;
struct NetStateRuleDefaultTypeInternal;
extern NetStateRuleDefaultTypeInternal _NetStateRule_default_instance_;
class NonMaximumSuppressionParameter;
struct NonMaximumSuppressionParameterDefaultTypeInternal;
extern NonMaximumSuppressionParameterDefaultTypeInternal _NonMaximumSuppressionParameter_default_instance_;
class NormalizeBBoxParameter;
struct NormalizeBBoxParameterDefaultTypeInternal;
extern NormalizeBBoxParameterDefaultTypeInternal _NormalizeBBoxParameter_default_instance_;
class NormalizedBBox;
struct NormalizedBBoxDefaultTypeInternal;
extern NormalizedBBoxDefaultTypeInternal _NormalizedBBox_default_instance_;
class PReLUParameter;
struct PReLUParameterDefaultTypeInternal;
extern PReLUParameterDefaultTypeInternal _PReLUParameter_default_instance_;
class PSROIPoolingParameter;
struct PSROIPoolingParameterDefaultTypeInternal;
extern PSROIPoolingParameterDefaultTypeInternal _PSROIPoolingParameter_default_instance_;
class ParamSpec;
struct ParamSpecDefaultTypeInternal;
extern ParamSpecDefaultTypeInternal _ParamSpec_default_instance_;
class ParameterParameter;
struct ParameterParameterDefaultTypeInternal;
extern ParameterParameterDefaultTypeInternal _ParameterParameter_default_instance_;
class PermuteParameter;
struct PermuteParameterDefaultTypeInternal;
extern PermuteParameterDefaultTypeInternal _PermuteParameter_default_instance_;
class PoolingParameter;
struct PoolingParameterDefaultTypeInternal;
extern PoolingParameterDefaultTypeInternal _PoolingParameter_default_instance_;
class PowerParameter;
struct PowerParameterDefaultTypeInternal;
extern PowerParameterDefaultTypeInternal _PowerParameter_default_instance_;
class PriorBoxParameter;
struct PriorBoxParameterDefaultTypeInternal;
extern PriorBoxParameterDefaultTypeInternal _PriorBoxParameter_default_instance_;
class ProposalParameter;
struct ProposalParameterDefaultTypeInternal;
extern ProposalParameterDefaultTypeInternal _ProposalParameter_default_instance_;
class PythonParameter;
struct PythonParameterDefaultTypeInternal;
extern PythonParameterDefaultTypeInternal _PythonParameter_default_instance_;
class ROIPoolingParameter;
struct ROIPoolingParameterDefaultTypeInternal;
extern ROIPoolingParameterDefaultTypeInternal _ROIPoolingParameter_default_instance_;
class ReLUParameter;
struct ReLUParameterDefaultTypeInternal;
extern ReLUParameterDefaultTypeInternal _ReLUParameter_default_instance_;
class RecurrentParameter;
struct RecurrentParameterDefaultTypeInternal;
extern RecurrentParameterDefaultTypeInternal _RecurrentParameter_default_instance_;
class ReductionParameter;
struct ReductionParameterDefaultTypeInternal;
extern ReductionParameterDefaultTypeInternal _ReductionParameter_default_instance_;
class ReshapeParameter;
struct ReshapeParameterDefaultTypeInternal;
extern ReshapeParameterDefaultTypeInternal _ReshapeParameter_default_instance_;
class SPPParameter;
struct SPPParameterDefaultTypeInternal;
extern SPPParameterDefaultTypeInternal _SPPParameter_default_instance_;
class SaveOutputParameter;
struct SaveOutputParameterDefaultTypeInternal;
extern SaveOutputParameterDefaultTypeInternal _SaveOutputParameter_default_instance_;
class ScaleParameter;
struct ScaleParameterDefaultTypeInternal;
extern ScaleParameterDefaultTypeInternal _ScaleParameter_default_instance_;
class SigmoidParameter;
struct SigmoidParameterDefaultTypeInternal;
extern SigmoidParameterDefaultTypeInternal _SigmoidParameter_default_instance_;
class SliceParameter;
struct SliceParameterDefaultTypeInternal;
extern SliceParameterDefaultTypeInternal _SliceParameter_default_instance_;
class SoftmaxParameter;
struct SoftmaxParameterDefaultTypeInternal;
extern SoftmaxParameterDefaultTypeInternal _SoftmaxParameter_default_instance_;
class SolverParameter;
struct SolverParameterDefaultTypeInternal;
extern SolverParameterDefaultTypeInternal _SolverParameter_default_instance_;
class SolverState;
struct SolverStateDefaultTypeInternal;
extern SolverStateDefaultTypeInternal _SolverState_default_instance_;
class TanHParameter;
struct TanHParameterDefaultTypeInternal;
extern TanHParameterDefaultTypeInternal _TanHParameter_default_instance_;
class ThresholdParameter;
struct ThresholdParameterDefaultTypeInternal;
extern ThresholdParameterDefaultTypeInternal _ThresholdParameter_default_instance_;
class TileParameter;
struct TileParameterDefaultTypeInternal;
extern TileParameterDefaultTypeInternal _TileParameter_default_instance_;
class TransformationParameter;
struct TransformationParameterDefaultTypeInternal;
extern TransformationParameterDefaultTypeInternal _TransformationParameter_default_instance_;
class V0LayerParameter;
struct V0LayerParameterDefaultTypeInternal;
extern V0LayerParameterDefaultTypeInternal _V0LayerParameter_default_instance_;
class V1LayerParameter;
struct V1LayerParameterDefaultTypeInternal;
extern V1LayerParameterDefaultTypeInternal _V1LayerParameter_default_instance_;
class WindowDataParameter;
struct WindowDataParameterDefaultTypeInternal;
extern WindowDataParameterDefaultTypeInternal _WindowDataParameter_default_instance_;
}  // namespace opencv_caffe
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace opencv_caffe {
enum PriorBoxParameter_CodeType : int {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2,
};

bool PriorBoxParameter_CodeType_IsValid(int value);
extern const uint32_t PriorBoxParameter_CodeType_internal_data_[];
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = static_cast<PriorBoxParameter_CodeType>(1);
constexpr PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = static_cast<PriorBoxParameter_CodeType>(2);
constexpr int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PriorBoxParameter_CodeType_descriptor();
template <typename T>
const std::string& PriorBoxParameter_CodeType_Name(T value) {
  static_assert(std::is_same<T, PriorBoxParameter_CodeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CodeType_Name().");
  return PriorBoxParameter_CodeType_Name(static_cast<PriorBoxParameter_CodeType>(value));
}
template <>
inline const std::string& PriorBoxParameter_CodeType_Name(PriorBoxParameter_CodeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PriorBoxParameter_CodeType_descriptor,
                                                 1, 2>(
      static_cast<int>(value));
}
inline bool PriorBoxParameter_CodeType_Parse(absl::string_view name, PriorBoxParameter_CodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
      PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm : int {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2,
};

bool FillerParameter_VarianceNorm_IsValid(int value);
extern const uint32_t FillerParameter_VarianceNorm_internal_data_[];
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = static_cast<FillerParameter_VarianceNorm>(0);
constexpr FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = static_cast<FillerParameter_VarianceNorm>(2);
constexpr int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
FillerParameter_VarianceNorm_descriptor();
template <typename T>
const std::string& FillerParameter_VarianceNorm_Name(T value) {
  static_assert(std::is_same<T, FillerParameter_VarianceNorm>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VarianceNorm_Name().");
  return FillerParameter_VarianceNorm_Name(static_cast<FillerParameter_VarianceNorm>(value));
}
template <>
inline const std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FillerParameter_VarianceNorm_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool FillerParameter_VarianceNorm_Parse(absl::string_view name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
      FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat : int {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1,
};

bool SolverParameter_SnapshotFormat_IsValid(int value);
extern const uint32_t SolverParameter_SnapshotFormat_internal_data_[];
constexpr SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = static_cast<SolverParameter_SnapshotFormat>(0);
constexpr SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = static_cast<SolverParameter_SnapshotFormat>(1);
constexpr int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SolverParameter_SnapshotFormat_descriptor();
template <typename T>
const std::string& SolverParameter_SnapshotFormat_Name(T value) {
  static_assert(std::is_same<T, SolverParameter_SnapshotFormat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SnapshotFormat_Name().");
  return SolverParameter_SnapshotFormat_Name(static_cast<SolverParameter_SnapshotFormat>(value));
}
template <>
inline const std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverParameter_SnapshotFormat_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SolverParameter_SnapshotFormat_Parse(absl::string_view name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
      SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode : int {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1,
};

bool SolverParameter_SolverMode_IsValid(int value);
extern const uint32_t SolverParameter_SolverMode_internal_data_[];
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = static_cast<SolverParameter_SolverMode>(0);
constexpr SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = static_cast<SolverParameter_SolverMode>(1);
constexpr int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
SolverParameter_SolverMode_descriptor();
template <typename T>
const std::string& SolverParameter_SolverMode_Name(T value) {
  static_assert(std::is_same<T, SolverParameter_SolverMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SolverMode_Name().");
  return SolverParameter_SolverMode_Name(static_cast<SolverParameter_SolverMode>(value));
}
template <>
inline const std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverParameter_SolverMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool SolverParameter_SolverMode_Parse(absl::string_view name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
      SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType : int {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5,
};

bool SolverParameter_SolverType_IsValid(int value);
extern const uint32_t SolverParameter_SolverType_internal_data_[];
constexpr SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = static_cast<SolverParameter_SolverType>(0);
constexpr SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = static_cast<SolverParameter_SolverType>(5);
constexpr int SolverParameter_SolverType_SolverType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
SolverParameter_SolverType_descriptor();
template <typename T>
const std::string& SolverParameter_SolverType_Name(T value) {
  static_assert(std::is_same<T, SolverParameter_SolverType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SolverType_Name().");
  return SolverParameter_SolverType_Name(static_cast<SolverParameter_SolverType>(value));
}
template <>
inline const std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverParameter_SolverType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool SolverParameter_SolverType_Parse(absl::string_view name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
      SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode : int {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1,
};

bool ParamSpec_DimCheckMode_IsValid(int value);
extern const uint32_t ParamSpec_DimCheckMode_internal_data_[];
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = static_cast<ParamSpec_DimCheckMode>(0);
constexpr ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = static_cast<ParamSpec_DimCheckMode>(1);
constexpr int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ParamSpec_DimCheckMode_descriptor();
template <typename T>
const std::string& ParamSpec_DimCheckMode_Name(T value) {
  static_assert(std::is_same<T, ParamSpec_DimCheckMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DimCheckMode_Name().");
  return ParamSpec_DimCheckMode_Name(static_cast<ParamSpec_DimCheckMode>(value));
}
template <>
inline const std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ParamSpec_DimCheckMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ParamSpec_DimCheckMode_Parse(absl::string_view name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
      ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode : int {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3,
};

bool LossParameter_NormalizationMode_IsValid(int value);
extern const uint32_t LossParameter_NormalizationMode_internal_data_[];
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = static_cast<LossParameter_NormalizationMode>(0);
constexpr LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = static_cast<LossParameter_NormalizationMode>(3);
constexpr int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LossParameter_NormalizationMode_descriptor();
template <typename T>
const std::string& LossParameter_NormalizationMode_Name(T value) {
  static_assert(std::is_same<T, LossParameter_NormalizationMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NormalizationMode_Name().");
  return LossParameter_NormalizationMode_Name(static_cast<LossParameter_NormalizationMode>(value));
}
template <>
inline const std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LossParameter_NormalizationMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LossParameter_NormalizationMode_Parse(absl::string_view name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
      LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine : int {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2,
};

bool ConvolutionParameter_Engine_IsValid(int value);
extern const uint32_t ConvolutionParameter_Engine_internal_data_[];
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = static_cast<ConvolutionParameter_Engine>(0);
constexpr ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = static_cast<ConvolutionParameter_Engine>(2);
constexpr int ConvolutionParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ConvolutionParameter_Engine_descriptor();
template <typename T>
const std::string& ConvolutionParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, ConvolutionParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return ConvolutionParameter_Engine_Name(static_cast<ConvolutionParameter_Engine>(value));
}
template <>
inline const std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConvolutionParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ConvolutionParameter_Engine_Parse(absl::string_view name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
      ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB : int {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1,
};

bool DataParameter_DB_IsValid(int value);
extern const uint32_t DataParameter_DB_internal_data_[];
constexpr DataParameter_DB DataParameter_DB_DB_MIN = static_cast<DataParameter_DB>(0);
constexpr DataParameter_DB DataParameter_DB_DB_MAX = static_cast<DataParameter_DB>(1);
constexpr int DataParameter_DB_DB_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
DataParameter_DB_descriptor();
template <typename T>
const std::string& DataParameter_DB_Name(T value) {
  static_assert(std::is_same<T, DataParameter_DB>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DB_Name().");
  return DataParameter_DB_Name(static_cast<DataParameter_DB>(value));
}
template <>
inline const std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DataParameter_DB_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool DataParameter_DB_Parse(absl::string_view name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
      DataParameter_DB_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp : int {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2,
};

bool EltwiseParameter_EltwiseOp_IsValid(int value);
extern const uint32_t EltwiseParameter_EltwiseOp_internal_data_[];
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = static_cast<EltwiseParameter_EltwiseOp>(0);
constexpr EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = static_cast<EltwiseParameter_EltwiseOp>(2);
constexpr int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
EltwiseParameter_EltwiseOp_descriptor();
template <typename T>
const std::string& EltwiseParameter_EltwiseOp_Name(T value) {
  static_assert(std::is_same<T, EltwiseParameter_EltwiseOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EltwiseOp_Name().");
  return EltwiseParameter_EltwiseOp_Name(static_cast<EltwiseParameter_EltwiseOp>(value));
}
template <>
inline const std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EltwiseParameter_EltwiseOp_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool EltwiseParameter_EltwiseOp_Parse(absl::string_view name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
      EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm : int {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2,
};

bool HingeLossParameter_Norm_IsValid(int value);
extern const uint32_t HingeLossParameter_Norm_internal_data_[];
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = static_cast<HingeLossParameter_Norm>(1);
constexpr HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = static_cast<HingeLossParameter_Norm>(2);
constexpr int HingeLossParameter_Norm_Norm_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
HingeLossParameter_Norm_descriptor();
template <typename T>
const std::string& HingeLossParameter_Norm_Name(T value) {
  static_assert(std::is_same<T, HingeLossParameter_Norm>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Norm_Name().");
  return HingeLossParameter_Norm_Name(static_cast<HingeLossParameter_Norm>(value));
}
template <>
inline const std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfDenseEnum<HingeLossParameter_Norm_descriptor,
                                                 1, 2>(
      static_cast<int>(value));
}
inline bool HingeLossParameter_Norm_Parse(absl::string_view name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
      HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion : int {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1,
};

bool LRNParameter_NormRegion_IsValid(int value);
extern const uint32_t LRNParameter_NormRegion_internal_data_[];
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = static_cast<LRNParameter_NormRegion>(0);
constexpr LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = static_cast<LRNParameter_NormRegion>(1);
constexpr int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
LRNParameter_NormRegion_descriptor();
template <typename T>
const std::string& LRNParameter_NormRegion_Name(T value) {
  static_assert(std::is_same<T, LRNParameter_NormRegion>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NormRegion_Name().");
  return LRNParameter_NormRegion_Name(static_cast<LRNParameter_NormRegion>(value));
}
template <>
inline const std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LRNParameter_NormRegion_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool LRNParameter_NormRegion_Parse(absl::string_view name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
      LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine : int {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2,
};

bool LRNParameter_Engine_IsValid(int value);
extern const uint32_t LRNParameter_Engine_internal_data_[];
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MIN = static_cast<LRNParameter_Engine>(0);
constexpr LRNParameter_Engine LRNParameter_Engine_Engine_MAX = static_cast<LRNParameter_Engine>(2);
constexpr int LRNParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LRNParameter_Engine_descriptor();
template <typename T>
const std::string& LRNParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, LRNParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return LRNParameter_Engine_Name(static_cast<LRNParameter_Engine>(value));
}
template <>
inline const std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LRNParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LRNParameter_Engine_Parse(absl::string_view name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
      LRNParameter_Engine_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod : int {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2,
};

bool PoolingParameter_PoolMethod_IsValid(int value);
extern const uint32_t PoolingParameter_PoolMethod_internal_data_[];
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = static_cast<PoolingParameter_PoolMethod>(0);
constexpr PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = static_cast<PoolingParameter_PoolMethod>(2);
constexpr int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PoolingParameter_PoolMethod_descriptor();
template <typename T>
const std::string& PoolingParameter_PoolMethod_Name(T value) {
  static_assert(std::is_same<T, PoolingParameter_PoolMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PoolMethod_Name().");
  return PoolingParameter_PoolMethod_Name(static_cast<PoolingParameter_PoolMethod>(value));
}
template <>
inline const std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PoolingParameter_PoolMethod_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PoolingParameter_PoolMethod_Parse(absl::string_view name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
      PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine : int {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2,
};

bool PoolingParameter_Engine_IsValid(int value);
extern const uint32_t PoolingParameter_Engine_internal_data_[];
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = static_cast<PoolingParameter_Engine>(0);
constexpr PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = static_cast<PoolingParameter_Engine>(2);
constexpr int PoolingParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PoolingParameter_Engine_descriptor();
template <typename T>
const std::string& PoolingParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, PoolingParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return PoolingParameter_Engine_Name(static_cast<PoolingParameter_Engine>(value));
}
template <>
inline const std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PoolingParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PoolingParameter_Engine_Parse(absl::string_view name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
      PoolingParameter_Engine_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp : int {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4,
};

bool ReductionParameter_ReductionOp_IsValid(int value);
extern const uint32_t ReductionParameter_ReductionOp_internal_data_[];
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = static_cast<ReductionParameter_ReductionOp>(1);
constexpr ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = static_cast<ReductionParameter_ReductionOp>(4);
constexpr int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ReductionParameter_ReductionOp_descriptor();
template <typename T>
const std::string& ReductionParameter_ReductionOp_Name(T value) {
  static_assert(std::is_same<T, ReductionParameter_ReductionOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ReductionOp_Name().");
  return ReductionParameter_ReductionOp_Name(static_cast<ReductionParameter_ReductionOp>(value));
}
template <>
inline const std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ReductionParameter_ReductionOp_descriptor,
                                                 1, 4>(
      static_cast<int>(value));
}
inline bool ReductionParameter_ReductionOp_Parse(absl::string_view name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
      ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine : int {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2,
};

bool ReLUParameter_Engine_IsValid(int value);
extern const uint32_t ReLUParameter_Engine_internal_data_[];
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = static_cast<ReLUParameter_Engine>(0);
constexpr ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = static_cast<ReLUParameter_Engine>(2);
constexpr int ReLUParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ReLUParameter_Engine_descriptor();
template <typename T>
const std::string& ReLUParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, ReLUParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return ReLUParameter_Engine_Name(static_cast<ReLUParameter_Engine>(value));
}
template <>
inline const std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ReLUParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ReLUParameter_Engine_Parse(absl::string_view name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
      ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine : int {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2,
};

bool SigmoidParameter_Engine_IsValid(int value);
extern const uint32_t SigmoidParameter_Engine_internal_data_[];
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = static_cast<SigmoidParameter_Engine>(0);
constexpr SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = static_cast<SigmoidParameter_Engine>(2);
constexpr int SigmoidParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SigmoidParameter_Engine_descriptor();
template <typename T>
const std::string& SigmoidParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, SigmoidParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return SigmoidParameter_Engine_Name(static_cast<SigmoidParameter_Engine>(value));
}
template <>
inline const std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SigmoidParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SigmoidParameter_Engine_Parse(absl::string_view name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
      SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine : int {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2,
};

bool SoftmaxParameter_Engine_IsValid(int value);
extern const uint32_t SoftmaxParameter_Engine_internal_data_[];
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = static_cast<SoftmaxParameter_Engine>(0);
constexpr SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = static_cast<SoftmaxParameter_Engine>(2);
constexpr int SoftmaxParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SoftmaxParameter_Engine_descriptor();
template <typename T>
const std::string& SoftmaxParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, SoftmaxParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return SoftmaxParameter_Engine_Name(static_cast<SoftmaxParameter_Engine>(value));
}
template <>
inline const std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SoftmaxParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SoftmaxParameter_Engine_Parse(absl::string_view name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
      SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine : int {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2,
};

bool TanHParameter_Engine_IsValid(int value);
extern const uint32_t TanHParameter_Engine_internal_data_[];
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MIN = static_cast<TanHParameter_Engine>(0);
constexpr TanHParameter_Engine TanHParameter_Engine_Engine_MAX = static_cast<TanHParameter_Engine>(2);
constexpr int TanHParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TanHParameter_Engine_descriptor();
template <typename T>
const std::string& TanHParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, TanHParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return TanHParameter_Engine_Name(static_cast<TanHParameter_Engine>(value));
}
template <>
inline const std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TanHParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TanHParameter_Engine_Parse(absl::string_view name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
      TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod : int {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2,
};

bool SPPParameter_PoolMethod_IsValid(int value);
extern const uint32_t SPPParameter_PoolMethod_internal_data_[];
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = static_cast<SPPParameter_PoolMethod>(0);
constexpr SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = static_cast<SPPParameter_PoolMethod>(2);
constexpr int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SPPParameter_PoolMethod_descriptor();
template <typename T>
const std::string& SPPParameter_PoolMethod_Name(T value) {
  static_assert(std::is_same<T, SPPParameter_PoolMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PoolMethod_Name().");
  return SPPParameter_PoolMethod_Name(static_cast<SPPParameter_PoolMethod>(value));
}
template <>
inline const std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SPPParameter_PoolMethod_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SPPParameter_PoolMethod_Parse(absl::string_view name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
      SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine : int {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2,
};

bool SPPParameter_Engine_IsValid(int value);
extern const uint32_t SPPParameter_Engine_internal_data_[];
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MIN = static_cast<SPPParameter_Engine>(0);
constexpr SPPParameter_Engine SPPParameter_Engine_Engine_MAX = static_cast<SPPParameter_Engine>(2);
constexpr int SPPParameter_Engine_Engine_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SPPParameter_Engine_descriptor();
template <typename T>
const std::string& SPPParameter_Engine_Name(T value) {
  static_assert(std::is_same<T, SPPParameter_Engine>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Engine_Name().");
  return SPPParameter_Engine_Name(static_cast<SPPParameter_Engine>(value));
}
template <>
inline const std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SPPParameter_Engine_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SPPParameter_Engine_Parse(absl::string_view name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
      SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType : int {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31,
};

bool V1LayerParameter_LayerType_IsValid(int value);
extern const uint32_t V1LayerParameter_LayerType_internal_data_[];
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = static_cast<V1LayerParameter_LayerType>(0);
constexpr V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = static_cast<V1LayerParameter_LayerType>(39);
constexpr int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = 39 + 1;
const ::google::protobuf::EnumDescriptor*
V1LayerParameter_LayerType_descriptor();
template <typename T>
const std::string& V1LayerParameter_LayerType_Name(T value) {
  static_assert(std::is_same<T, V1LayerParameter_LayerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LayerType_Name().");
  return V1LayerParameter_LayerType_Name(static_cast<V1LayerParameter_LayerType>(value));
}
template <>
inline const std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<V1LayerParameter_LayerType_descriptor,
                                                 0, 39>(
      static_cast<int>(value));
}
inline bool V1LayerParameter_LayerType_Parse(absl::string_view name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
      V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode : int {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1,
};

bool V1LayerParameter_DimCheckMode_IsValid(int value);
extern const uint32_t V1LayerParameter_DimCheckMode_internal_data_[];
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = static_cast<V1LayerParameter_DimCheckMode>(0);
constexpr V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = static_cast<V1LayerParameter_DimCheckMode>(1);
constexpr int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
V1LayerParameter_DimCheckMode_descriptor();
template <typename T>
const std::string& V1LayerParameter_DimCheckMode_Name(T value) {
  static_assert(std::is_same<T, V1LayerParameter_DimCheckMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DimCheckMode_Name().");
  return V1LayerParameter_DimCheckMode_Name(static_cast<V1LayerParameter_DimCheckMode>(value));
}
template <>
inline const std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<V1LayerParameter_DimCheckMode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool V1LayerParameter_DimCheckMode_Parse(absl::string_view name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
      V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod : int {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2,
};

bool V0LayerParameter_PoolMethod_IsValid(int value);
extern const uint32_t V0LayerParameter_PoolMethod_internal_data_[];
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = static_cast<V0LayerParameter_PoolMethod>(0);
constexpr V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = static_cast<V0LayerParameter_PoolMethod>(2);
constexpr int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
V0LayerParameter_PoolMethod_descriptor();
template <typename T>
const std::string& V0LayerParameter_PoolMethod_Name(T value) {
  static_assert(std::is_same<T, V0LayerParameter_PoolMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PoolMethod_Name().");
  return V0LayerParameter_PoolMethod_Name(static_cast<V0LayerParameter_PoolMethod>(value));
}
template <>
inline const std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<V0LayerParameter_PoolMethod_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool V0LayerParameter_PoolMethod_Parse(absl::string_view name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
      V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Type : int {
  DOUBLE = 0,
  FLOAT = 1,
  FLOAT16 = 2,
  INT = 3,
  UINT = 4,
};

bool Type_IsValid(int value);
extern const uint32_t Type_internal_data_[];
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(4);
constexpr int Type_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}
enum Phase : int {
  TRAIN = 0,
  TEST = 1,
};

bool Phase_IsValid(int value);
extern const uint32_t Phase_internal_data_[];
constexpr Phase Phase_MIN = static_cast<Phase>(0);
constexpr Phase Phase_MAX = static_cast<Phase>(1);
constexpr int Phase_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Phase_descriptor();
template <typename T>
const std::string& Phase_Name(T value) {
  static_assert(std::is_same<T, Phase>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Phase_Name().");
  return Phase_Name(static_cast<Phase>(value));
}
template <>
inline const std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Phase_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Phase_Parse(absl::string_view name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
      Phase_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WindowDataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.WindowDataParameter) */ {
 public:
  inline WindowDataParameter() : WindowDataParameter(nullptr) {}
  ~WindowDataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WindowDataParameter(::google::protobuf::internal::ConstantInitialized);

  inline WindowDataParameter(const WindowDataParameter& from)
      : WindowDataParameter(nullptr, from) {}
  WindowDataParameter(WindowDataParameter&& from) noexcept
    : WindowDataParameter() {
    *this = ::std::move(from);
  }

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowDataParameter& operator=(WindowDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WindowDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const WindowDataParameter* internal_default_instance() {
    return reinterpret_cast<const WindowDataParameter*>(
               &_WindowDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(WindowDataParameter& a, WindowDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WindowDataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WindowDataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WindowDataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WindowDataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WindowDataParameter& from) {
    WindowDataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WindowDataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.WindowDataParameter";
  }
  protected:
  explicit WindowDataParameter(::google::protobuf::Arena* arena);
  WindowDataParameter(::google::protobuf::Arena* arena, const WindowDataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kCropModeFieldNumber = 11,
    kRootFolderFieldNumber = 13,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kMirrorFieldNumber = 6,
    kCacheImagesFieldNumber = 12,
    kContextPadFieldNumber = 10,
    kScaleFieldNumber = 2,
    kFgThresholdFieldNumber = 7,
    kBgThresholdFieldNumber = 8,
    kFgFractionFieldNumber = 9,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file() ;
  const std::string& mean_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mean_file(Arg_&& arg, Args_... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* value);

  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(
      const std::string& value);
  std::string* _internal_mutable_mean_file();

  public:
  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode() ;
  const std::string& crop_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crop_mode(Arg_&& arg, Args_... args);
  std::string* mutable_crop_mode();
  PROTOBUF_NODISCARD std::string* release_crop_mode();
  void set_allocated_crop_mode(std::string* value);

  private:
  const std::string& _internal_crop_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crop_mode(
      const std::string& value);
  std::string* _internal_mutable_crop_mode();

  public:
  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder() ;
  const std::string& root_folder() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_folder(Arg_&& arg, Args_... args);
  std::string* mutable_root_folder();
  PROTOBUF_NODISCARD std::string* release_root_folder();
  void set_allocated_root_folder(std::string* value);

  private:
  const std::string& _internal_root_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(
      const std::string& value);
  std::string* _internal_mutable_root_folder();

  public:
  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::uint32_t batch_size() const;
  void set_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(::uint32_t value);

  public:
  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size() ;
  ::uint32_t crop_size() const;
  void set_crop_size(::uint32_t value);

  private:
  ::uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(::uint32_t value);

  public:
  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror() ;
  bool mirror() const;
  void set_mirror(bool value);

  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);

  public:
  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images() ;
  bool cache_images() const;
  void set_cache_images(bool value);

  private:
  bool _internal_cache_images() const;
  void _internal_set_cache_images(bool value);

  public:
  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad() ;
  ::uint32_t context_pad() const;
  void set_context_pad(::uint32_t value);

  private:
  ::uint32_t _internal_context_pad() const;
  void _internal_set_context_pad(::uint32_t value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold() ;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  private:
  float _internal_fg_threshold() const;
  void _internal_set_fg_threshold(float value);

  public:
  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold() ;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  private:
  float _internal_bg_threshold() const;
  void _internal_set_bg_threshold(float value);

  public:
  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction() ;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  private:
  float _internal_fg_fraction() const;
  void _internal_set_fg_fraction(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.WindowDataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      84, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr mean_file_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_crop_mode_;
    ::google::protobuf::internal::ArenaStringPtr crop_mode_;
    ::google::protobuf::internal::ArenaStringPtr root_folder_;
    ::uint32_t batch_size_;
    ::uint32_t crop_size_;
    bool mirror_;
    bool cache_images_;
    ::uint32_t context_pad_;
    float scale_;
    float fg_threshold_;
    float bg_threshold_;
    float fg_fraction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class TransformationParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.TransformationParameter) */ {
 public:
  inline TransformationParameter() : TransformationParameter(nullptr) {}
  ~TransformationParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransformationParameter(::google::protobuf::internal::ConstantInitialized);

  inline TransformationParameter(const TransformationParameter& from)
      : TransformationParameter(nullptr, from) {}
  TransformationParameter(TransformationParameter&& from) noexcept
    : TransformationParameter() {
    *this = ::std::move(from);
  }

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformationParameter& operator=(TransformationParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformationParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformationParameter* internal_default_instance() {
    return reinterpret_cast<const TransformationParameter*>(
               &_TransformationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TransformationParameter& a, TransformationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformationParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformationParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformationParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformationParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransformationParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransformationParameter& from) {
    TransformationParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransformationParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.TransformationParameter";
  }
  protected:
  explicit TransformationParameter(::google::protobuf::Arena* arena);
  TransformationParameter(::google::protobuf::Arena* arena, const TransformationParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanValueFieldNumber = 5,
    kMeanFileFieldNumber = 4,
    kCropSizeFieldNumber = 3,
    kMirrorFieldNumber = 2,
    kForceColorFieldNumber = 6,
    kForceGrayFieldNumber = 7,
    kScaleFieldNumber = 1,
  };
  // repeated float mean_value = 5;
  int mean_value_size() const;
  private:
  int _internal_mean_value_size() const;

  public:
  void clear_mean_value() ;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField<float>& mean_value() const;
  ::google::protobuf::RepeatedField<float>* mutable_mean_value();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_mean_value() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_mean_value();

  public:
  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file() ;
  const std::string& mean_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mean_file(Arg_&& arg, Args_... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* value);

  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(
      const std::string& value);
  std::string* _internal_mutable_mean_file();

  public:
  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size() ;
  ::uint32_t crop_size() const;
  void set_crop_size(::uint32_t value);

  private:
  ::uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(::uint32_t value);

  public:
  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror() ;
  bool mirror() const;
  void set_mirror(bool value);

  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);

  public:
  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  void clear_force_color() ;
  bool force_color() const;
  void set_force_color(bool value);

  private:
  bool _internal_force_color() const;
  void _internal_set_force_color(bool value);

  public:
  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  void clear_force_gray() ;
  bool force_gray() const;
  void set_force_gray(bool value);

  private:
  bool _internal_force_gray() const;
  void _internal_set_force_gray(bool value);

  public:
  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.TransformationParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> mean_value_;
    ::google::protobuf::internal::ArenaStringPtr mean_file_;
    ::uint32_t crop_size_;
    bool mirror_;
    bool force_color_;
    bool force_gray_;
    float scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class TileParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.TileParameter) */ {
 public:
  inline TileParameter() : TileParameter(nullptr) {}
  ~TileParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TileParameter(::google::protobuf::internal::ConstantInitialized);

  inline TileParameter(const TileParameter& from)
      : TileParameter(nullptr, from) {}
  TileParameter(TileParameter&& from) noexcept
    : TileParameter() {
    *this = ::std::move(from);
  }

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileParameter& operator=(TileParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TileParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileParameter* internal_default_instance() {
    return reinterpret_cast<const TileParameter*>(
               &_TileParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TileParameter& a, TileParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TileParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TileParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TileParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TileParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TileParameter& from) {
    TileParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TileParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.TileParameter";
  }
  protected:
  explicit TileParameter(::google::protobuf::Arena* arena);
  TileParameter(::google::protobuf::Arena* arena, const TileParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // optional int32 tiles = 2;
  bool has_tiles() const;
  void clear_tiles() ;
  ::int32_t tiles() const;
  void set_tiles(::int32_t value);

  private:
  ::int32_t _internal_tiles() const;
  void _internal_set_tiles(::int32_t value);

  public:
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.TileParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t tiles_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ThresholdParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ThresholdParameter) */ {
 public:
  inline ThresholdParameter() : ThresholdParameter(nullptr) {}
  ~ThresholdParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ThresholdParameter(::google::protobuf::internal::ConstantInitialized);

  inline ThresholdParameter(const ThresholdParameter& from)
      : ThresholdParameter(nullptr, from) {}
  ThresholdParameter(ThresholdParameter&& from) noexcept
    : ThresholdParameter() {
    *this = ::std::move(from);
  }

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdParameter& operator=(ThresholdParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThresholdParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThresholdParameter* internal_default_instance() {
    return reinterpret_cast<const ThresholdParameter*>(
               &_ThresholdParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ThresholdParameter& a, ThresholdParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThresholdParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThresholdParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ThresholdParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ThresholdParameter& from) {
    ThresholdParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ThresholdParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ThresholdParameter";
  }
  protected:
  explicit ThresholdParameter(::google::protobuf::Arena* arena);
  ThresholdParameter(::google::protobuf::Arena* arena, const ThresholdParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdFieldNumber = 1,
  };
  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold() ;
  float threshold() const;
  void set_threshold(float value);

  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ThresholdParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float threshold_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class TanHParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.TanHParameter) */ {
 public:
  inline TanHParameter() : TanHParameter(nullptr) {}
  ~TanHParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TanHParameter(::google::protobuf::internal::ConstantInitialized);

  inline TanHParameter(const TanHParameter& from)
      : TanHParameter(nullptr, from) {}
  TanHParameter(TanHParameter&& from) noexcept
    : TanHParameter() {
    *this = ::std::move(from);
  }

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TanHParameter& operator=(TanHParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TanHParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TanHParameter* internal_default_instance() {
    return reinterpret_cast<const TanHParameter*>(
               &_TanHParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TanHParameter& a, TanHParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TanHParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TanHParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TanHParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TanHParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TanHParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TanHParameter& from) {
    TanHParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TanHParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.TanHParameter";
  }
  protected:
  explicit TanHParameter(::google::protobuf::Arena* arena);
  TanHParameter(::google::protobuf::Arena* arena, const TanHParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Engine = TanHParameter_Engine;
  static constexpr Engine DEFAULT = TanHParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = TanHParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = TanHParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = TanHParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .opencv_caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::TanHParameter_Engine engine() const;
  void set_engine(::opencv_caffe::TanHParameter_Engine value);

  private:
  ::opencv_caffe::TanHParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::TanHParameter_Engine value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.TanHParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int engine_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SoftmaxParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SoftmaxParameter) */ {
 public:
  inline SoftmaxParameter() : SoftmaxParameter(nullptr) {}
  ~SoftmaxParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftmaxParameter(::google::protobuf::internal::ConstantInitialized);

  inline SoftmaxParameter(const SoftmaxParameter& from)
      : SoftmaxParameter(nullptr, from) {}
  SoftmaxParameter(SoftmaxParameter&& from) noexcept
    : SoftmaxParameter() {
    *this = ::std::move(from);
  }

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftmaxParameter& operator=(SoftmaxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftmaxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftmaxParameter* internal_default_instance() {
    return reinterpret_cast<const SoftmaxParameter*>(
               &_SoftmaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SoftmaxParameter& a, SoftmaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftmaxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftmaxParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftmaxParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftmaxParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SoftmaxParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SoftmaxParameter& from) {
    SoftmaxParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SoftmaxParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SoftmaxParameter";
  }
  protected:
  explicit SoftmaxParameter(::google::protobuf::Arena* arena);
  SoftmaxParameter(::google::protobuf::Arena* arena, const SoftmaxParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Engine = SoftmaxParameter_Engine;
  static constexpr Engine DEFAULT = SoftmaxParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = SoftmaxParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = SoftmaxParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = SoftmaxParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional .opencv_caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::opencv_caffe::SoftmaxParameter_Engine value);

  private:
  ::opencv_caffe::SoftmaxParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::SoftmaxParameter_Engine value);

  public:
  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SoftmaxParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int engine_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SliceParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SliceParameter) */ {
 public:
  inline SliceParameter() : SliceParameter(nullptr) {}
  ~SliceParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SliceParameter(::google::protobuf::internal::ConstantInitialized);

  inline SliceParameter(const SliceParameter& from)
      : SliceParameter(nullptr, from) {}
  SliceParameter(SliceParameter&& from) noexcept
    : SliceParameter() {
    *this = ::std::move(from);
  }

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceParameter& operator=(SliceParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SliceParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceParameter* internal_default_instance() {
    return reinterpret_cast<const SliceParameter*>(
               &_SliceParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SliceParameter& a, SliceParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SliceParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SliceParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SliceParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SliceParameter& from) {
    SliceParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SliceParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SliceParameter";
  }
  protected:
  explicit SliceParameter(::google::protobuf::Arena* arena);
  SliceParameter(::google::protobuf::Arena* arena, const SliceParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicePointFieldNumber = 2,
    kSliceDimFieldNumber = 1,
    kAxisFieldNumber = 3,
  };
  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  private:
  int _internal_slice_point_size() const;

  public:
  void clear_slice_point() ;
  ::uint32_t slice_point(int index) const;
  void set_slice_point(int index, ::uint32_t value);
  void add_slice_point(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& slice_point() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_slice_point();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_slice_point() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_slice_point();

  public:
  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim() ;
  ::uint32_t slice_dim() const;
  void set_slice_dim(::uint32_t value);

  private:
  ::uint32_t _internal_slice_dim() const;
  void _internal_set_slice_dim(::uint32_t value);

  public:
  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SliceParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> slice_point_;
    ::uint32_t slice_dim_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SigmoidParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SigmoidParameter) */ {
 public:
  inline SigmoidParameter() : SigmoidParameter(nullptr) {}
  ~SigmoidParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SigmoidParameter(::google::protobuf::internal::ConstantInitialized);

  inline SigmoidParameter(const SigmoidParameter& from)
      : SigmoidParameter(nullptr, from) {}
  SigmoidParameter(SigmoidParameter&& from) noexcept
    : SigmoidParameter() {
    *this = ::std::move(from);
  }

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigmoidParameter& operator=(SigmoidParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigmoidParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigmoidParameter* internal_default_instance() {
    return reinterpret_cast<const SigmoidParameter*>(
               &_SigmoidParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SigmoidParameter& a, SigmoidParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SigmoidParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigmoidParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigmoidParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigmoidParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SigmoidParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SigmoidParameter& from) {
    SigmoidParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SigmoidParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SigmoidParameter";
  }
  protected:
  explicit SigmoidParameter(::google::protobuf::Arena* arena);
  SigmoidParameter(::google::protobuf::Arena* arena, const SigmoidParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Engine = SigmoidParameter_Engine;
  static constexpr Engine DEFAULT = SigmoidParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = SigmoidParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = SigmoidParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = SigmoidParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFieldNumber = 1,
  };
  // optional .opencv_caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::opencv_caffe::SigmoidParameter_Engine value);

  private:
  ::opencv_caffe::SigmoidParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::SigmoidParameter_Engine value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SigmoidParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int engine_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SaveOutputParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SaveOutputParameter) */ {
 public:
  inline SaveOutputParameter() : SaveOutputParameter(nullptr) {}
  ~SaveOutputParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SaveOutputParameter(::google::protobuf::internal::ConstantInitialized);

  inline SaveOutputParameter(const SaveOutputParameter& from)
      : SaveOutputParameter(nullptr, from) {}
  SaveOutputParameter(SaveOutputParameter&& from) noexcept
    : SaveOutputParameter() {
    *this = ::std::move(from);
  }

  inline SaveOutputParameter& operator=(const SaveOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOutputParameter& operator=(SaveOutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveOutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveOutputParameter* internal_default_instance() {
    return reinterpret_cast<const SaveOutputParameter*>(
               &_SaveOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SaveOutputParameter& a, SaveOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveOutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveOutputParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveOutputParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveOutputParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SaveOutputParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SaveOutputParameter& from) {
    SaveOutputParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SaveOutputParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SaveOutputParameter";
  }
  protected:
  explicit SaveOutputParameter(::google::protobuf::Arena* arena);
  SaveOutputParameter(::google::protobuf::Arena* arena, const SaveOutputParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDirectoryFieldNumber = 1,
    kOutputNamePrefixFieldNumber = 2,
    kOutputFormatFieldNumber = 3,
    kLabelMapFileFieldNumber = 4,
    kNameSizeFileFieldNumber = 5,
    kNumTestImageFieldNumber = 6,
  };
  // optional string output_directory = 1;
  bool has_output_directory() const;
  void clear_output_directory() ;
  const std::string& output_directory() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_directory(Arg_&& arg, Args_... args);
  std::string* mutable_output_directory();
  PROTOBUF_NODISCARD std::string* release_output_directory();
  void set_allocated_output_directory(std::string* value);

  private:
  const std::string& _internal_output_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_directory(
      const std::string& value);
  std::string* _internal_mutable_output_directory();

  public:
  // optional string output_name_prefix = 2;
  bool has_output_name_prefix() const;
  void clear_output_name_prefix() ;
  const std::string& output_name_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_name_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_output_name_prefix();
  PROTOBUF_NODISCARD std::string* release_output_name_prefix();
  void set_allocated_output_name_prefix(std::string* value);

  private:
  const std::string& _internal_output_name_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_name_prefix(
      const std::string& value);
  std::string* _internal_mutable_output_name_prefix();

  public:
  // optional string output_format = 3;
  bool has_output_format() const;
  void clear_output_format() ;
  const std::string& output_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_output_format(Arg_&& arg, Args_... args);
  std::string* mutable_output_format();
  PROTOBUF_NODISCARD std::string* release_output_format();
  void set_allocated_output_format(std::string* value);

  private:
  const std::string& _internal_output_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output_format(
      const std::string& value);
  std::string* _internal_mutable_output_format();

  public:
  // optional string label_map_file = 4;
  bool has_label_map_file() const;
  void clear_label_map_file() ;
  const std::string& label_map_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_map_file(Arg_&& arg, Args_... args);
  std::string* mutable_label_map_file();
  PROTOBUF_NODISCARD std::string* release_label_map_file();
  void set_allocated_label_map_file(std::string* value);

  private:
  const std::string& _internal_label_map_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_map_file(
      const std::string& value);
  std::string* _internal_mutable_label_map_file();

  public:
  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  void clear_name_size_file() ;
  const std::string& name_size_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name_size_file(Arg_&& arg, Args_... args);
  std::string* mutable_name_size_file();
  PROTOBUF_NODISCARD std::string* release_name_size_file();
  void set_allocated_name_size_file(std::string* value);

  private:
  const std::string& _internal_name_size_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_size_file(
      const std::string& value);
  std::string* _internal_mutable_name_size_file();

  public:
  // optional uint32 num_test_image = 6;
  bool has_num_test_image() const;
  void clear_num_test_image() ;
  ::uint32_t num_test_image() const;
  void set_num_test_image(::uint32_t value);

  private:
  ::uint32_t _internal_num_test_image() const;
  void _internal_set_num_test_image(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SaveOutputParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      116, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr output_directory_;
    ::google::protobuf::internal::ArenaStringPtr output_name_prefix_;
    ::google::protobuf::internal::ArenaStringPtr output_format_;
    ::google::protobuf::internal::ArenaStringPtr label_map_file_;
    ::google::protobuf::internal::ArenaStringPtr name_size_file_;
    ::uint32_t num_test_image_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SPPParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SPPParameter) */ {
 public:
  inline SPPParameter() : SPPParameter(nullptr) {}
  ~SPPParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SPPParameter(::google::protobuf::internal::ConstantInitialized);

  inline SPPParameter(const SPPParameter& from)
      : SPPParameter(nullptr, from) {}
  SPPParameter(SPPParameter&& from) noexcept
    : SPPParameter() {
    *this = ::std::move(from);
  }

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPPParameter& operator=(SPPParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPPParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPPParameter* internal_default_instance() {
    return reinterpret_cast<const SPPParameter*>(
               &_SPPParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SPPParameter& a, SPPParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SPPParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPPParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPPParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPPParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SPPParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SPPParameter& from) {
    SPPParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SPPParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SPPParameter";
  }
  protected:
  explicit SPPParameter(::google::protobuf::Arena* arena);
  SPPParameter(::google::protobuf::Arena* arena, const SPPParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PoolMethod = SPPParameter_PoolMethod;
  static constexpr PoolMethod MAX = SPPParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE = SPPParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC = SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN = SPPParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX = SPPParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  template <typename T>
  static inline const std::string& PoolMethod_Name(T value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(absl::string_view name, PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  using Engine = SPPParameter_Engine;
  static constexpr Engine DEFAULT = SPPParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = SPPParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = SPPParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = SPPParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPyramidHeightFieldNumber = 1,
    kPoolFieldNumber = 2,
    kEngineFieldNumber = 6,
  };
  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  void clear_pyramid_height() ;
  ::uint32_t pyramid_height() const;
  void set_pyramid_height(::uint32_t value);

  private:
  ::uint32_t _internal_pyramid_height() const;
  void _internal_set_pyramid_height(::uint32_t value);

  public:
  // optional .opencv_caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  void clear_pool() ;
  ::opencv_caffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::opencv_caffe::SPPParameter_PoolMethod value);

  private:
  ::opencv_caffe::SPPParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::opencv_caffe::SPPParameter_PoolMethod value);

  public:
  // optional .opencv_caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::SPPParameter_Engine engine() const;
  void set_engine(::opencv_caffe::SPPParameter_Engine value);

  private:
  ::opencv_caffe::SPPParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::SPPParameter_Engine value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SPPParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t pyramid_height_;
    int pool_;
    int engine_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ReductionParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ReductionParameter) */ {
 public:
  inline ReductionParameter() : ReductionParameter(nullptr) {}
  ~ReductionParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReductionParameter(::google::protobuf::internal::ConstantInitialized);

  inline ReductionParameter(const ReductionParameter& from)
      : ReductionParameter(nullptr, from) {}
  ReductionParameter(ReductionParameter&& from) noexcept
    : ReductionParameter() {
    *this = ::std::move(from);
  }

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReductionParameter& operator=(ReductionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReductionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReductionParameter* internal_default_instance() {
    return reinterpret_cast<const ReductionParameter*>(
               &_ReductionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ReductionParameter& a, ReductionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReductionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReductionParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReductionParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReductionParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReductionParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReductionParameter& from) {
    ReductionParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReductionParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ReductionParameter";
  }
  protected:
  explicit ReductionParameter(::google::protobuf::Arena* arena);
  ReductionParameter(::google::protobuf::Arena* arena, const ReductionParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ReductionOp = ReductionParameter_ReductionOp;
  static constexpr ReductionOp SUM = ReductionParameter_ReductionOp_SUM;
  static constexpr ReductionOp ASUM = ReductionParameter_ReductionOp_ASUM;
  static constexpr ReductionOp SUMSQ = ReductionParameter_ReductionOp_SUMSQ;
  static constexpr ReductionOp MEAN = ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static constexpr ReductionOp ReductionOp_MIN = ReductionParameter_ReductionOp_ReductionOp_MIN;
  static constexpr ReductionOp ReductionOp_MAX = ReductionParameter_ReductionOp_ReductionOp_MAX;
  static constexpr int ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  template <typename T>
  static inline const std::string& ReductionOp_Name(T value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(absl::string_view name, ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 2,
    kOperationFieldNumber = 1,
    kCoeffFieldNumber = 3,
  };
  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional .opencv_caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation() ;
  ::opencv_caffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::opencv_caffe::ReductionParameter_ReductionOp value);

  private:
  ::opencv_caffe::ReductionParameter_ReductionOp _internal_operation() const;
  void _internal_set_operation(::opencv_caffe::ReductionParameter_ReductionOp value);

  public:
  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  void clear_coeff() ;
  float coeff() const;
  void set_coeff(float value);

  private:
  float _internal_coeff() const;
  void _internal_set_coeff(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ReductionParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t axis_;
    int operation_;
    float coeff_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ReLUParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ReLUParameter) */ {
 public:
  inline ReLUParameter() : ReLUParameter(nullptr) {}
  ~ReLUParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReLUParameter(::google::protobuf::internal::ConstantInitialized);

  inline ReLUParameter(const ReLUParameter& from)
      : ReLUParameter(nullptr, from) {}
  ReLUParameter(ReLUParameter&& from) noexcept
    : ReLUParameter() {
    *this = ::std::move(from);
  }

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReLUParameter& operator=(ReLUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReLUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReLUParameter* internal_default_instance() {
    return reinterpret_cast<const ReLUParameter*>(
               &_ReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ReLUParameter& a, ReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReLUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReLUParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReLUParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReLUParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReLUParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReLUParameter& from) {
    ReLUParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReLUParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ReLUParameter";
  }
  protected:
  explicit ReLUParameter(::google::protobuf::Arena* arena);
  ReLUParameter(::google::protobuf::Arena* arena, const ReLUParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Engine = ReLUParameter_Engine;
  static constexpr Engine DEFAULT = ReLUParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = ReLUParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = ReLUParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = ReLUParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeSlopeFieldNumber = 1,
    kEngineFieldNumber = 2,
  };
  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope() ;
  float negative_slope() const;
  void set_negative_slope(float value);

  private:
  float _internal_negative_slope() const;
  void _internal_set_negative_slope(float value);

  public:
  // optional .opencv_caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::ReLUParameter_Engine engine() const;
  void set_engine(::opencv_caffe::ReLUParameter_Engine value);

  private:
  ::opencv_caffe::ReLUParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::ReLUParameter_Engine value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ReLUParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float negative_slope_;
    int engine_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ROIPoolingParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ROIPoolingParameter) */ {
 public:
  inline ROIPoolingParameter() : ROIPoolingParameter(nullptr) {}
  ~ROIPoolingParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ROIPoolingParameter(::google::protobuf::internal::ConstantInitialized);

  inline ROIPoolingParameter(const ROIPoolingParameter& from)
      : ROIPoolingParameter(nullptr, from) {}
  ROIPoolingParameter(ROIPoolingParameter&& from) noexcept
    : ROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIPoolingParameter& operator=(ROIPoolingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROIPoolingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const ROIPoolingParameter*>(
               &_ROIPoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ROIPoolingParameter& a, ROIPoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIPoolingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIPoolingParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROIPoolingParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROIPoolingParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ROIPoolingParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ROIPoolingParameter& from) {
    ROIPoolingParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ROIPoolingParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ROIPoolingParameter";
  }
  protected:
  explicit ROIPoolingParameter(::google::protobuf::Arena* arena);
  ROIPoolingParameter(::google::protobuf::Arena* arena, const ROIPoolingParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPooledHFieldNumber = 1,
    kPooledWFieldNumber = 2,
    kSpatialScaleFieldNumber = 3,
  };
  // optional uint32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  void clear_pooled_h() ;
  ::uint32_t pooled_h() const;
  void set_pooled_h(::uint32_t value);

  private:
  ::uint32_t _internal_pooled_h() const;
  void _internal_set_pooled_h(::uint32_t value);

  public:
  // optional uint32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  void clear_pooled_w() ;
  ::uint32_t pooled_w() const;
  void set_pooled_w(::uint32_t value);

  private:
  ::uint32_t _internal_pooled_w() const;
  void _internal_set_pooled_w(::uint32_t value);

  public:
  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  void clear_spatial_scale() ;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  private:
  float _internal_spatial_scale() const;
  void _internal_set_spatial_scale(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ROIPoolingParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t pooled_h_;
    ::uint32_t pooled_w_;
    float spatial_scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PythonParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PythonParameter) */ {
 public:
  inline PythonParameter() : PythonParameter(nullptr) {}
  ~PythonParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PythonParameter(::google::protobuf::internal::ConstantInitialized);

  inline PythonParameter(const PythonParameter& from)
      : PythonParameter(nullptr, from) {}
  PythonParameter(PythonParameter&& from) noexcept
    : PythonParameter() {
    *this = ::std::move(from);
  }

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PythonParameter& operator=(PythonParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PythonParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PythonParameter* internal_default_instance() {
    return reinterpret_cast<const PythonParameter*>(
               &_PythonParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PythonParameter& a, PythonParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PythonParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PythonParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PythonParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PythonParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PythonParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PythonParameter& from) {
    PythonParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PythonParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PythonParameter";
  }
  protected:
  explicit PythonParameter(::google::protobuf::Arena* arena);
  PythonParameter(::google::protobuf::Arena* arena, const PythonParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kLayerFieldNumber = 2,
    kParamStrFieldNumber = 3,
    kShareInParallelFieldNumber = 4,
  };
  // optional string module = 1;
  bool has_module() const;
  void clear_module() ;
  const std::string& module() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module(Arg_&& arg, Args_... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* value);

  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(
      const std::string& value);
  std::string* _internal_mutable_module();

  public:
  // optional string layer = 2;
  bool has_layer() const;
  void clear_layer() ;
  const std::string& layer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_layer(Arg_&& arg, Args_... args);
  std::string* mutable_layer();
  PROTOBUF_NODISCARD std::string* release_layer();
  void set_allocated_layer(std::string* value);

  private:
  const std::string& _internal_layer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer(
      const std::string& value);
  std::string* _internal_mutable_layer();

  public:
  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  void clear_param_str() ;
  const std::string& param_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_param_str(Arg_&& arg, Args_... args);
  std::string* mutable_param_str();
  PROTOBUF_NODISCARD std::string* release_param_str();
  void set_allocated_param_str(std::string* value);

  private:
  const std::string& _internal_param_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_str(
      const std::string& value);
  std::string* _internal_mutable_param_str();

  public:
  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  void clear_share_in_parallel() ;
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);

  private:
  bool _internal_share_in_parallel() const;
  void _internal_set_share_in_parallel(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PythonParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr module_;
    ::google::protobuf::internal::ArenaStringPtr layer_;
    ::google::protobuf::internal::ArenaStringPtr param_str_;
    bool share_in_parallel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ProposalParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ProposalParameter) */ {
 public:
  inline ProposalParameter() : ProposalParameter(nullptr) {}
  ~ProposalParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProposalParameter(::google::protobuf::internal::ConstantInitialized);

  inline ProposalParameter(const ProposalParameter& from)
      : ProposalParameter(nullptr, from) {}
  ProposalParameter(ProposalParameter&& from) noexcept
    : ProposalParameter() {
    *this = ::std::move(from);
  }

  inline ProposalParameter& operator=(const ProposalParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalParameter& operator=(ProposalParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalParameter* internal_default_instance() {
    return reinterpret_cast<const ProposalParameter*>(
               &_ProposalParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ProposalParameter& a, ProposalParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProposalParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProposalParameter& from) {
    ProposalParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProposalParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ProposalParameter";
  }
  protected:
  explicit ProposalParameter(::google::protobuf::Arena* arena);
  ProposalParameter(::google::protobuf::Arena* arena, const ProposalParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 4,
    kScaleFieldNumber = 5,
    kFeatStrideFieldNumber = 1,
    kBaseSizeFieldNumber = 2,
    kMinSizeFieldNumber = 3,
    kPreNmsTopnFieldNumber = 6,
    kPostNmsTopnFieldNumber = 7,
    kNmsThreshFieldNumber = 8,
  };
  // repeated float ratio = 4;
  int ratio_size() const;
  private:
  int _internal_ratio_size() const;

  public:
  void clear_ratio() ;
  float ratio(int index) const;
  void set_ratio(int index, float value);
  void add_ratio(float value);
  const ::google::protobuf::RepeatedField<float>& ratio() const;
  ::google::protobuf::RepeatedField<float>* mutable_ratio();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_ratio() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_ratio();

  public:
  // repeated float scale = 5;
  int scale_size() const;
  private:
  int _internal_scale_size() const;

  public:
  void clear_scale() ;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField<float>& scale() const;
  ::google::protobuf::RepeatedField<float>* mutable_scale();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_scale() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_scale();

  public:
  // optional uint32 feat_stride = 1 [default = 16];
  bool has_feat_stride() const;
  void clear_feat_stride() ;
  ::uint32_t feat_stride() const;
  void set_feat_stride(::uint32_t value);

  private:
  ::uint32_t _internal_feat_stride() const;
  void _internal_set_feat_stride(::uint32_t value);

  public:
  // optional uint32 base_size = 2 [default = 16];
  bool has_base_size() const;
  void clear_base_size() ;
  ::uint32_t base_size() const;
  void set_base_size(::uint32_t value);

  private:
  ::uint32_t _internal_base_size() const;
  void _internal_set_base_size(::uint32_t value);

  public:
  // optional uint32 min_size = 3 [default = 16];
  bool has_min_size() const;
  void clear_min_size() ;
  ::uint32_t min_size() const;
  void set_min_size(::uint32_t value);

  private:
  ::uint32_t _internal_min_size() const;
  void _internal_set_min_size(::uint32_t value);

  public:
  // optional uint32 pre_nms_topn = 6 [default = 6000];
  bool has_pre_nms_topn() const;
  void clear_pre_nms_topn() ;
  ::uint32_t pre_nms_topn() const;
  void set_pre_nms_topn(::uint32_t value);

  private:
  ::uint32_t _internal_pre_nms_topn() const;
  void _internal_set_pre_nms_topn(::uint32_t value);

  public:
  // optional uint32 post_nms_topn = 7 [default = 300];
  bool has_post_nms_topn() const;
  void clear_post_nms_topn() ;
  ::uint32_t post_nms_topn() const;
  void set_post_nms_topn(::uint32_t value);

  private:
  ::uint32_t _internal_post_nms_topn() const;
  void _internal_set_post_nms_topn(::uint32_t value);

  public:
  // optional float nms_thresh = 8 [default = 0.7];
  bool has_nms_thresh() const;
  void clear_nms_thresh() ;
  float nms_thresh() const;
  void set_nms_thresh(float value);

  private:
  float _internal_nms_thresh() const;
  void _internal_set_nms_thresh(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ProposalParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> ratio_;
    ::google::protobuf::RepeatedField<float> scale_;
    ::uint32_t feat_stride_;
    ::uint32_t base_size_;
    ::uint32_t min_size_;
    ::uint32_t pre_nms_topn_;
    ::uint32_t post_nms_topn_;
    float nms_thresh_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PriorBoxParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PriorBoxParameter) */ {
 public:
  inline PriorBoxParameter() : PriorBoxParameter(nullptr) {}
  ~PriorBoxParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PriorBoxParameter(::google::protobuf::internal::ConstantInitialized);

  inline PriorBoxParameter(const PriorBoxParameter& from)
      : PriorBoxParameter(nullptr, from) {}
  PriorBoxParameter(PriorBoxParameter&& from) noexcept
    : PriorBoxParameter() {
    *this = ::std::move(from);
  }

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriorBoxParameter& operator=(PriorBoxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriorBoxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriorBoxParameter* internal_default_instance() {
    return reinterpret_cast<const PriorBoxParameter*>(
               &_PriorBoxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PriorBoxParameter& a, PriorBoxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PriorBoxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriorBoxParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriorBoxParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriorBoxParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PriorBoxParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PriorBoxParameter& from) {
    PriorBoxParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PriorBoxParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PriorBoxParameter";
  }
  protected:
  explicit PriorBoxParameter(::google::protobuf::Arena* arena);
  PriorBoxParameter(::google::protobuf::Arena* arena, const PriorBoxParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CodeType = PriorBoxParameter_CodeType;
  static constexpr CodeType CORNER = PriorBoxParameter_CodeType_CORNER;
  static constexpr CodeType CENTER_SIZE = PriorBoxParameter_CodeType_CENTER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static constexpr CodeType CodeType_MIN = PriorBoxParameter_CodeType_CodeType_MIN;
  static constexpr CodeType CodeType_MAX = PriorBoxParameter_CodeType_CodeType_MAX;
  static constexpr int CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  template <typename T>
  static inline const std::string& CodeType_Name(T value) {
    return PriorBoxParameter_CodeType_Name(value);
  }
  static inline bool CodeType_Parse(absl::string_view name, CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMinSizeFieldNumber = 1,
    kMaxSizeFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kVarianceFieldNumber = 6,
    kOffsetHFieldNumber = 14,
    kOffsetWFieldNumber = 15,
    kWidthFieldNumber = 16,
    kHeightFieldNumber = 17,
    kImgSizeFieldNumber = 7,
    kImgHFieldNumber = 8,
    kImgWFieldNumber = 9,
    kStepFieldNumber = 10,
    kStepHFieldNumber = 11,
    kStepWFieldNumber = 12,
    kFlipFieldNumber = 4,
    kClipFieldNumber = 5,
    kOffsetFieldNumber = 13,
  };
  // repeated float min_size = 1;
  int min_size_size() const;
  private:
  int _internal_min_size_size() const;

  public:
  void clear_min_size() ;
  float min_size(int index) const;
  void set_min_size(int index, float value);
  void add_min_size(float value);
  const ::google::protobuf::RepeatedField<float>& min_size() const;
  ::google::protobuf::RepeatedField<float>* mutable_min_size();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_min_size() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_min_size();

  public:
  // repeated float max_size = 2;
  int max_size_size() const;
  private:
  int _internal_max_size_size() const;

  public:
  void clear_max_size() ;
  float max_size(int index) const;
  void set_max_size(int index, float value);
  void add_max_size(float value);
  const ::google::protobuf::RepeatedField<float>& max_size() const;
  ::google::protobuf::RepeatedField<float>* mutable_max_size();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_max_size() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_max_size();

  public:
  // repeated float aspect_ratio = 3;
  int aspect_ratio_size() const;
  private:
  int _internal_aspect_ratio_size() const;

  public:
  void clear_aspect_ratio() ;
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::google::protobuf::RepeatedField<float>& aspect_ratio() const;
  ::google::protobuf::RepeatedField<float>* mutable_aspect_ratio();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_aspect_ratio() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_aspect_ratio();

  public:
  // repeated float variance = 6;
  int variance_size() const;
  private:
  int _internal_variance_size() const;

  public:
  void clear_variance() ;
  float variance(int index) const;
  void set_variance(int index, float value);
  void add_variance(float value);
  const ::google::protobuf::RepeatedField<float>& variance() const;
  ::google::protobuf::RepeatedField<float>* mutable_variance();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_variance() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_variance();

  public:
  // repeated float offset_h = 14;
  int offset_h_size() const;
  private:
  int _internal_offset_h_size() const;

  public:
  void clear_offset_h() ;
  float offset_h(int index) const;
  void set_offset_h(int index, float value);
  void add_offset_h(float value);
  const ::google::protobuf::RepeatedField<float>& offset_h() const;
  ::google::protobuf::RepeatedField<float>* mutable_offset_h();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_offset_h() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_offset_h();

  public:
  // repeated float offset_w = 15;
  int offset_w_size() const;
  private:
  int _internal_offset_w_size() const;

  public:
  void clear_offset_w() ;
  float offset_w(int index) const;
  void set_offset_w(int index, float value);
  void add_offset_w(float value);
  const ::google::protobuf::RepeatedField<float>& offset_w() const;
  ::google::protobuf::RepeatedField<float>* mutable_offset_w();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_offset_w() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_offset_w();

  public:
  // repeated float width = 16;
  int width_size() const;
  private:
  int _internal_width_size() const;

  public:
  void clear_width() ;
  float width(int index) const;
  void set_width(int index, float value);
  void add_width(float value);
  const ::google::protobuf::RepeatedField<float>& width() const;
  ::google::protobuf::RepeatedField<float>* mutable_width();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_width() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_width();

  public:
  // repeated float height = 17;
  int height_size() const;
  private:
  int _internal_height_size() const;

  public:
  void clear_height() ;
  float height(int index) const;
  void set_height(int index, float value);
  void add_height(float value);
  const ::google::protobuf::RepeatedField<float>& height() const;
  ::google::protobuf::RepeatedField<float>* mutable_height();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_height() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_height();

  public:
  // optional uint32 img_size = 7;
  bool has_img_size() const;
  void clear_img_size() ;
  ::uint32_t img_size() const;
  void set_img_size(::uint32_t value);

  private:
  ::uint32_t _internal_img_size() const;
  void _internal_set_img_size(::uint32_t value);

  public:
  // optional uint32 img_h = 8;
  bool has_img_h() const;
  void clear_img_h() ;
  ::uint32_t img_h() const;
  void set_img_h(::uint32_t value);

  private:
  ::uint32_t _internal_img_h() const;
  void _internal_set_img_h(::uint32_t value);

  public:
  // optional uint32 img_w = 9;
  bool has_img_w() const;
  void clear_img_w() ;
  ::uint32_t img_w() const;
  void set_img_w(::uint32_t value);

  private:
  ::uint32_t _internal_img_w() const;
  void _internal_set_img_w(::uint32_t value);

  public:
  // optional float step = 10;
  bool has_step() const;
  void clear_step() ;
  float step() const;
  void set_step(float value);

  private:
  float _internal_step() const;
  void _internal_set_step(float value);

  public:
  // optional float step_h = 11;
  bool has_step_h() const;
  void clear_step_h() ;
  float step_h() const;
  void set_step_h(float value);

  private:
  float _internal_step_h() const;
  void _internal_set_step_h(float value);

  public:
  // optional float step_w = 12;
  bool has_step_w() const;
  void clear_step_w() ;
  float step_w() const;
  void set_step_w(float value);

  private:
  float _internal_step_w() const;
  void _internal_set_step_w(float value);

  public:
  // optional bool flip = 4 [default = true];
  bool has_flip() const;
  void clear_flip() ;
  bool flip() const;
  void set_flip(bool value);

  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);

  public:
  // optional bool clip = 5 [default = true];
  bool has_clip() const;
  void clear_clip() ;
  bool clip() const;
  void set_clip(bool value);

  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);

  public:
  // optional float offset = 13 [default = 0.5];
  bool has_offset() const;
  void clear_offset() ;
  float offset() const;
  void set_offset(float value);

  private:
  float _internal_offset() const;
  void _internal_set_offset(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PriorBoxParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> min_size_;
    ::google::protobuf::RepeatedField<float> max_size_;
    ::google::protobuf::RepeatedField<float> aspect_ratio_;
    ::google::protobuf::RepeatedField<float> variance_;
    ::google::protobuf::RepeatedField<float> offset_h_;
    ::google::protobuf::RepeatedField<float> offset_w_;
    ::google::protobuf::RepeatedField<float> width_;
    ::google::protobuf::RepeatedField<float> height_;
    ::uint32_t img_size_;
    ::uint32_t img_h_;
    ::uint32_t img_w_;
    float step_;
    float step_h_;
    float step_w_;
    bool flip_;
    bool clip_;
    float offset_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PowerParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PowerParameter) */ {
 public:
  inline PowerParameter() : PowerParameter(nullptr) {}
  ~PowerParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PowerParameter(::google::protobuf::internal::ConstantInitialized);

  inline PowerParameter(const PowerParameter& from)
      : PowerParameter(nullptr, from) {}
  PowerParameter(PowerParameter&& from) noexcept
    : PowerParameter() {
    *this = ::std::move(from);
  }

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerParameter& operator=(PowerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PowerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerParameter* internal_default_instance() {
    return reinterpret_cast<const PowerParameter*>(
               &_PowerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PowerParameter& a, PowerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PowerParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PowerParameter& from) {
    PowerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PowerParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PowerParameter";
  }
  protected:
  explicit PowerParameter(::google::protobuf::Arena* arena);
  PowerParameter(::google::protobuf::Arena* arena, const PowerParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kPowerFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift() ;
  float shift() const;
  void set_shift(float value);

  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);

  public:
  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power() ;
  float power() const;
  void set_power(float value);

  private:
  float _internal_power() const;
  void _internal_set_power(float value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PowerParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float shift_;
    float power_;
    float scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PoolingParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PoolingParameter) */ {
 public:
  inline PoolingParameter() : PoolingParameter(nullptr) {}
  ~PoolingParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PoolingParameter(::google::protobuf::internal::ConstantInitialized);

  inline PoolingParameter(const PoolingParameter& from)
      : PoolingParameter(nullptr, from) {}
  PoolingParameter(PoolingParameter&& from) noexcept
    : PoolingParameter() {
    *this = ::std::move(from);
  }

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoolingParameter& operator=(PoolingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoolingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PoolingParameter*>(
               &_PoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PoolingParameter& a, PoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PoolingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoolingParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoolingParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoolingParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PoolingParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PoolingParameter& from) {
    PoolingParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PoolingParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PoolingParameter";
  }
  protected:
  explicit PoolingParameter(::google::protobuf::Arena* arena);
  PoolingParameter(::google::protobuf::Arena* arena, const PoolingParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PoolMethod = PoolingParameter_PoolMethod;
  static constexpr PoolMethod MAX = PoolingParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE = PoolingParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC = PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN = PoolingParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX = PoolingParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  template <typename T>
  static inline const std::string& PoolMethod_Name(T value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(absl::string_view name, PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  using Engine = PoolingParameter_Engine;
  static constexpr Engine DEFAULT = PoolingParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = PoolingParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = PoolingParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = PoolingParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPoolFieldNumber = 1,
    kKernelSizeFieldNumber = 2,
    kPadFieldNumber = 4,
    kKernelHFieldNumber = 5,
    kKernelWFieldNumber = 6,
    kStrideHFieldNumber = 7,
    kStrideWFieldNumber = 8,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kEngineFieldNumber = 11,
    kGlobalPoolingFieldNumber = 12,
    kStrideFieldNumber = 3,
    kCeilModeFieldNumber = 13,
  };
  // optional .opencv_caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool() ;
  ::opencv_caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::opencv_caffe::PoolingParameter_PoolMethod value);

  private:
  ::opencv_caffe::PoolingParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::opencv_caffe::PoolingParameter_PoolMethod value);

  public:
  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size() ;
  ::uint32_t kernel_size() const;
  void set_kernel_size(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_size() const;
  void _internal_set_kernel_size(::uint32_t value);

  public:
  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad() ;
  ::uint32_t pad() const;
  void set_pad(::uint32_t value);

  private:
  ::uint32_t _internal_pad() const;
  void _internal_set_pad(::uint32_t value);

  public:
  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h() ;
  ::uint32_t kernel_h() const;
  void set_kernel_h(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_h() const;
  void _internal_set_kernel_h(::uint32_t value);

  public:
  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w() ;
  ::uint32_t kernel_w() const;
  void set_kernel_w(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_w() const;
  void _internal_set_kernel_w(::uint32_t value);

  public:
  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h() ;
  ::uint32_t stride_h() const;
  void set_stride_h(::uint32_t value);

  private:
  ::uint32_t _internal_stride_h() const;
  void _internal_set_stride_h(::uint32_t value);

  public:
  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w() ;
  ::uint32_t stride_w() const;
  void set_stride_w(::uint32_t value);

  private:
  ::uint32_t _internal_stride_w() const;
  void _internal_set_stride_w(::uint32_t value);

  public:
  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h() ;
  ::uint32_t pad_h() const;
  void set_pad_h(::uint32_t value);

  private:
  ::uint32_t _internal_pad_h() const;
  void _internal_set_pad_h(::uint32_t value);

  public:
  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w() ;
  ::uint32_t pad_w() const;
  void set_pad_w(::uint32_t value);

  private:
  ::uint32_t _internal_pad_w() const;
  void _internal_set_pad_w(::uint32_t value);

  public:
  // optional .opencv_caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::PoolingParameter_Engine engine() const;
  void set_engine(::opencv_caffe::PoolingParameter_Engine value);

  private:
  ::opencv_caffe::PoolingParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::PoolingParameter_Engine value);

  public:
  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling() ;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  private:
  bool _internal_global_pooling() const;
  void _internal_set_global_pooling(bool value);

  public:
  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride() ;
  ::uint32_t stride() const;
  void set_stride(::uint32_t value);

  private:
  ::uint32_t _internal_stride() const;
  void _internal_set_stride(::uint32_t value);

  public:
  // optional bool ceil_mode = 13 [default = true];
  bool has_ceil_mode() const;
  void clear_ceil_mode() ;
  bool ceil_mode() const;
  void set_ceil_mode(bool value);

  private:
  bool _internal_ceil_mode() const;
  void _internal_set_ceil_mode(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PoolingParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int pool_;
    ::uint32_t kernel_size_;
    ::uint32_t pad_;
    ::uint32_t kernel_h_;
    ::uint32_t kernel_w_;
    ::uint32_t stride_h_;
    ::uint32_t stride_w_;
    ::uint32_t pad_h_;
    ::uint32_t pad_w_;
    int engine_;
    bool global_pooling_;
    ::uint32_t stride_;
    bool ceil_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PermuteParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PermuteParameter) */ {
 public:
  inline PermuteParameter() : PermuteParameter(nullptr) {}
  ~PermuteParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PermuteParameter(::google::protobuf::internal::ConstantInitialized);

  inline PermuteParameter(const PermuteParameter& from)
      : PermuteParameter(nullptr, from) {}
  PermuteParameter(PermuteParameter&& from) noexcept
    : PermuteParameter() {
    *this = ::std::move(from);
  }

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermuteParameter& operator=(PermuteParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermuteParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermuteParameter* internal_default_instance() {
    return reinterpret_cast<const PermuteParameter*>(
               &_PermuteParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PermuteParameter& a, PermuteParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PermuteParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermuteParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermuteParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermuteParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PermuteParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PermuteParameter& from) {
    PermuteParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PermuteParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PermuteParameter";
  }
  protected:
  explicit PermuteParameter(::google::protobuf::Arena* arena);
  PermuteParameter(::google::protobuf::Arena* arena, const PermuteParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // repeated uint32 order = 1;
  int order_size() const;
  private:
  int _internal_order_size() const;

  public:
  void clear_order() ;
  ::uint32_t order(int index) const;
  void set_order(int index, ::uint32_t value);
  void add_order(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& order() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_order();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_order() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_order();

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PermuteParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::uint32_t> order_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ParamSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ParamSpec) */ {
 public:
  inline ParamSpec() : ParamSpec(nullptr) {}
  ~ParamSpec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParamSpec(::google::protobuf::internal::ConstantInitialized);

  inline ParamSpec(const ParamSpec& from)
      : ParamSpec(nullptr, from) {}
  ParamSpec(ParamSpec&& from) noexcept
    : ParamSpec() {
    *this = ::std::move(from);
  }

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamSpec& operator=(ParamSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamSpec* internal_default_instance() {
    return reinterpret_cast<const ParamSpec*>(
               &_ParamSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ParamSpec& a, ParamSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamSpec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamSpec* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamSpec>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParamSpec& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ParamSpec& from) {
    ParamSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ParamSpec* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ParamSpec";
  }
  protected:
  explicit ParamSpec(::google::protobuf::Arena* arena);
  ParamSpec(::google::protobuf::Arena* arena, const ParamSpec& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DimCheckMode = ParamSpec_DimCheckMode;
  static constexpr DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN = ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX = ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  template <typename T>
  static inline const std::string& DimCheckMode_Name(T value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(absl::string_view name, DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShareModeFieldNumber = 2,
    kLrMultFieldNumber = 3,
    kDecayMultFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .opencv_caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode() ;
  ::opencv_caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::opencv_caffe::ParamSpec_DimCheckMode value);

  private:
  ::opencv_caffe::ParamSpec_DimCheckMode _internal_share_mode() const;
  void _internal_set_share_mode(::opencv_caffe::ParamSpec_DimCheckMode value);

  public:
  // optional float lr_mult = 3 [default = 1];
  bool has_lr_mult() const;
  void clear_lr_mult() ;
  float lr_mult() const;
  void set_lr_mult(float value);

  private:
  float _internal_lr_mult() const;
  void _internal_set_lr_mult(float value);

  public:
  // optional float decay_mult = 4 [default = 1];
  bool has_decay_mult() const;
  void clear_decay_mult() ;
  float decay_mult() const;
  void set_decay_mult(float value);

  private:
  float _internal_decay_mult() const;
  void _internal_set_decay_mult(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ParamSpec)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int share_mode_;
    float lr_mult_;
    float decay_mult_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PSROIPoolingParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PSROIPoolingParameter) */ {
 public:
  inline PSROIPoolingParameter() : PSROIPoolingParameter(nullptr) {}
  ~PSROIPoolingParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PSROIPoolingParameter(::google::protobuf::internal::ConstantInitialized);

  inline PSROIPoolingParameter(const PSROIPoolingParameter& from)
      : PSROIPoolingParameter(nullptr, from) {}
  PSROIPoolingParameter(PSROIPoolingParameter&& from) noexcept
    : PSROIPoolingParameter() {
    *this = ::std::move(from);
  }

  inline PSROIPoolingParameter& operator=(const PSROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSROIPoolingParameter& operator=(PSROIPoolingParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PSROIPoolingParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PSROIPoolingParameter* internal_default_instance() {
    return reinterpret_cast<const PSROIPoolingParameter*>(
               &_PSROIPoolingParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(PSROIPoolingParameter& a, PSROIPoolingParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PSROIPoolingParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSROIPoolingParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PSROIPoolingParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PSROIPoolingParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PSROIPoolingParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PSROIPoolingParameter& from) {
    PSROIPoolingParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PSROIPoolingParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PSROIPoolingParameter";
  }
  protected:
  explicit PSROIPoolingParameter(::google::protobuf::Arena* arena);
  PSROIPoolingParameter(::google::protobuf::Arena* arena, const PSROIPoolingParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialScaleFieldNumber = 1,
    kOutputDimFieldNumber = 2,
    kGroupSizeFieldNumber = 3,
  };
  // required float spatial_scale = 1;
  bool has_spatial_scale() const;
  void clear_spatial_scale() ;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  private:
  float _internal_spatial_scale() const;
  void _internal_set_spatial_scale(float value);

  public:
  // required int32 output_dim = 2;
  bool has_output_dim() const;
  void clear_output_dim() ;
  ::int32_t output_dim() const;
  void set_output_dim(::int32_t value);

  private:
  ::int32_t _internal_output_dim() const;
  void _internal_set_output_dim(::int32_t value);

  public:
  // required int32 group_size = 3;
  bool has_group_size() const;
  void clear_group_size() ;
  ::int32_t group_size() const;
  void set_group_size(::int32_t value);

  private:
  ::int32_t _internal_group_size() const;
  void _internal_set_group_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PSROIPoolingParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float spatial_scale_;
    ::int32_t output_dim_;
    ::int32_t group_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NormalizedBBox final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NormalizedBBox) */ {
 public:
  inline NormalizedBBox() : NormalizedBBox(nullptr) {}
  ~NormalizedBBox() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NormalizedBBox(::google::protobuf::internal::ConstantInitialized);

  inline NormalizedBBox(const NormalizedBBox& from)
      : NormalizedBBox(nullptr, from) {}
  NormalizedBBox(NormalizedBBox&& from) noexcept
    : NormalizedBBox() {
    *this = ::std::move(from);
  }

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizedBBox& operator=(NormalizedBBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NormalizedBBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizedBBox* internal_default_instance() {
    return reinterpret_cast<const NormalizedBBox*>(
               &_NormalizedBBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(NormalizedBBox& a, NormalizedBBox& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizedBBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizedBBox* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalizedBBox* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalizedBBox>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NormalizedBBox& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NormalizedBBox& from) {
    NormalizedBBox::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NormalizedBBox* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NormalizedBBox";
  }
  protected:
  explicit NormalizedBBox(::google::protobuf::Arena* arena);
  NormalizedBBox(::google::protobuf::Arena* arena, const NormalizedBBox& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
    kLabelFieldNumber = 5,
    kDifficultFieldNumber = 6,
    kScoreFieldNumber = 7,
    kSizeFieldNumber = 8,
  };
  // optional float xmin = 1;
  bool has_xmin() const;
  void clear_xmin() ;
  float xmin() const;
  void set_xmin(float value);

  private:
  float _internal_xmin() const;
  void _internal_set_xmin(float value);

  public:
  // optional float ymin = 2;
  bool has_ymin() const;
  void clear_ymin() ;
  float ymin() const;
  void set_ymin(float value);

  private:
  float _internal_ymin() const;
  void _internal_set_ymin(float value);

  public:
  // optional float xmax = 3;
  bool has_xmax() const;
  void clear_xmax() ;
  float xmax() const;
  void set_xmax(float value);

  private:
  float _internal_xmax() const;
  void _internal_set_xmax(float value);

  public:
  // optional float ymax = 4;
  bool has_ymax() const;
  void clear_ymax() ;
  float ymax() const;
  void set_ymax(float value);

  private:
  float _internal_ymax() const;
  void _internal_set_ymax(float value);

  public:
  // optional int32 label = 5;
  bool has_label() const;
  void clear_label() ;
  ::int32_t label() const;
  void set_label(::int32_t value);

  private:
  ::int32_t _internal_label() const;
  void _internal_set_label(::int32_t value);

  public:
  // optional bool difficult = 6;
  bool has_difficult() const;
  void clear_difficult() ;
  bool difficult() const;
  void set_difficult(bool value);

  private:
  bool _internal_difficult() const;
  void _internal_set_difficult(bool value);

  public:
  // optional float score = 7;
  bool has_score() const;
  void clear_score() ;
  float score() const;
  void set_score(float value);

  private:
  float _internal_score() const;
  void _internal_set_score(float value);

  public:
  // optional float size = 8;
  bool has_size() const;
  void clear_size() ;
  float size() const;
  void set_size(float value);

  private:
  float _internal_size() const;
  void _internal_set_size(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NormalizedBBox)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float xmin_;
    float ymin_;
    float xmax_;
    float ymax_;
    ::int32_t label_;
    bool difficult_;
    float score_;
    float size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NonMaximumSuppressionParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NonMaximumSuppressionParameter) */ {
 public:
  inline NonMaximumSuppressionParameter() : NonMaximumSuppressionParameter(nullptr) {}
  ~NonMaximumSuppressionParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NonMaximumSuppressionParameter(::google::protobuf::internal::ConstantInitialized);

  inline NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from)
      : NonMaximumSuppressionParameter(nullptr, from) {}
  NonMaximumSuppressionParameter(NonMaximumSuppressionParameter&& from) noexcept
    : NonMaximumSuppressionParameter() {
    *this = ::std::move(from);
  }

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonMaximumSuppressionParameter& operator=(NonMaximumSuppressionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonMaximumSuppressionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonMaximumSuppressionParameter* internal_default_instance() {
    return reinterpret_cast<const NonMaximumSuppressionParameter*>(
               &_NonMaximumSuppressionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NonMaximumSuppressionParameter& a, NonMaximumSuppressionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonMaximumSuppressionParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonMaximumSuppressionParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonMaximumSuppressionParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NonMaximumSuppressionParameter& from) {
    NonMaximumSuppressionParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NonMaximumSuppressionParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NonMaximumSuppressionParameter";
  }
  protected:
  explicit NonMaximumSuppressionParameter(::google::protobuf::Arena* arena);
  NonMaximumSuppressionParameter(::google::protobuf::Arena* arena, const NonMaximumSuppressionParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopKFieldNumber = 2,
    kNmsThresholdFieldNumber = 1,
    kEtaFieldNumber = 3,
  };
  // optional int32 top_k = 2;
  bool has_top_k() const;
  void clear_top_k() ;
  ::int32_t top_k() const;
  void set_top_k(::int32_t value);

  private:
  ::int32_t _internal_top_k() const;
  void _internal_set_top_k(::int32_t value);

  public:
  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  void clear_nms_threshold() ;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  private:
  float _internal_nms_threshold() const;
  void _internal_set_nms_threshold(float value);

  public:
  // optional float eta = 3 [default = 1];
  bool has_eta() const;
  void clear_eta() ;
  float eta() const;
  void set_eta(float value);

  private:
  float _internal_eta() const;
  void _internal_set_eta(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NonMaximumSuppressionParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t top_k_;
    float nms_threshold_;
    float eta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NetStateRule final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NetStateRule) */ {
 public:
  inline NetStateRule() : NetStateRule(nullptr) {}
  ~NetStateRule() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetStateRule(::google::protobuf::internal::ConstantInitialized);

  inline NetStateRule(const NetStateRule& from)
      : NetStateRule(nullptr, from) {}
  NetStateRule(NetStateRule&& from) noexcept
    : NetStateRule() {
    *this = ::std::move(from);
  }

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetStateRule& operator=(NetStateRule&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetStateRule& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetStateRule* internal_default_instance() {
    return reinterpret_cast<const NetStateRule*>(
               &_NetStateRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NetStateRule& a, NetStateRule& b) {
    a.Swap(&b);
  }
  inline void Swap(NetStateRule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetStateRule* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetStateRule* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetStateRule>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetStateRule& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NetStateRule& from) {
    NetStateRule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NetStateRule* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NetStateRule";
  }
  protected:
  explicit NetStateRule(::google::protobuf::Arena* arena);
  NetStateRule(::google::protobuf::Arena* arena, const NetStateRule& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 4,
    kNotStageFieldNumber = 5,
    kPhaseFieldNumber = 1,
    kMinLevelFieldNumber = 2,
    kMaxLevelFieldNumber = 3,
  };
  // repeated string stage = 4;
  int stage_size() const;
  private:
  int _internal_stage_size() const;

  public:
  void clear_stage() ;
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, std::size_t size);
  void set_stage(int index, absl::string_view value);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, std::size_t size);
  void add_stage(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_stage();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_stage();

  public:
  // repeated string not_stage = 5;
  int not_stage_size() const;
  private:
  int _internal_not_stage_size() const;

  public:
  void clear_not_stage() ;
  const std::string& not_stage(int index) const;
  std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const std::string& value);
  void set_not_stage(int index, std::string&& value);
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, std::size_t size);
  void set_not_stage(int index, absl::string_view value);
  std::string* add_not_stage();
  void add_not_stage(const std::string& value);
  void add_not_stage(std::string&& value);
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, std::size_t size);
  void add_not_stage(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_not_stage();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_not_stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_not_stage();

  public:
  // optional .opencv_caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase() ;
  ::opencv_caffe::Phase phase() const;
  void set_phase(::opencv_caffe::Phase value);

  private:
  ::opencv_caffe::Phase _internal_phase() const;
  void _internal_set_phase(::opencv_caffe::Phase value);

  public:
  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level() ;
  ::int32_t min_level() const;
  void set_min_level(::int32_t value);

  private:
  ::int32_t _internal_min_level() const;
  void _internal_set_min_level(::int32_t value);

  public:
  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level() ;
  ::int32_t max_level() const;
  void set_max_level(::int32_t value);

  private:
  ::int32_t _internal_max_level() const;
  void _internal_set_max_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NetStateRule)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> stage_;
    ::google::protobuf::RepeatedPtrField<std::string> not_stage_;
    int phase_;
    ::int32_t min_level_;
    ::int32_t max_level_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NetState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NetState) */ {
 public:
  inline NetState() : NetState(nullptr) {}
  ~NetState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetState(::google::protobuf::internal::ConstantInitialized);

  inline NetState(const NetState& from)
      : NetState(nullptr, from) {}
  NetState(NetState&& from) noexcept
    : NetState() {
    *this = ::std::move(from);
  }

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetState& operator=(NetState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetState& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetState* internal_default_instance() {
    return reinterpret_cast<const NetState*>(
               &_NetState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NetState& a, NetState& b) {
    a.Swap(&b);
  }
  inline void Swap(NetState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NetState& from) {
    NetState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NetState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NetState";
  }
  protected:
  explicit NetState(::google::protobuf::Arena* arena);
  NetState(::google::protobuf::Arena* arena, const NetState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 3,
    kLevelFieldNumber = 2,
    kPhaseFieldNumber = 1,
  };
  // repeated string stage = 3;
  int stage_size() const;
  private:
  int _internal_stage_size() const;

  public:
  void clear_stage() ;
  const std::string& stage(int index) const;
  std::string* mutable_stage(int index);
  void set_stage(int index, const std::string& value);
  void set_stage(int index, std::string&& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, std::size_t size);
  void set_stage(int index, absl::string_view value);
  std::string* add_stage();
  void add_stage(const std::string& value);
  void add_stage(std::string&& value);
  void add_stage(const char* value);
  void add_stage(const char* value, std::size_t size);
  void add_stage(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_stage();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_stage() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_stage();

  public:
  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // optional .opencv_caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase() ;
  ::opencv_caffe::Phase phase() const;
  void set_phase(::opencv_caffe::Phase value);

  private:
  ::opencv_caffe::Phase _internal_phase() const;
  void _internal_set_phase(::opencv_caffe::Phase value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NetState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      35, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> stage_;
    ::int32_t level_;
    int phase_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class MemoryDataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.MemoryDataParameter) */ {
 public:
  inline MemoryDataParameter() : MemoryDataParameter(nullptr) {}
  ~MemoryDataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryDataParameter(::google::protobuf::internal::ConstantInitialized);

  inline MemoryDataParameter(const MemoryDataParameter& from)
      : MemoryDataParameter(nullptr, from) {}
  MemoryDataParameter(MemoryDataParameter&& from) noexcept
    : MemoryDataParameter() {
    *this = ::std::move(from);
  }

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDataParameter& operator=(MemoryDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryDataParameter* internal_default_instance() {
    return reinterpret_cast<const MemoryDataParameter*>(
               &_MemoryDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MemoryDataParameter& a, MemoryDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryDataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryDataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MemoryDataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryDataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MemoryDataParameter& from) {
    MemoryDataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MemoryDataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.MemoryDataParameter";
  }
  protected:
  explicit MemoryDataParameter(::google::protobuf::Arena* arena);
  MemoryDataParameter(::google::protobuf::Arena* arena, const MemoryDataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatchSizeFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
  };
  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::uint32_t batch_size() const;
  void set_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(::uint32_t value);

  public:
  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels() ;
  ::uint32_t channels() const;
  void set_channels(::uint32_t value);

  private:
  ::uint32_t _internal_channels() const;
  void _internal_set_channels(::uint32_t value);

  public:
  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.MemoryDataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t batch_size_;
    ::uint32_t channels_;
    ::uint32_t height_;
    ::uint32_t width_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class MVNParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.MVNParameter) */ {
 public:
  inline MVNParameter() : MVNParameter(nullptr) {}
  ~MVNParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MVNParameter(::google::protobuf::internal::ConstantInitialized);

  inline MVNParameter(const MVNParameter& from)
      : MVNParameter(nullptr, from) {}
  MVNParameter(MVNParameter&& from) noexcept
    : MVNParameter() {
    *this = ::std::move(from);
  }

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MVNParameter& operator=(MVNParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MVNParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MVNParameter* internal_default_instance() {
    return reinterpret_cast<const MVNParameter*>(
               &_MVNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MVNParameter& a, MVNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MVNParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MVNParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MVNParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MVNParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MVNParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MVNParameter& from) {
    MVNParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MVNParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.MVNParameter";
  }
  protected:
  explicit MVNParameter(::google::protobuf::Arena* arena);
  MVNParameter(::google::protobuf::Arena* arena, const MVNParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcrossChannelsFieldNumber = 2,
    kNormalizeVarianceFieldNumber = 1,
    kEpsFieldNumber = 3,
  };
  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels() ;
  bool across_channels() const;
  void set_across_channels(bool value);

  private:
  bool _internal_across_channels() const;
  void _internal_set_across_channels(bool value);

  public:
  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance() ;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  private:
  bool _internal_normalize_variance() const;
  void _internal_set_normalize_variance(bool value);

  public:
  // optional float eps = 3 [default = 1e-09];
  bool has_eps() const;
  void clear_eps() ;
  float eps() const;
  void set_eps(float value);

  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.MVNParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool across_channels_;
    bool normalize_variance_;
    float eps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class LossParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.LossParameter) */ {
 public:
  inline LossParameter() : LossParameter(nullptr) {}
  ~LossParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LossParameter(::google::protobuf::internal::ConstantInitialized);

  inline LossParameter(const LossParameter& from)
      : LossParameter(nullptr, from) {}
  LossParameter(LossParameter&& from) noexcept
    : LossParameter() {
    *this = ::std::move(from);
  }

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossParameter& operator=(LossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LossParameter* internal_default_instance() {
    return reinterpret_cast<const LossParameter*>(
               &_LossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LossParameter& a, LossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LossParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LossParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LossParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LossParameter& from) {
    LossParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LossParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.LossParameter";
  }
  protected:
  explicit LossParameter(::google::protobuf::Arena* arena);
  LossParameter(::google::protobuf::Arena* arena, const LossParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using NormalizationMode = LossParameter_NormalizationMode;
  static constexpr NormalizationMode FULL = LossParameter_NormalizationMode_FULL;
  static constexpr NormalizationMode VALID = LossParameter_NormalizationMode_VALID;
  static constexpr NormalizationMode BATCH_SIZE = LossParameter_NormalizationMode_BATCH_SIZE;
  static constexpr NormalizationMode NONE = LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static constexpr NormalizationMode NormalizationMode_MIN = LossParameter_NormalizationMode_NormalizationMode_MIN;
  static constexpr NormalizationMode NormalizationMode_MAX = LossParameter_NormalizationMode_NormalizationMode_MAX;
  static constexpr int NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  template <typename T>
  static inline const std::string& NormalizationMode_Name(T value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(absl::string_view name, NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 1,
    kNormalizeFieldNumber = 2,
    kNormalizationFieldNumber = 3,
  };
  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label() ;
  ::int32_t ignore_label() const;
  void set_ignore_label(::int32_t value);

  private:
  ::int32_t _internal_ignore_label() const;
  void _internal_set_ignore_label(::int32_t value);

  public:
  // optional bool normalize = 2;
  bool has_normalize() const;
  void clear_normalize() ;
  bool normalize() const;
  void set_normalize(bool value);

  private:
  bool _internal_normalize() const;
  void _internal_set_normalize(bool value);

  public:
  // optional .opencv_caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  void clear_normalization() ;
  ::opencv_caffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::opencv_caffe::LossParameter_NormalizationMode value);

  private:
  ::opencv_caffe::LossParameter_NormalizationMode _internal_normalization() const;
  void _internal_set_normalization(::opencv_caffe::LossParameter_NormalizationMode value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.LossParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t ignore_label_;
    bool normalize_;
    int normalization_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class LogParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.LogParameter) */ {
 public:
  inline LogParameter() : LogParameter(nullptr) {}
  ~LogParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogParameter(::google::protobuf::internal::ConstantInitialized);

  inline LogParameter(const LogParameter& from)
      : LogParameter(nullptr, from) {}
  LogParameter(LogParameter&& from) noexcept
    : LogParameter() {
    *this = ::std::move(from);
  }

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogParameter& operator=(LogParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogParameter* internal_default_instance() {
    return reinterpret_cast<const LogParameter*>(
               &_LogParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(LogParameter& a, LogParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LogParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogParameter& from) {
    LogParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.LogParameter";
  }
  protected:
  explicit LogParameter(::google::protobuf::Arena* arena);
  LogParameter(::google::protobuf::Arena* arena, const LogParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift() ;
  float shift() const;
  void set_shift(float value);

  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);

  public:
  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base() ;
  float base() const;
  void set_base(float value);

  private:
  float _internal_base() const;
  void _internal_set_base(float value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.LogParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float shift_;
    float base_;
    float scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class LRNParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.LRNParameter) */ {
 public:
  inline LRNParameter() : LRNParameter(nullptr) {}
  ~LRNParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LRNParameter(::google::protobuf::internal::ConstantInitialized);

  inline LRNParameter(const LRNParameter& from)
      : LRNParameter(nullptr, from) {}
  LRNParameter(LRNParameter&& from) noexcept
    : LRNParameter() {
    *this = ::std::move(from);
  }

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LRNParameter& operator=(LRNParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LRNParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LRNParameter* internal_default_instance() {
    return reinterpret_cast<const LRNParameter*>(
               &_LRNParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(LRNParameter& a, LRNParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LRNParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LRNParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LRNParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LRNParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LRNParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LRNParameter& from) {
    LRNParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LRNParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.LRNParameter";
  }
  protected:
  explicit LRNParameter(::google::protobuf::Arena* arena);
  LRNParameter(::google::protobuf::Arena* arena, const LRNParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using NormRegion = LRNParameter_NormRegion;
  static constexpr NormRegion ACROSS_CHANNELS = LRNParameter_NormRegion_ACROSS_CHANNELS;
  static constexpr NormRegion WITHIN_CHANNEL = LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static constexpr NormRegion NormRegion_MIN = LRNParameter_NormRegion_NormRegion_MIN;
  static constexpr NormRegion NormRegion_MAX = LRNParameter_NormRegion_NormRegion_MAX;
  static constexpr int NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  template <typename T>
  static inline const std::string& NormRegion_Name(T value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(absl::string_view name, NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  using Engine = LRNParameter_Engine;
  static constexpr Engine DEFAULT = LRNParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = LRNParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = LRNParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = LRNParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormRegionFieldNumber = 4,
    kEngineFieldNumber = 6,
    kLocalSizeFieldNumber = 1,
    kAlphaFieldNumber = 2,
    kBetaFieldNumber = 3,
    kKFieldNumber = 5,
  };
  // optional .opencv_caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region() ;
  ::opencv_caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::opencv_caffe::LRNParameter_NormRegion value);

  private:
  ::opencv_caffe::LRNParameter_NormRegion _internal_norm_region() const;
  void _internal_set_norm_region(::opencv_caffe::LRNParameter_NormRegion value);

  public:
  // optional .opencv_caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::LRNParameter_Engine engine() const;
  void set_engine(::opencv_caffe::LRNParameter_Engine value);

  private:
  ::opencv_caffe::LRNParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::LRNParameter_Engine value);

  public:
  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size() ;
  ::uint32_t local_size() const;
  void set_local_size(::uint32_t value);

  private:
  ::uint32_t _internal_local_size() const;
  void _internal_set_local_size(::uint32_t value);

  public:
  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha() ;
  float alpha() const;
  void set_alpha(float value);

  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);

  public:
  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta() ;
  float beta() const;
  void set_beta(float value);

  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);

  public:
  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k() ;
  float k() const;
  void set_k(float value);

  private:
  float _internal_k() const;
  void _internal_set_k(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.LRNParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int norm_region_;
    int engine_;
    ::uint32_t local_size_;
    float alpha_;
    float beta_;
    float k_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class InfogainLossParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.InfogainLossParameter) */ {
 public:
  inline InfogainLossParameter() : InfogainLossParameter(nullptr) {}
  ~InfogainLossParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InfogainLossParameter(::google::protobuf::internal::ConstantInitialized);

  inline InfogainLossParameter(const InfogainLossParameter& from)
      : InfogainLossParameter(nullptr, from) {}
  InfogainLossParameter(InfogainLossParameter&& from) noexcept
    : InfogainLossParameter() {
    *this = ::std::move(from);
  }

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfogainLossParameter& operator=(InfogainLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfogainLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfogainLossParameter* internal_default_instance() {
    return reinterpret_cast<const InfogainLossParameter*>(
               &_InfogainLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(InfogainLossParameter& a, InfogainLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InfogainLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfogainLossParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfogainLossParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfogainLossParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InfogainLossParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InfogainLossParameter& from) {
    InfogainLossParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InfogainLossParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.InfogainLossParameter";
  }
  protected:
  explicit InfogainLossParameter(::google::protobuf::Arena* arena);
  InfogainLossParameter(::google::protobuf::Arena* arena, const InfogainLossParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.InfogainLossParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ImageDataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ImageDataParameter) */ {
 public:
  inline ImageDataParameter() : ImageDataParameter(nullptr) {}
  ~ImageDataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ImageDataParameter(::google::protobuf::internal::ConstantInitialized);

  inline ImageDataParameter(const ImageDataParameter& from)
      : ImageDataParameter(nullptr, from) {}
  ImageDataParameter(ImageDataParameter&& from) noexcept
    : ImageDataParameter() {
    *this = ::std::move(from);
  }

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageDataParameter& operator=(ImageDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageDataParameter* internal_default_instance() {
    return reinterpret_cast<const ImageDataParameter*>(
               &_ImageDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ImageDataParameter& a, ImageDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageDataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageDataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageDataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageDataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ImageDataParameter& from) {
    ImageDataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ImageDataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ImageDataParameter";
  }
  protected:
  explicit ImageDataParameter(::google::protobuf::Arena* arena);
  ImageDataParameter(::google::protobuf::Arena* arena, const ImageDataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kRootFolderFieldNumber = 12,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kShuffleFieldNumber = 8,
    kMirrorFieldNumber = 6,
    kNewHeightFieldNumber = 9,
    kNewWidthFieldNumber = 10,
    kIsColorFieldNumber = 11,
    kScaleFieldNumber = 2,
    kBatchSizeFieldNumber = 4,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file() ;
  const std::string& mean_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mean_file(Arg_&& arg, Args_... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* value);

  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(
      const std::string& value);
  std::string* _internal_mutable_mean_file();

  public:
  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder() ;
  const std::string& root_folder() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_folder(Arg_&& arg, Args_... args);
  std::string* mutable_root_folder();
  PROTOBUF_NODISCARD std::string* release_root_folder();
  void set_allocated_root_folder(std::string* value);

  private:
  const std::string& _internal_root_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_folder(
      const std::string& value);
  std::string* _internal_mutable_root_folder();

  public:
  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size() ;
  ::uint32_t crop_size() const;
  void set_crop_size(::uint32_t value);

  private:
  ::uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(::uint32_t value);

  public:
  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip() ;
  ::uint32_t rand_skip() const;
  void set_rand_skip(::uint32_t value);

  private:
  ::uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(::uint32_t value);

  public:
  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle() ;
  bool shuffle() const;
  void set_shuffle(bool value);

  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);

  public:
  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror() ;
  bool mirror() const;
  void set_mirror(bool value);

  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);

  public:
  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height() ;
  ::uint32_t new_height() const;
  void set_new_height(::uint32_t value);

  private:
  ::uint32_t _internal_new_height() const;
  void _internal_set_new_height(::uint32_t value);

  public:
  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width() ;
  ::uint32_t new_width() const;
  void set_new_width(::uint32_t value);

  private:
  ::uint32_t _internal_new_width() const;
  void _internal_set_new_width(::uint32_t value);

  public:
  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color() ;
  bool is_color() const;
  void set_is_color(bool value);

  private:
  bool _internal_is_color() const;
  void _internal_set_is_color(bool value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::uint32_t batch_size() const;
  void set_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ImageDataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      74, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr mean_file_;
    ::google::protobuf::internal::ArenaStringPtr root_folder_;
    ::uint32_t crop_size_;
    ::uint32_t rand_skip_;
    bool shuffle_;
    bool mirror_;
    ::uint32_t new_height_;
    ::uint32_t new_width_;
    bool is_color_;
    float scale_;
    ::uint32_t batch_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class HingeLossParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.HingeLossParameter) */ {
 public:
  inline HingeLossParameter() : HingeLossParameter(nullptr) {}
  ~HingeLossParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HingeLossParameter(::google::protobuf::internal::ConstantInitialized);

  inline HingeLossParameter(const HingeLossParameter& from)
      : HingeLossParameter(nullptr, from) {}
  HingeLossParameter(HingeLossParameter&& from) noexcept
    : HingeLossParameter() {
    *this = ::std::move(from);
  }

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HingeLossParameter& operator=(HingeLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HingeLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HingeLossParameter* internal_default_instance() {
    return reinterpret_cast<const HingeLossParameter*>(
               &_HingeLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(HingeLossParameter& a, HingeLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HingeLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HingeLossParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HingeLossParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HingeLossParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HingeLossParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HingeLossParameter& from) {
    HingeLossParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HingeLossParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.HingeLossParameter";
  }
  protected:
  explicit HingeLossParameter(::google::protobuf::Arena* arena);
  HingeLossParameter(::google::protobuf::Arena* arena, const HingeLossParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Norm = HingeLossParameter_Norm;
  static constexpr Norm L1 = HingeLossParameter_Norm_L1;
  static constexpr Norm L2 = HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static constexpr Norm Norm_MIN = HingeLossParameter_Norm_Norm_MIN;
  static constexpr Norm Norm_MAX = HingeLossParameter_Norm_Norm_MAX;
  static constexpr int Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  template <typename T>
  static inline const std::string& Norm_Name(T value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(absl::string_view name, Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNormFieldNumber = 1,
  };
  // optional .opencv_caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm() ;
  ::opencv_caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::opencv_caffe::HingeLossParameter_Norm value);

  private:
  ::opencv_caffe::HingeLossParameter_Norm _internal_norm() const;
  void _internal_set_norm(::opencv_caffe::HingeLossParameter_Norm value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.HingeLossParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int norm_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class HDF5OutputParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.HDF5OutputParameter) */ {
 public:
  inline HDF5OutputParameter() : HDF5OutputParameter(nullptr) {}
  ~HDF5OutputParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HDF5OutputParameter(::google::protobuf::internal::ConstantInitialized);

  inline HDF5OutputParameter(const HDF5OutputParameter& from)
      : HDF5OutputParameter(nullptr, from) {}
  HDF5OutputParameter(HDF5OutputParameter&& from) noexcept
    : HDF5OutputParameter() {
    *this = ::std::move(from);
  }

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5OutputParameter& operator=(HDF5OutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HDF5OutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HDF5OutputParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5OutputParameter*>(
               &_HDF5OutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(HDF5OutputParameter& a, HDF5OutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5OutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5OutputParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HDF5OutputParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HDF5OutputParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HDF5OutputParameter& from) {
    HDF5OutputParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HDF5OutputParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.HDF5OutputParameter";
  }
  protected:
  explicit HDF5OutputParameter(::google::protobuf::Arena* arena);
  HDF5OutputParameter(::google::protobuf::Arena* arena, const HDF5OutputParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.HDF5OutputParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class HDF5DataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.HDF5DataParameter) */ {
 public:
  inline HDF5DataParameter() : HDF5DataParameter(nullptr) {}
  ~HDF5DataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HDF5DataParameter(::google::protobuf::internal::ConstantInitialized);

  inline HDF5DataParameter(const HDF5DataParameter& from)
      : HDF5DataParameter(nullptr, from) {}
  HDF5DataParameter(HDF5DataParameter&& from) noexcept
    : HDF5DataParameter() {
    *this = ::std::move(from);
  }

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline HDF5DataParameter& operator=(HDF5DataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HDF5DataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const HDF5DataParameter* internal_default_instance() {
    return reinterpret_cast<const HDF5DataParameter*>(
               &_HDF5DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(HDF5DataParameter& a, HDF5DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(HDF5DataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HDF5DataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HDF5DataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HDF5DataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HDF5DataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HDF5DataParameter& from) {
    HDF5DataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HDF5DataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.HDF5DataParameter";
  }
  protected:
  explicit HDF5DataParameter(::google::protobuf::Arena* arena);
  HDF5DataParameter(::google::protobuf::Arena* arena, const HDF5DataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kBatchSizeFieldNumber = 2,
    kShuffleFieldNumber = 3,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::uint32_t batch_size() const;
  void set_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(::uint32_t value);

  public:
  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle() ;
  bool shuffle() const;
  void set_shuffle(bool value);

  private:
  bool _internal_shuffle() const;
  void _internal_set_shuffle(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.HDF5DataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::uint32_t batch_size_;
    bool shuffle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class FlattenParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.FlattenParameter) */ {
 public:
  inline FlattenParameter() : FlattenParameter(nullptr) {}
  ~FlattenParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlattenParameter(::google::protobuf::internal::ConstantInitialized);

  inline FlattenParameter(const FlattenParameter& from)
      : FlattenParameter(nullptr, from) {}
  FlattenParameter(FlattenParameter&& from) noexcept
    : FlattenParameter() {
    *this = ::std::move(from);
  }

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlattenParameter& operator=(FlattenParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlattenParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlattenParameter* internal_default_instance() {
    return reinterpret_cast<const FlattenParameter*>(
               &_FlattenParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FlattenParameter& a, FlattenParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FlattenParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlattenParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlattenParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlattenParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlattenParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlattenParameter& from) {
    FlattenParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlattenParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.FlattenParameter";
  }
  protected:
  explicit FlattenParameter(::google::protobuf::Arena* arena);
  FlattenParameter(::google::protobuf::Arena* arena, const FlattenParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kEndAxisFieldNumber = 2,
  };
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  void clear_end_axis() ;
  ::int32_t end_axis() const;
  void set_end_axis(::int32_t value);

  private:
  ::int32_t _internal_end_axis() const;
  void _internal_set_end_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.FlattenParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t axis_;
    ::int32_t end_axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class FillerParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.FillerParameter) */ {
 public:
  inline FillerParameter() : FillerParameter(nullptr) {}
  ~FillerParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FillerParameter(::google::protobuf::internal::ConstantInitialized);

  inline FillerParameter(const FillerParameter& from)
      : FillerParameter(nullptr, from) {}
  FillerParameter(FillerParameter&& from) noexcept
    : FillerParameter() {
    *this = ::std::move(from);
  }

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FillerParameter& operator=(FillerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FillerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const FillerParameter* internal_default_instance() {
    return reinterpret_cast<const FillerParameter*>(
               &_FillerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FillerParameter& a, FillerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FillerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FillerParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FillerParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FillerParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FillerParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FillerParameter& from) {
    FillerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FillerParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.FillerParameter";
  }
  protected:
  explicit FillerParameter(::google::protobuf::Arena* arena);
  FillerParameter(::google::protobuf::Arena* arena, const FillerParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using VarianceNorm = FillerParameter_VarianceNorm;
  static constexpr VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static constexpr VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static constexpr VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static constexpr VarianceNorm VarianceNorm_MIN = FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static constexpr VarianceNorm VarianceNorm_MAX = FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static constexpr int VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  template <typename T>
  static inline const std::string& VarianceNorm_Name(T value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(absl::string_view name, VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
    kMinFieldNumber = 3,
    kMeanFieldNumber = 5,
    kVarianceNormFieldNumber = 8,
    kSparseFieldNumber = 7,
    kMaxFieldNumber = 4,
    kStdFieldNumber = 6,
  };
  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min() ;
  float min() const;
  void set_min(float value);

  private:
  float _internal_min() const;
  void _internal_set_min(float value);

  public:
  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean() ;
  float mean() const;
  void set_mean(float value);

  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);

  public:
  // optional .opencv_caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  void clear_variance_norm() ;
  ::opencv_caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::opencv_caffe::FillerParameter_VarianceNorm value);

  private:
  ::opencv_caffe::FillerParameter_VarianceNorm _internal_variance_norm() const;
  void _internal_set_variance_norm(::opencv_caffe::FillerParameter_VarianceNorm value);

  public:
  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse() ;
  ::int32_t sparse() const;
  void set_sparse(::int32_t value);

  private:
  ::int32_t _internal_sparse() const;
  void _internal_set_sparse(::int32_t value);

  public:
  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max() ;
  float max() const;
  void set_max(float value);

  private:
  float _internal_max() const;
  void _internal_set_max(float value);

  public:
  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std() ;
  float std() const;
  void set_std(float value);

  private:
  float _internal_std() const;
  void _internal_set_std(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.FillerParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_type_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    float value_;
    float min_;
    float mean_;
    int variance_norm_;
    ::int32_t sparse_;
    float max_;
    float std_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ExpParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ExpParameter) */ {
 public:
  inline ExpParameter() : ExpParameter(nullptr) {}
  ~ExpParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExpParameter(::google::protobuf::internal::ConstantInitialized);

  inline ExpParameter(const ExpParameter& from)
      : ExpParameter(nullptr, from) {}
  ExpParameter(ExpParameter&& from) noexcept
    : ExpParameter() {
    *this = ::std::move(from);
  }

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpParameter& operator=(ExpParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExpParameter* internal_default_instance() {
    return reinterpret_cast<const ExpParameter*>(
               &_ExpParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ExpParameter& a, ExpParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExpParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExpParameter& from) {
    ExpParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExpParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ExpParameter";
  }
  protected:
  explicit ExpParameter(::google::protobuf::Arena* arena);
  ExpParameter(::google::protobuf::Arena* arena, const ExpParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftFieldNumber = 3,
    kBaseFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift() ;
  float shift() const;
  void set_shift(float value);

  private:
  float _internal_shift() const;
  void _internal_set_shift(float value);

  public:
  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base() ;
  float base() const;
  void set_base(float value);

  private:
  float _internal_base() const;
  void _internal_set_base(float value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ExpParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float shift_;
    float base_;
    float scale_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class EltwiseParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.EltwiseParameter) */ {
 public:
  inline EltwiseParameter() : EltwiseParameter(nullptr) {}
  ~EltwiseParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EltwiseParameter(::google::protobuf::internal::ConstantInitialized);

  inline EltwiseParameter(const EltwiseParameter& from)
      : EltwiseParameter(nullptr, from) {}
  EltwiseParameter(EltwiseParameter&& from) noexcept
    : EltwiseParameter() {
    *this = ::std::move(from);
  }

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EltwiseParameter& operator=(EltwiseParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EltwiseParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const EltwiseParameter* internal_default_instance() {
    return reinterpret_cast<const EltwiseParameter*>(
               &_EltwiseParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(EltwiseParameter& a, EltwiseParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EltwiseParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EltwiseParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EltwiseParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EltwiseParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EltwiseParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EltwiseParameter& from) {
    EltwiseParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EltwiseParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.EltwiseParameter";
  }
  protected:
  explicit EltwiseParameter(::google::protobuf::Arena* arena);
  EltwiseParameter(::google::protobuf::Arena* arena, const EltwiseParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using EltwiseOp = EltwiseParameter_EltwiseOp;
  static constexpr EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static constexpr EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static constexpr EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static constexpr EltwiseOp EltwiseOp_MIN = EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static constexpr EltwiseOp EltwiseOp_MAX = EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static constexpr int EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  template <typename T>
  static inline const std::string& EltwiseOp_Name(T value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(absl::string_view name, EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffFieldNumber = 2,
    kOperationFieldNumber = 1,
    kStableProdGradFieldNumber = 3,
  };
  // repeated float coeff = 2;
  int coeff_size() const;
  private:
  int _internal_coeff_size() const;

  public:
  void clear_coeff() ;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField<float>& coeff() const;
  ::google::protobuf::RepeatedField<float>* mutable_coeff();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_coeff() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_coeff();

  public:
  // optional .opencv_caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation() ;
  ::opencv_caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::opencv_caffe::EltwiseParameter_EltwiseOp value);

  private:
  ::opencv_caffe::EltwiseParameter_EltwiseOp _internal_operation() const;
  void _internal_set_operation(::opencv_caffe::EltwiseParameter_EltwiseOp value);

  public:
  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad() ;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  private:
  bool _internal_stable_prod_grad() const;
  void _internal_set_stable_prod_grad(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.EltwiseParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> coeff_;
    int operation_;
    bool stable_prod_grad_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ELUParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ELUParameter) */ {
 public:
  inline ELUParameter() : ELUParameter(nullptr) {}
  ~ELUParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ELUParameter(::google::protobuf::internal::ConstantInitialized);

  inline ELUParameter(const ELUParameter& from)
      : ELUParameter(nullptr, from) {}
  ELUParameter(ELUParameter&& from) noexcept
    : ELUParameter() {
    *this = ::std::move(from);
  }

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ELUParameter& operator=(ELUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ELUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ELUParameter* internal_default_instance() {
    return reinterpret_cast<const ELUParameter*>(
               &_ELUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ELUParameter& a, ELUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ELUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ELUParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ELUParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ELUParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ELUParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ELUParameter& from) {
    ELUParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ELUParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ELUParameter";
  }
  protected:
  explicit ELUParameter(::google::protobuf::Arena* arena);
  ELUParameter(::google::protobuf::Arena* arena, const ELUParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
  };
  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha() ;
  float alpha() const;
  void set_alpha(float value);

  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ELUParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float alpha_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class DropoutParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.DropoutParameter) */ {
 public:
  inline DropoutParameter() : DropoutParameter(nullptr) {}
  ~DropoutParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DropoutParameter(::google::protobuf::internal::ConstantInitialized);

  inline DropoutParameter(const DropoutParameter& from)
      : DropoutParameter(nullptr, from) {}
  DropoutParameter(DropoutParameter&& from) noexcept
    : DropoutParameter() {
    *this = ::std::move(from);
  }

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropoutParameter& operator=(DropoutParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropoutParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropoutParameter* internal_default_instance() {
    return reinterpret_cast<const DropoutParameter*>(
               &_DropoutParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DropoutParameter& a, DropoutParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DropoutParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropoutParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropoutParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropoutParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DropoutParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DropoutParameter& from) {
    DropoutParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DropoutParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.DropoutParameter";
  }
  protected:
  explicit DropoutParameter(::google::protobuf::Arena* arena);
  DropoutParameter(::google::protobuf::Arena* arena, const DropoutParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropoutRatioFieldNumber = 1,
    kScaleTrainFieldNumber = 2,
  };
  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio() ;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);

  public:
  // optional bool scale_train = 2 [default = true];
  bool has_scale_train() const;
  void clear_scale_train() ;
  bool scale_train() const;
  void set_scale_train(bool value);

  private:
  bool _internal_scale_train() const;
  void _internal_set_scale_train(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.DropoutParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float dropout_ratio_;
    bool scale_train_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class Datum final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.Datum) */ {
 public:
  inline Datum() : Datum(nullptr) {}
  ~Datum() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Datum(::google::protobuf::internal::ConstantInitialized);

  inline Datum(const Datum& from)
      : Datum(nullptr, from) {}
  Datum(Datum&& from) noexcept
    : Datum() {
    *this = ::std::move(from);
  }

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Datum& operator=(Datum&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Datum& default_instance() {
    return *internal_default_instance();
  }
  static inline const Datum* internal_default_instance() {
    return reinterpret_cast<const Datum*>(
               &_Datum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Datum& a, Datum& b) {
    a.Swap(&b);
  }
  inline void Swap(Datum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Datum* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Datum* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Datum>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Datum& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Datum& from) {
    Datum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Datum* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.Datum";
  }
  protected:
  explicit Datum(::google::protobuf::Arena* arena);
  Datum(::google::protobuf::Arena* arena, const Datum& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatDataFieldNumber = 6,
    kDataFieldNumber = 4,
    kChannelsFieldNumber = 1,
    kHeightFieldNumber = 2,
    kWidthFieldNumber = 3,
    kLabelFieldNumber = 5,
    kEncodedFieldNumber = 7,
  };
  // repeated float float_data = 6;
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;

  public:
  void clear_float_data() ;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField<float>& float_data() const;
  ::google::protobuf::RepeatedField<float>* mutable_float_data();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_float_data() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_float_data();

  public:
  // optional bytes data = 4;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels() ;
  ::int32_t channels() const;
  void set_channels(::int32_t value);

  private:
  ::int32_t _internal_channels() const;
  void _internal_set_channels(::int32_t value);

  public:
  // optional int32 height = 2;
  bool has_height() const;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // optional int32 width = 3;
  bool has_width() const;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // optional int32 label = 5;
  bool has_label() const;
  void clear_label() ;
  ::int32_t label() const;
  void set_label(::int32_t value);

  private:
  ::int32_t _internal_label() const;
  void _internal_set_label(::int32_t value);

  public:
  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded() ;
  bool encoded() const;
  void set_encoded(bool value);

  private:
  bool _internal_encoded() const;
  void _internal_set_encoded(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.Datum)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> float_data_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::int32_t channels_;
    ::int32_t height_;
    ::int32_t width_;
    ::int32_t label_;
    bool encoded_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class DataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.DataParameter) */ {
 public:
  inline DataParameter() : DataParameter(nullptr) {}
  ~DataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DataParameter(::google::protobuf::internal::ConstantInitialized);

  inline DataParameter(const DataParameter& from)
      : DataParameter(nullptr, from) {}
  DataParameter(DataParameter&& from) noexcept
    : DataParameter() {
    *this = ::std::move(from);
  }

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataParameter& operator=(DataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataParameter* internal_default_instance() {
    return reinterpret_cast<const DataParameter*>(
               &_DataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DataParameter& a, DataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DataParameter& from) {
    DataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.DataParameter";
  }
  protected:
  explicit DataParameter(::google::protobuf::Arena* arena);
  DataParameter(::google::protobuf::Arena* arena, const DataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DB = DataParameter_DB;
  static constexpr DB LEVELDB = DataParameter_DB_LEVELDB;
  static constexpr DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static constexpr DB DB_MIN = DataParameter_DB_DB_MIN;
  static constexpr DB DB_MAX = DataParameter_DB_DB_MAX;
  static constexpr int DB_ARRAYSIZE = DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  template <typename T>
  static inline const std::string& DB_Name(T value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(absl::string_view name, DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kMeanFileFieldNumber = 3,
    kBatchSizeFieldNumber = 4,
    kCropSizeFieldNumber = 5,
    kRandSkipFieldNumber = 7,
    kMirrorFieldNumber = 6,
    kForceEncodedColorFieldNumber = 9,
    kBackendFieldNumber = 8,
    kScaleFieldNumber = 2,
    kPrefetchFieldNumber = 10,
  };
  // optional string source = 1;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file() ;
  const std::string& mean_file() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mean_file(Arg_&& arg, Args_... args);
  std::string* mutable_mean_file();
  PROTOBUF_NODISCARD std::string* release_mean_file();
  void set_allocated_mean_file(std::string* value);

  private:
  const std::string& _internal_mean_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mean_file(
      const std::string& value);
  std::string* _internal_mutable_mean_file();

  public:
  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size() ;
  ::uint32_t batch_size() const;
  void set_batch_size(::uint32_t value);

  private:
  ::uint32_t _internal_batch_size() const;
  void _internal_set_batch_size(::uint32_t value);

  public:
  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size() ;
  ::uint32_t crop_size() const;
  void set_crop_size(::uint32_t value);

  private:
  ::uint32_t _internal_crop_size() const;
  void _internal_set_crop_size(::uint32_t value);

  public:
  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip() ;
  ::uint32_t rand_skip() const;
  void set_rand_skip(::uint32_t value);

  private:
  ::uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(::uint32_t value);

  public:
  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror() ;
  bool mirror() const;
  void set_mirror(bool value);

  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);

  public:
  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  void clear_force_encoded_color() ;
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);

  private:
  bool _internal_force_encoded_color() const;
  void _internal_set_force_encoded_color(bool value);

  public:
  // optional .opencv_caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend() ;
  ::opencv_caffe::DataParameter_DB backend() const;
  void set_backend(::opencv_caffe::DataParameter_DB value);

  private:
  ::opencv_caffe::DataParameter_DB _internal_backend() const;
  void _internal_set_backend(::opencv_caffe::DataParameter_DB value);

  public:
  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  void clear_prefetch() ;
  ::uint32_t prefetch() const;
  void set_prefetch(::uint32_t value);

  private:
  ::uint32_t _internal_prefetch() const;
  void _internal_set_prefetch(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.DataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr mean_file_;
    ::uint32_t batch_size_;
    ::uint32_t crop_size_;
    ::uint32_t rand_skip_;
    bool mirror_;
    bool force_encoded_color_;
    int backend_;
    float scale_;
    ::uint32_t prefetch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class CropParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.CropParameter) */ {
 public:
  inline CropParameter() : CropParameter(nullptr) {}
  ~CropParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CropParameter(::google::protobuf::internal::ConstantInitialized);

  inline CropParameter(const CropParameter& from)
      : CropParameter(nullptr, from) {}
  CropParameter(CropParameter&& from) noexcept
    : CropParameter() {
    *this = ::std::move(from);
  }

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CropParameter& operator=(CropParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CropParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CropParameter* internal_default_instance() {
    return reinterpret_cast<const CropParameter*>(
               &_CropParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CropParameter& a, CropParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(CropParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CropParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CropParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CropParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CropParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CropParameter& from) {
    CropParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CropParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.CropParameter";
  }
  protected:
  explicit CropParameter(::google::protobuf::Arena* arena);
  CropParameter(::google::protobuf::Arena* arena, const CropParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kAxisFieldNumber = 1,
  };
  // repeated uint32 offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;

  public:
  void clear_offset() ;
  ::uint32_t offset(int index) const;
  void set_offset(int index, ::uint32_t value);
  void add_offset(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& offset() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_offset();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_offset() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_offset();

  public:
  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.CropParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> offset_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ContrastiveLossParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ContrastiveLossParameter) */ {
 public:
  inline ContrastiveLossParameter() : ContrastiveLossParameter(nullptr) {}
  ~ContrastiveLossParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ContrastiveLossParameter(::google::protobuf::internal::ConstantInitialized);

  inline ContrastiveLossParameter(const ContrastiveLossParameter& from)
      : ContrastiveLossParameter(nullptr, from) {}
  ContrastiveLossParameter(ContrastiveLossParameter&& from) noexcept
    : ContrastiveLossParameter() {
    *this = ::std::move(from);
  }

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContrastiveLossParameter& operator=(ContrastiveLossParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContrastiveLossParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContrastiveLossParameter* internal_default_instance() {
    return reinterpret_cast<const ContrastiveLossParameter*>(
               &_ContrastiveLossParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ContrastiveLossParameter& a, ContrastiveLossParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ContrastiveLossParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContrastiveLossParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContrastiveLossParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContrastiveLossParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ContrastiveLossParameter& from) {
    ContrastiveLossParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ContrastiveLossParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ContrastiveLossParameter";
  }
  protected:
  explicit ContrastiveLossParameter(::google::protobuf::Arena* arena);
  ContrastiveLossParameter(::google::protobuf::Arena* arena, const ContrastiveLossParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyVersionFieldNumber = 2,
    kMarginFieldNumber = 1,
  };
  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  void clear_legacy_version() ;
  bool legacy_version() const;
  void set_legacy_version(bool value);

  private:
  bool _internal_legacy_version() const;
  void _internal_set_legacy_version(bool value);

  public:
  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin() ;
  float margin() const;
  void set_margin(float value);

  private:
  float _internal_margin() const;
  void _internal_set_margin(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ContrastiveLossParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool legacy_version_;
    float margin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ConcatParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ConcatParameter) */ {
 public:
  inline ConcatParameter() : ConcatParameter(nullptr) {}
  ~ConcatParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConcatParameter(::google::protobuf::internal::ConstantInitialized);

  inline ConcatParameter(const ConcatParameter& from)
      : ConcatParameter(nullptr, from) {}
  ConcatParameter(ConcatParameter&& from) noexcept
    : ConcatParameter() {
    *this = ::std::move(from);
  }

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConcatParameter& operator=(ConcatParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConcatParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConcatParameter* internal_default_instance() {
    return reinterpret_cast<const ConcatParameter*>(
               &_ConcatParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ConcatParameter& a, ConcatParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConcatParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConcatParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConcatParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConcatParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConcatParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConcatParameter& from) {
    ConcatParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConcatParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ConcatParameter";
  }
  protected:
  explicit ConcatParameter(::google::protobuf::Arena* arena);
  ConcatParameter(::google::protobuf::Arena* arena, const ConcatParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcatDimFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim() ;
  ::uint32_t concat_dim() const;
  void set_concat_dim(::uint32_t value);

  private:
  ::uint32_t _internal_concat_dim() const;
  void _internal_set_concat_dim(::uint32_t value);

  public:
  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ConcatParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t concat_dim_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class BlobShape final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.BlobShape) */ {
 public:
  inline BlobShape() : BlobShape(nullptr) {}
  ~BlobShape() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlobShape(::google::protobuf::internal::ConstantInitialized);

  inline BlobShape(const BlobShape& from)
      : BlobShape(nullptr, from) {}
  BlobShape(BlobShape&& from) noexcept
    : BlobShape() {
    *this = ::std::move(from);
  }

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobShape& operator=(BlobShape&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobShape* internal_default_instance() {
    return reinterpret_cast<const BlobShape*>(
               &_BlobShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlobShape& a, BlobShape& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobShape* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobShape* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobShape* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobShape>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlobShape& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlobShape& from) {
    BlobShape::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlobShape* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.BlobShape";
  }
  protected:
  explicit BlobShape(::google::protobuf::Arena* arena);
  BlobShape(::google::protobuf::Arena* arena, const BlobShape& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  private:
  int _internal_dim_size() const;

  public:
  void clear_dim() ;
  ::int64_t dim(int index) const;
  void set_dim(int index, ::int64_t value);
  void add_dim(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& dim() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_dim();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_dim() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_dim();

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.BlobShape)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> dim_;
    mutable ::google::protobuf::internal::CachedSize _dim_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class BatchNormParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.BatchNormParameter) */ {
 public:
  inline BatchNormParameter() : BatchNormParameter(nullptr) {}
  ~BatchNormParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BatchNormParameter(::google::protobuf::internal::ConstantInitialized);

  inline BatchNormParameter(const BatchNormParameter& from)
      : BatchNormParameter(nullptr, from) {}
  BatchNormParameter(BatchNormParameter&& from) noexcept
    : BatchNormParameter() {
    *this = ::std::move(from);
  }

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchNormParameter& operator=(BatchNormParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchNormParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchNormParameter* internal_default_instance() {
    return reinterpret_cast<const BatchNormParameter*>(
               &_BatchNormParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BatchNormParameter& a, BatchNormParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchNormParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchNormParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchNormParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchNormParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BatchNormParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BatchNormParameter& from) {
    BatchNormParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BatchNormParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.BatchNormParameter";
  }
  protected:
  explicit BatchNormParameter(::google::protobuf::Arena* arena);
  BatchNormParameter(::google::protobuf::Arena* arena, const BatchNormParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseGlobalStatsFieldNumber = 1,
    kScaleBiasFieldNumber = 7,
    kMovingAverageFractionFieldNumber = 2,
    kEpsFieldNumber = 3,
  };
  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats() ;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  private:
  bool _internal_use_global_stats() const;
  void _internal_set_use_global_stats(bool value);

  public:
  // optional bool scale_bias = 7 [default = false];
  bool has_scale_bias() const;
  void clear_scale_bias() ;
  bool scale_bias() const;
  void set_scale_bias(bool value);

  private:
  bool _internal_scale_bias() const;
  void _internal_set_scale_bias(bool value);

  public:
  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction() ;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  private:
  float _internal_moving_average_fraction() const;
  void _internal_set_moving_average_fraction(float value);

  public:
  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  void clear_eps() ;
  float eps() const;
  void set_eps(float value);

  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.BatchNormParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool use_global_stats_;
    bool scale_bias_;
    float moving_average_fraction_;
    float eps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ArgMaxParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ArgMaxParameter) */ {
 public:
  inline ArgMaxParameter() : ArgMaxParameter(nullptr) {}
  ~ArgMaxParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ArgMaxParameter(::google::protobuf::internal::ConstantInitialized);

  inline ArgMaxParameter(const ArgMaxParameter& from)
      : ArgMaxParameter(nullptr, from) {}
  ArgMaxParameter(ArgMaxParameter&& from) noexcept
    : ArgMaxParameter() {
    *this = ::std::move(from);
  }

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArgMaxParameter& operator=(ArgMaxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArgMaxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArgMaxParameter* internal_default_instance() {
    return reinterpret_cast<const ArgMaxParameter*>(
               &_ArgMaxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ArgMaxParameter& a, ArgMaxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ArgMaxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArgMaxParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArgMaxParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArgMaxParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ArgMaxParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ArgMaxParameter& from) {
    ArgMaxParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ArgMaxParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ArgMaxParameter";
  }
  protected:
  explicit ArgMaxParameter(::google::protobuf::Arena* arena);
  ArgMaxParameter(::google::protobuf::Arena* arena, const ArgMaxParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutMaxValFieldNumber = 1,
    kAxisFieldNumber = 3,
    kTopKFieldNumber = 2,
  };
  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val() ;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  private:
  bool _internal_out_max_val() const;
  void _internal_set_out_max_val(bool value);

  public:
  // optional int32 axis = 3;
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k() ;
  ::uint32_t top_k() const;
  void set_top_k(::uint32_t value);

  private:
  ::uint32_t _internal_top_k() const;
  void _internal_set_top_k(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ArgMaxParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool out_max_val_;
    ::int32_t axis_;
    ::uint32_t top_k_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class AccuracyParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.AccuracyParameter) */ {
 public:
  inline AccuracyParameter() : AccuracyParameter(nullptr) {}
  ~AccuracyParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccuracyParameter(::google::protobuf::internal::ConstantInitialized);

  inline AccuracyParameter(const AccuracyParameter& from)
      : AccuracyParameter(nullptr, from) {}
  AccuracyParameter(AccuracyParameter&& from) noexcept
    : AccuracyParameter() {
    *this = ::std::move(from);
  }

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccuracyParameter& operator=(AccuracyParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccuracyParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccuracyParameter* internal_default_instance() {
    return reinterpret_cast<const AccuracyParameter*>(
               &_AccuracyParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AccuracyParameter& a, AccuracyParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AccuracyParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccuracyParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccuracyParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccuracyParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccuracyParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AccuracyParameter& from) {
    AccuracyParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AccuracyParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.AccuracyParameter";
  }
  protected:
  explicit AccuracyParameter(::google::protobuf::Arena* arena);
  AccuracyParameter(::google::protobuf::Arena* arena, const AccuracyParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreLabelFieldNumber = 3,
    kTopKFieldNumber = 1,
    kAxisFieldNumber = 2,
  };
  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  void clear_ignore_label() ;
  ::int32_t ignore_label() const;
  void set_ignore_label(::int32_t value);

  private:
  ::int32_t _internal_ignore_label() const;
  void _internal_set_ignore_label(::int32_t value);

  public:
  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k() ;
  ::uint32_t top_k() const;
  void set_top_k(::uint32_t value);

  private:
  ::uint32_t _internal_top_k() const;
  void _internal_set_top_k(::uint32_t value);

  public:
  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.AccuracyParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t ignore_label_;
    ::uint32_t top_k_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ScaleParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ScaleParameter) */ {
 public:
  inline ScaleParameter() : ScaleParameter(nullptr) {}
  ~ScaleParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ScaleParameter(::google::protobuf::internal::ConstantInitialized);

  inline ScaleParameter(const ScaleParameter& from)
      : ScaleParameter(nullptr, from) {}
  ScaleParameter(ScaleParameter&& from) noexcept
    : ScaleParameter() {
    *this = ::std::move(from);
  }

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScaleParameter& operator=(ScaleParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScaleParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScaleParameter* internal_default_instance() {
    return reinterpret_cast<const ScaleParameter*>(
               &_ScaleParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ScaleParameter& a, ScaleParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ScaleParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScaleParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScaleParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScaleParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScaleParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ScaleParameter& from) {
    ScaleParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScaleParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ScaleParameter";
  }
  protected:
  explicit ScaleParameter(::google::protobuf::Arena* arena);
  ScaleParameter(::google::protobuf::Arena* arena, const ScaleParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 5,
    kBiasTermFieldNumber = 4,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .opencv_caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler() ;
  const ::opencv_caffe::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_filler();
  ::opencv_caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  void clear_bias_term() ;
  bool bias_term() const;
  void set_bias_term(bool value);

  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);

  public:
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes() ;
  ::int32_t num_axes() const;
  void set_num_axes(::int32_t value);

  private:
  ::int32_t _internal_num_axes() const;
  void _internal_set_num_axes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ScaleParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    bool bias_term_;
    ::int32_t axis_;
    ::int32_t num_axes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ReshapeParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ReshapeParameter) */ {
 public:
  inline ReshapeParameter() : ReshapeParameter(nullptr) {}
  ~ReshapeParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReshapeParameter(::google::protobuf::internal::ConstantInitialized);

  inline ReshapeParameter(const ReshapeParameter& from)
      : ReshapeParameter(nullptr, from) {}
  ReshapeParameter(ReshapeParameter&& from) noexcept
    : ReshapeParameter() {
    *this = ::std::move(from);
  }

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReshapeParameter& operator=(ReshapeParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReshapeParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReshapeParameter* internal_default_instance() {
    return reinterpret_cast<const ReshapeParameter*>(
               &_ReshapeParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ReshapeParameter& a, ReshapeParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ReshapeParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReshapeParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReshapeParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReshapeParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReshapeParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReshapeParameter& from) {
    ReshapeParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReshapeParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ReshapeParameter";
  }
  protected:
  explicit ReshapeParameter(::google::protobuf::Arena* arena);
  ReshapeParameter(::google::protobuf::Arena* arena, const ReshapeParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
    kAxisFieldNumber = 2,
    kNumAxesFieldNumber = 3,
  };
  // optional .opencv_caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape() ;
  const ::opencv_caffe::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::opencv_caffe::BlobShape* release_shape();
  ::opencv_caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::opencv_caffe::BlobShape* value);
  void unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value);
  ::opencv_caffe::BlobShape* unsafe_arena_release_shape();

  private:
  const ::opencv_caffe::BlobShape& _internal_shape() const;
  ::opencv_caffe::BlobShape* _internal_mutable_shape();

  public:
  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  void clear_num_axes() ;
  ::int32_t num_axes() const;
  void set_num_axes(::int32_t value);

  private:
  ::int32_t _internal_num_axes() const;
  void _internal_set_num_axes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ReshapeParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::BlobShape* shape_;
    ::int32_t axis_;
    ::int32_t num_axes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class RecurrentParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.RecurrentParameter) */ {
 public:
  inline RecurrentParameter() : RecurrentParameter(nullptr) {}
  ~RecurrentParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RecurrentParameter(::google::protobuf::internal::ConstantInitialized);

  inline RecurrentParameter(const RecurrentParameter& from)
      : RecurrentParameter(nullptr, from) {}
  RecurrentParameter(RecurrentParameter&& from) noexcept
    : RecurrentParameter() {
    *this = ::std::move(from);
  }

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecurrentParameter& operator=(RecurrentParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecurrentParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecurrentParameter* internal_default_instance() {
    return reinterpret_cast<const RecurrentParameter*>(
               &_RecurrentParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(RecurrentParameter& a, RecurrentParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RecurrentParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecurrentParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecurrentParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecurrentParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecurrentParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RecurrentParameter& from) {
    RecurrentParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RecurrentParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.RecurrentParameter";
  }
  protected:
  explicit RecurrentParameter(::google::protobuf::Arena* arena);
  RecurrentParameter(::google::protobuf::Arena* arena, const RecurrentParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 2,
    kBiasFillerFieldNumber = 3,
    kNumOutputFieldNumber = 1,
    kDebugInfoFieldNumber = 4,
    kExposeHiddenFieldNumber = 5,
  };
  // optional .opencv_caffe.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  void clear_weight_filler() ;
  const ::opencv_caffe::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_weight_filler();
  ::opencv_caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_weight_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_weight_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_weight_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional uint32 num_output = 1 [default = 0];
  bool has_num_output() const;
  void clear_num_output() ;
  ::uint32_t num_output() const;
  void set_num_output(::uint32_t value);

  private:
  ::uint32_t _internal_num_output() const;
  void _internal_set_num_output(::uint32_t value);

  public:
  // optional bool debug_info = 4 [default = false];
  bool has_debug_info() const;
  void clear_debug_info() ;
  bool debug_info() const;
  void set_debug_info(bool value);

  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);

  public:
  // optional bool expose_hidden = 5 [default = false];
  bool has_expose_hidden() const;
  void clear_expose_hidden() ;
  bool expose_hidden() const;
  void set_expose_hidden(bool value);

  private:
  bool _internal_expose_hidden() const;
  void _internal_set_expose_hidden(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.RecurrentParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* weight_filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    ::uint32_t num_output_;
    bool debug_info_;
    bool expose_hidden_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ParameterParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ParameterParameter) */ {
 public:
  inline ParameterParameter() : ParameterParameter(nullptr) {}
  ~ParameterParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParameterParameter(::google::protobuf::internal::ConstantInitialized);

  inline ParameterParameter(const ParameterParameter& from)
      : ParameterParameter(nullptr, from) {}
  ParameterParameter(ParameterParameter&& from) noexcept
    : ParameterParameter() {
    *this = ::std::move(from);
  }

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterParameter& operator=(ParameterParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterParameter* internal_default_instance() {
    return reinterpret_cast<const ParameterParameter*>(
               &_ParameterParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ParameterParameter& a, ParameterParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ParameterParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ParameterParameter& from) {
    ParameterParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ParameterParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ParameterParameter";
  }
  protected:
  explicit ParameterParameter(::google::protobuf::Arena* arena);
  ParameterParameter(::google::protobuf::Arena* arena, const ParameterParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // optional .opencv_caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape() ;
  const ::opencv_caffe::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::opencv_caffe::BlobShape* release_shape();
  ::opencv_caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::opencv_caffe::BlobShape* value);
  void unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value);
  ::opencv_caffe::BlobShape* unsafe_arena_release_shape();

  private:
  const ::opencv_caffe::BlobShape& _internal_shape() const;
  ::opencv_caffe::BlobShape* _internal_mutable_shape();

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ParameterParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::BlobShape* shape_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class PReLUParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.PReLUParameter) */ {
 public:
  inline PReLUParameter() : PReLUParameter(nullptr) {}
  ~PReLUParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PReLUParameter(::google::protobuf::internal::ConstantInitialized);

  inline PReLUParameter(const PReLUParameter& from)
      : PReLUParameter(nullptr, from) {}
  PReLUParameter(PReLUParameter&& from) noexcept
    : PReLUParameter() {
    *this = ::std::move(from);
  }

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PReLUParameter& operator=(PReLUParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PReLUParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PReLUParameter* internal_default_instance() {
    return reinterpret_cast<const PReLUParameter*>(
               &_PReLUParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(PReLUParameter& a, PReLUParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(PReLUParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PReLUParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PReLUParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PReLUParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PReLUParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PReLUParameter& from) {
    PReLUParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PReLUParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.PReLUParameter";
  }
  protected:
  explicit PReLUParameter(::google::protobuf::Arena* arena);
  PReLUParameter(::google::protobuf::Arena* arena, const PReLUParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 1,
    kChannelSharedFieldNumber = 2,
  };
  // optional .opencv_caffe.FillerParameter filler = 1;
  bool has_filler() const;
  void clear_filler() ;
  const ::opencv_caffe::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_filler();
  ::opencv_caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_filler();

  public:
  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared() ;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.PReLUParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* filler_;
    bool channel_shared_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NormalizeBBoxParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NormalizeBBoxParameter) */ {
 public:
  inline NormalizeBBoxParameter() : NormalizeBBoxParameter(nullptr) {}
  ~NormalizeBBoxParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NormalizeBBoxParameter(::google::protobuf::internal::ConstantInitialized);

  inline NormalizeBBoxParameter(const NormalizeBBoxParameter& from)
      : NormalizeBBoxParameter(nullptr, from) {}
  NormalizeBBoxParameter(NormalizeBBoxParameter&& from) noexcept
    : NormalizeBBoxParameter() {
    *this = ::std::move(from);
  }

  inline NormalizeBBoxParameter& operator=(const NormalizeBBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizeBBoxParameter& operator=(NormalizeBBoxParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NormalizeBBoxParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NormalizeBBoxParameter* internal_default_instance() {
    return reinterpret_cast<const NormalizeBBoxParameter*>(
               &_NormalizeBBoxParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NormalizeBBoxParameter& a, NormalizeBBoxParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizeBBoxParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizeBBoxParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NormalizeBBoxParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NormalizeBBoxParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NormalizeBBoxParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NormalizeBBoxParameter& from) {
    NormalizeBBoxParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NormalizeBBoxParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NormalizeBBoxParameter";
  }
  protected:
  explicit NormalizeBBoxParameter(::google::protobuf::Arena* arena);
  NormalizeBBoxParameter(::google::protobuf::Arena* arena, const NormalizeBBoxParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFillerFieldNumber = 2,
    kAcrossSpatialFieldNumber = 1,
    kChannelSharedFieldNumber = 3,
    kEpsFieldNumber = 4,
  };
  // optional .opencv_caffe.FillerParameter scale_filler = 2;
  bool has_scale_filler() const;
  void clear_scale_filler() ;
  const ::opencv_caffe::FillerParameter& scale_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_scale_filler();
  ::opencv_caffe::FillerParameter* mutable_scale_filler();
  void set_allocated_scale_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_scale_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_scale_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_scale_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_scale_filler();

  public:
  // optional bool across_spatial = 1 [default = true];
  bool has_across_spatial() const;
  void clear_across_spatial() ;
  bool across_spatial() const;
  void set_across_spatial(bool value);

  private:
  bool _internal_across_spatial() const;
  void _internal_set_across_spatial(bool value);

  public:
  // optional bool channel_shared = 3 [default = true];
  bool has_channel_shared() const;
  void clear_channel_shared() ;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  private:
  bool _internal_channel_shared() const;
  void _internal_set_channel_shared(bool value);

  public:
  // optional float eps = 4 [default = 1e-10];
  bool has_eps() const;
  void clear_eps() ;
  float eps() const;
  void set_eps(float value);

  private:
  float _internal_eps() const;
  void _internal_set_eps(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NormalizeBBoxParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* scale_filler_;
    bool across_spatial_;
    bool channel_shared_;
    float eps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class InputParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.InputParameter) */ {
 public:
  inline InputParameter() : InputParameter(nullptr) {}
  ~InputParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InputParameter(::google::protobuf::internal::ConstantInitialized);

  inline InputParameter(const InputParameter& from)
      : InputParameter(nullptr, from) {}
  InputParameter(InputParameter&& from) noexcept
    : InputParameter() {
    *this = ::std::move(from);
  }

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputParameter& operator=(InputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputParameter* internal_default_instance() {
    return reinterpret_cast<const InputParameter*>(
               &_InputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(InputParameter& a, InputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InputParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InputParameter& from) {
    InputParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InputParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.InputParameter";
  }
  protected:
  explicit InputParameter(::google::protobuf::Arena* arena);
  InputParameter(::google::protobuf::Arena* arena, const InputParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 1,
  };
  // repeated .opencv_caffe.BlobShape shape = 1;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::opencv_caffe::BlobShape* mutable_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >*
      mutable_shape();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& _internal_shape() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* _internal_mutable_shape();
  public:
  const ::opencv_caffe::BlobShape& shape(int index) const;
  ::opencv_caffe::BlobShape* add_shape();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >&
      shape() const;
  // @@protoc_insertion_point(class_scope:opencv_caffe.InputParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape > shape_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class InnerProductParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.InnerProductParameter) */ {
 public:
  inline InnerProductParameter() : InnerProductParameter(nullptr) {}
  ~InnerProductParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InnerProductParameter(::google::protobuf::internal::ConstantInitialized);

  inline InnerProductParameter(const InnerProductParameter& from)
      : InnerProductParameter(nullptr, from) {}
  InnerProductParameter(InnerProductParameter&& from) noexcept
    : InnerProductParameter() {
    *this = ::std::move(from);
  }

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerProductParameter& operator=(InnerProductParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerProductParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerProductParameter* internal_default_instance() {
    return reinterpret_cast<const InnerProductParameter*>(
               &_InnerProductParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(InnerProductParameter& a, InnerProductParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerProductParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerProductParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerProductParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerProductParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InnerProductParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InnerProductParameter& from) {
    InnerProductParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InnerProductParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.InnerProductParameter";
  }
  protected:
  explicit InnerProductParameter(::google::protobuf::Arena* arena);
  InnerProductParameter(::google::protobuf::Arena* arena, const InnerProductParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 3,
    kBiasFillerFieldNumber = 4,
    kNumOutputFieldNumber = 1,
    kTransposeFieldNumber = 6,
    kBiasTermFieldNumber = 2,
    kAxisFieldNumber = 5,
  };
  // optional .opencv_caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler() ;
  const ::opencv_caffe::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_weight_filler();
  ::opencv_caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_weight_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_weight_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_weight_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output() ;
  ::uint32_t num_output() const;
  void set_num_output(::uint32_t value);

  private:
  ::uint32_t _internal_num_output() const;
  void _internal_set_num_output(::uint32_t value);

  public:
  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  void clear_transpose() ;
  bool transpose() const;
  void set_transpose(bool value);

  private:
  bool _internal_transpose() const;
  void _internal_set_transpose(bool value);

  public:
  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term() ;
  bool bias_term() const;
  void set_bias_term(bool value);

  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);

  public:
  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.InnerProductParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* weight_filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    ::uint32_t num_output_;
    bool transpose_;
    bool bias_term_;
    ::int32_t axis_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class EmbedParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.EmbedParameter) */ {
 public:
  inline EmbedParameter() : EmbedParameter(nullptr) {}
  ~EmbedParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmbedParameter(::google::protobuf::internal::ConstantInitialized);

  inline EmbedParameter(const EmbedParameter& from)
      : EmbedParameter(nullptr, from) {}
  EmbedParameter(EmbedParameter&& from) noexcept
    : EmbedParameter() {
    *this = ::std::move(from);
  }

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedParameter& operator=(EmbedParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmbedParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedParameter* internal_default_instance() {
    return reinterpret_cast<const EmbedParameter*>(
               &_EmbedParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(EmbedParameter& a, EmbedParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(EmbedParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmbedParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmbedParameter& from) {
    EmbedParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmbedParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.EmbedParameter";
  }
  protected:
  explicit EmbedParameter(::google::protobuf::Arena* arena);
  EmbedParameter(::google::protobuf::Arena* arena, const EmbedParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFillerFieldNumber = 4,
    kBiasFillerFieldNumber = 5,
    kNumOutputFieldNumber = 1,
    kInputDimFieldNumber = 2,
    kBiasTermFieldNumber = 3,
  };
  // optional .opencv_caffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  void clear_weight_filler() ;
  const ::opencv_caffe::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_weight_filler();
  ::opencv_caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_weight_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_weight_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_weight_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output() ;
  ::uint32_t num_output() const;
  void set_num_output(::uint32_t value);

  private:
  ::uint32_t _internal_num_output() const;
  void _internal_set_num_output(::uint32_t value);

  public:
  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  void clear_input_dim() ;
  ::uint32_t input_dim() const;
  void set_input_dim(::uint32_t value);

  private:
  ::uint32_t _internal_input_dim() const;
  void _internal_set_input_dim(::uint32_t value);

  public:
  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  void clear_bias_term() ;
  bool bias_term() const;
  void set_bias_term(bool value);

  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.EmbedParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* weight_filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    ::uint32_t num_output_;
    ::uint32_t input_dim_;
    bool bias_term_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class DummyDataParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.DummyDataParameter) */ {
 public:
  inline DummyDataParameter() : DummyDataParameter(nullptr) {}
  ~DummyDataParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DummyDataParameter(::google::protobuf::internal::ConstantInitialized);

  inline DummyDataParameter(const DummyDataParameter& from)
      : DummyDataParameter(nullptr, from) {}
  DummyDataParameter(DummyDataParameter&& from) noexcept
    : DummyDataParameter() {
    *this = ::std::move(from);
  }

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DummyDataParameter& operator=(DummyDataParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DummyDataParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DummyDataParameter* internal_default_instance() {
    return reinterpret_cast<const DummyDataParameter*>(
               &_DummyDataParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DummyDataParameter& a, DummyDataParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DummyDataParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DummyDataParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DummyDataParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DummyDataParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DummyDataParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DummyDataParameter& from) {
    DummyDataParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DummyDataParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.DummyDataParameter";
  }
  protected:
  explicit DummyDataParameter(::google::protobuf::Arena* arena);
  DummyDataParameter(::google::protobuf::Arena* arena, const DummyDataParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFillerFieldNumber = 1,
    kNumFieldNumber = 2,
    kChannelsFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWidthFieldNumber = 5,
    kShapeFieldNumber = 6,
  };
  // repeated .opencv_caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  private:
  int _internal_data_filler_size() const;

  public:
  void clear_data_filler() ;
  ::opencv_caffe::FillerParameter* mutable_data_filler(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::FillerParameter >*
      mutable_data_filler();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>& _internal_data_filler() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>* _internal_mutable_data_filler();
  public:
  const ::opencv_caffe::FillerParameter& data_filler(int index) const;
  ::opencv_caffe::FillerParameter* add_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::FillerParameter >&
      data_filler() const;
  // repeated uint32 num = 2;
  int num_size() const;
  private:
  int _internal_num_size() const;

  public:
  void clear_num() ;
  ::uint32_t num(int index) const;
  void set_num(int index, ::uint32_t value);
  void add_num(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& num() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_num();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_num() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_num();

  public:
  // repeated uint32 channels = 3;
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::uint32_t channels(int index) const;
  void set_channels(int index, ::uint32_t value);
  void add_channels(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& channels() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_channels();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_channels() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_channels();

  public:
  // repeated uint32 height = 4;
  int height_size() const;
  private:
  int _internal_height_size() const;

  public:
  void clear_height() ;
  ::uint32_t height(int index) const;
  void set_height(int index, ::uint32_t value);
  void add_height(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& height() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_height();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_height() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_height();

  public:
  // repeated uint32 width = 5;
  int width_size() const;
  private:
  int _internal_width_size() const;

  public:
  void clear_width() ;
  ::uint32_t width(int index) const;
  void set_width(int index, ::uint32_t value);
  void add_width(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& width() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_width();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_width() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_width();

  public:
  // repeated .opencv_caffe.BlobShape shape = 6;
  int shape_size() const;
  private:
  int _internal_shape_size() const;

  public:
  void clear_shape() ;
  ::opencv_caffe::BlobShape* mutable_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >*
      mutable_shape();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& _internal_shape() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* _internal_mutable_shape();
  public:
  const ::opencv_caffe::BlobShape& shape(int index) const;
  ::opencv_caffe::BlobShape* add_shape();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >&
      shape() const;
  // @@protoc_insertion_point(class_scope:opencv_caffe.DummyDataParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::FillerParameter > data_filler_;
    ::google::protobuf::RepeatedField<::uint32_t> num_;
    ::google::protobuf::RepeatedField<::uint32_t> channels_;
    ::google::protobuf::RepeatedField<::uint32_t> height_;
    ::google::protobuf::RepeatedField<::uint32_t> width_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape > shape_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class DetectionOutputParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.DetectionOutputParameter) */ {
 public:
  inline DetectionOutputParameter() : DetectionOutputParameter(nullptr) {}
  ~DetectionOutputParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DetectionOutputParameter(::google::protobuf::internal::ConstantInitialized);

  inline DetectionOutputParameter(const DetectionOutputParameter& from)
      : DetectionOutputParameter(nullptr, from) {}
  DetectionOutputParameter(DetectionOutputParameter&& from) noexcept
    : DetectionOutputParameter() {
    *this = ::std::move(from);
  }

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionOutputParameter& operator=(DetectionOutputParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectionOutputParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectionOutputParameter* internal_default_instance() {
    return reinterpret_cast<const DetectionOutputParameter*>(
               &_DetectionOutputParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DetectionOutputParameter& a, DetectionOutputParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionOutputParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionOutputParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectionOutputParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectionOutputParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DetectionOutputParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DetectionOutputParameter& from) {
    DetectionOutputParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DetectionOutputParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.DetectionOutputParameter";
  }
  protected:
  explicit DetectionOutputParameter(::google::protobuf::Arena* arena);
  DetectionOutputParameter(::google::protobuf::Arena* arena, const DetectionOutputParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNmsParamFieldNumber = 4,
    kSaveOutputParamFieldNumber = 5,
    kNumClassesFieldNumber = 1,
    kBackgroundLabelIdFieldNumber = 3,
    kConfidenceThresholdFieldNumber = 9,
    kVarianceEncodedInTargetFieldNumber = 8,
    kClipFieldNumber = 1000,
    kKeepTopKFieldNumber = 7,
    kCodeTypeFieldNumber = 6,
    kShareLocationFieldNumber = 2,
    kNormalizedBboxFieldNumber = 10,
  };
  // optional .opencv_caffe.NonMaximumSuppressionParameter nms_param = 4;
  bool has_nms_param() const;
  void clear_nms_param() ;
  const ::opencv_caffe::NonMaximumSuppressionParameter& nms_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NonMaximumSuppressionParameter* release_nms_param();
  ::opencv_caffe::NonMaximumSuppressionParameter* mutable_nms_param();
  void set_allocated_nms_param(::opencv_caffe::NonMaximumSuppressionParameter* value);
  void unsafe_arena_set_allocated_nms_param(::opencv_caffe::NonMaximumSuppressionParameter* value);
  ::opencv_caffe::NonMaximumSuppressionParameter* unsafe_arena_release_nms_param();

  private:
  const ::opencv_caffe::NonMaximumSuppressionParameter& _internal_nms_param() const;
  ::opencv_caffe::NonMaximumSuppressionParameter* _internal_mutable_nms_param();

  public:
  // optional .opencv_caffe.SaveOutputParameter save_output_param = 5;
  bool has_save_output_param() const;
  void clear_save_output_param() ;
  const ::opencv_caffe::SaveOutputParameter& save_output_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SaveOutputParameter* release_save_output_param();
  ::opencv_caffe::SaveOutputParameter* mutable_save_output_param();
  void set_allocated_save_output_param(::opencv_caffe::SaveOutputParameter* value);
  void unsafe_arena_set_allocated_save_output_param(::opencv_caffe::SaveOutputParameter* value);
  ::opencv_caffe::SaveOutputParameter* unsafe_arena_release_save_output_param();

  private:
  const ::opencv_caffe::SaveOutputParameter& _internal_save_output_param() const;
  ::opencv_caffe::SaveOutputParameter* _internal_mutable_save_output_param();

  public:
  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  void clear_num_classes() ;
  ::uint32_t num_classes() const;
  void set_num_classes(::uint32_t value);

  private:
  ::uint32_t _internal_num_classes() const;
  void _internal_set_num_classes(::uint32_t value);

  public:
  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id() ;
  ::int32_t background_label_id() const;
  void set_background_label_id(::int32_t value);

  private:
  ::int32_t _internal_background_label_id() const;
  void _internal_set_background_label_id(::int32_t value);

  public:
  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  void clear_confidence_threshold() ;
  float confidence_threshold() const;
  void set_confidence_threshold(float value);

  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);

  public:
  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  void clear_variance_encoded_in_target() ;
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);

  private:
  bool _internal_variance_encoded_in_target() const;
  void _internal_set_variance_encoded_in_target(bool value);

  public:
  // optional bool clip = 1000 [default = false];
  bool has_clip() const;
  void clear_clip() ;
  bool clip() const;
  void set_clip(bool value);

  private:
  bool _internal_clip() const;
  void _internal_set_clip(bool value);

  public:
  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  void clear_keep_top_k() ;
  ::int32_t keep_top_k() const;
  void set_keep_top_k(::int32_t value);

  private:
  ::int32_t _internal_keep_top_k() const;
  void _internal_set_keep_top_k(::int32_t value);

  public:
  // optional .opencv_caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  void clear_code_type() ;
  ::opencv_caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::opencv_caffe::PriorBoxParameter_CodeType value);

  private:
  ::opencv_caffe::PriorBoxParameter_CodeType _internal_code_type() const;
  void _internal_set_code_type(::opencv_caffe::PriorBoxParameter_CodeType value);

  public:
  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  void clear_share_location() ;
  bool share_location() const;
  void set_share_location(bool value);

  private:
  bool _internal_share_location() const;
  void _internal_set_share_location(bool value);

  public:
  // optional bool normalized_bbox = 10 [default = true];
  bool has_normalized_bbox() const;
  void clear_normalized_bbox() ;
  bool normalized_bbox() const;
  void set_normalized_bbox(bool value);

  private:
  bool _internal_normalized_bbox() const;
  void _internal_set_normalized_bbox(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.DetectionOutputParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 3,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::NonMaximumSuppressionParameter* nms_param_;
    ::opencv_caffe::SaveOutputParameter* save_output_param_;
    ::uint32_t num_classes_;
    ::int32_t background_label_id_;
    float confidence_threshold_;
    bool variance_encoded_in_target_;
    bool clip_;
    ::int32_t keep_top_k_;
    int code_type_;
    bool share_location_;
    bool normalized_bbox_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class ConvolutionParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.ConvolutionParameter) */ {
 public:
  inline ConvolutionParameter() : ConvolutionParameter(nullptr) {}
  ~ConvolutionParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConvolutionParameter(::google::protobuf::internal::ConstantInitialized);

  inline ConvolutionParameter(const ConvolutionParameter& from)
      : ConvolutionParameter(nullptr, from) {}
  ConvolutionParameter(ConvolutionParameter&& from) noexcept
    : ConvolutionParameter() {
    *this = ::std::move(from);
  }

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvolutionParameter& operator=(ConvolutionParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvolutionParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvolutionParameter* internal_default_instance() {
    return reinterpret_cast<const ConvolutionParameter*>(
               &_ConvolutionParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ConvolutionParameter& a, ConvolutionParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvolutionParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvolutionParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvolutionParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvolutionParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConvolutionParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConvolutionParameter& from) {
    ConvolutionParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConvolutionParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.ConvolutionParameter";
  }
  protected:
  explicit ConvolutionParameter(::google::protobuf::Arena* arena);
  ConvolutionParameter(::google::protobuf::Arena* arena, const ConvolutionParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Engine = ConvolutionParameter_Engine;
  static constexpr Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static constexpr Engine CAFFE = ConvolutionParameter_Engine_CAFFE;
  static constexpr Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static constexpr Engine Engine_MIN = ConvolutionParameter_Engine_Engine_MIN;
  static constexpr Engine Engine_MAX = ConvolutionParameter_Engine_Engine_MAX;
  static constexpr int Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  template <typename T>
  static inline const std::string& Engine_Name(T value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(absl::string_view name, Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPadFieldNumber = 3,
    kKernelSizeFieldNumber = 4,
    kStrideFieldNumber = 6,
    kDilationFieldNumber = 18,
    kWeightFillerFieldNumber = 7,
    kBiasFillerFieldNumber = 8,
    kNumOutputFieldNumber = 1,
    kPadHFieldNumber = 9,
    kPadWFieldNumber = 10,
    kKernelHFieldNumber = 11,
    kKernelWFieldNumber = 12,
    kStrideHFieldNumber = 13,
    kStrideWFieldNumber = 14,
    kEngineFieldNumber = 15,
    kForceNdIm2ColFieldNumber = 17,
    kAxisFieldNumber = 16,
    kBiasTermFieldNumber = 2,
    kGroupFieldNumber = 5,
  };
  // repeated uint32 pad = 3;
  int pad_size() const;
  private:
  int _internal_pad_size() const;

  public:
  void clear_pad() ;
  ::uint32_t pad(int index) const;
  void set_pad(int index, ::uint32_t value);
  void add_pad(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& pad() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_pad();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_pad() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_pad();

  public:
  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  private:
  int _internal_kernel_size_size() const;

  public:
  void clear_kernel_size() ;
  ::uint32_t kernel_size(int index) const;
  void set_kernel_size(int index, ::uint32_t value);
  void add_kernel_size(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& kernel_size() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_kernel_size();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_kernel_size() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_kernel_size();

  public:
  // repeated uint32 stride = 6;
  int stride_size() const;
  private:
  int _internal_stride_size() const;

  public:
  void clear_stride() ;
  ::uint32_t stride(int index) const;
  void set_stride(int index, ::uint32_t value);
  void add_stride(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& stride() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_stride();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_stride() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_stride();

  public:
  // repeated uint32 dilation = 18;
  int dilation_size() const;
  private:
  int _internal_dilation_size() const;

  public:
  void clear_dilation() ;
  ::uint32_t dilation(int index) const;
  void set_dilation(int index, ::uint32_t value);
  void add_dilation(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& dilation() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_dilation();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_dilation() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_dilation();

  public:
  // optional .opencv_caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler() ;
  const ::opencv_caffe::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_weight_filler();
  ::opencv_caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_weight_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_weight_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_weight_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output() ;
  ::uint32_t num_output() const;
  void set_num_output(::uint32_t value);

  private:
  ::uint32_t _internal_num_output() const;
  void _internal_set_num_output(::uint32_t value);

  public:
  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h() ;
  ::uint32_t pad_h() const;
  void set_pad_h(::uint32_t value);

  private:
  ::uint32_t _internal_pad_h() const;
  void _internal_set_pad_h(::uint32_t value);

  public:
  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w() ;
  ::uint32_t pad_w() const;
  void set_pad_w(::uint32_t value);

  private:
  ::uint32_t _internal_pad_w() const;
  void _internal_set_pad_w(::uint32_t value);

  public:
  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h() ;
  ::uint32_t kernel_h() const;
  void set_kernel_h(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_h() const;
  void _internal_set_kernel_h(::uint32_t value);

  public:
  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w() ;
  ::uint32_t kernel_w() const;
  void set_kernel_w(::uint32_t value);

  private:
  ::uint32_t _internal_kernel_w() const;
  void _internal_set_kernel_w(::uint32_t value);

  public:
  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h() ;
  ::uint32_t stride_h() const;
  void set_stride_h(::uint32_t value);

  private:
  ::uint32_t _internal_stride_h() const;
  void _internal_set_stride_h(::uint32_t value);

  public:
  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w() ;
  ::uint32_t stride_w() const;
  void set_stride_w(::uint32_t value);

  private:
  ::uint32_t _internal_stride_w() const;
  void _internal_set_stride_w(::uint32_t value);

  public:
  // optional .opencv_caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine() ;
  ::opencv_caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::opencv_caffe::ConvolutionParameter_Engine value);

  private:
  ::opencv_caffe::ConvolutionParameter_Engine _internal_engine() const;
  void _internal_set_engine(::opencv_caffe::ConvolutionParameter_Engine value);

  public:
  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col() ;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  private:
  bool _internal_force_nd_im2col() const;
  void _internal_set_force_nd_im2col(bool value);

  public:
  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term() ;
  bool bias_term() const;
  void set_bias_term(bool value);

  private:
  bool _internal_bias_term() const;
  void _internal_set_bias_term(bool value);

  public:
  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.ConvolutionParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> pad_;
    ::google::protobuf::RepeatedField<::uint32_t> kernel_size_;
    ::google::protobuf::RepeatedField<::uint32_t> stride_;
    ::google::protobuf::RepeatedField<::uint32_t> dilation_;
    ::opencv_caffe::FillerParameter* weight_filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    ::uint32_t num_output_;
    ::uint32_t pad_h_;
    ::uint32_t pad_w_;
    ::uint32_t kernel_h_;
    ::uint32_t kernel_w_;
    ::uint32_t stride_h_;
    ::uint32_t stride_w_;
    int engine_;
    bool force_nd_im2col_;
    ::int32_t axis_;
    bool bias_term_;
    ::uint32_t group_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class BlobProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.BlobProto) */ {
 public:
  inline BlobProto() : BlobProto(nullptr) {}
  ~BlobProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlobProto(::google::protobuf::internal::ConstantInitialized);

  inline BlobProto(const BlobProto& from)
      : BlobProto(nullptr, from) {}
  BlobProto(BlobProto&& from) noexcept
    : BlobProto() {
    *this = ::std::move(from);
  }

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProto& operator=(BlobProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobProto* internal_default_instance() {
    return reinterpret_cast<const BlobProto*>(
               &_BlobProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlobProto& a, BlobProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlobProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlobProto& from) {
    BlobProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlobProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.BlobProto";
  }
  protected:
  explicit BlobProto(::google::protobuf::Arena* arena);
  BlobProto(::google::protobuf::Arena* arena, const BlobProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kDiffFieldNumber = 6,
    kDoubleDataFieldNumber = 8,
    kDoubleDiffFieldNumber = 9,
    kRawDataFieldNumber = 12,
    kShapeFieldNumber = 7,
    kNumFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kRawDataTypeFieldNumber = 10,
  };
  // repeated float data = 5 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField<float>& data() const;
  ::google::protobuf::RepeatedField<float>* mutable_data();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_data() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_data();

  public:
  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  private:
  int _internal_diff_size() const;

  public:
  void clear_diff() ;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField<float>& diff() const;
  ::google::protobuf::RepeatedField<float>* mutable_diff();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_diff() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_diff();

  public:
  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  private:
  int _internal_double_data_size() const;

  public:
  void clear_double_data() ;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField<double>& double_data() const;
  ::google::protobuf::RepeatedField<double>* mutable_double_data();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_double_data() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_double_data();

  public:
  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  private:
  int _internal_double_diff_size() const;

  public:
  void clear_double_diff() ;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField<double>& double_diff() const;
  ::google::protobuf::RepeatedField<double>* mutable_double_diff();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_double_diff() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_double_diff();

  public:
  // optional bytes raw_data = 12 [packed = false];
  bool has_raw_data() const;
  void clear_raw_data() ;
  const std::string& raw_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_raw_data(Arg_&& arg, Args_... args);
  std::string* mutable_raw_data();
  PROTOBUF_NODISCARD std::string* release_raw_data();
  void set_allocated_raw_data(std::string* value);

  private:
  const std::string& _internal_raw_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(
      const std::string& value);
  std::string* _internal_mutable_raw_data();

  public:
  // optional .opencv_caffe.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape() ;
  const ::opencv_caffe::BlobShape& shape() const;
  PROTOBUF_NODISCARD ::opencv_caffe::BlobShape* release_shape();
  ::opencv_caffe::BlobShape* mutable_shape();
  void set_allocated_shape(::opencv_caffe::BlobShape* value);
  void unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value);
  ::opencv_caffe::BlobShape* unsafe_arena_release_shape();

  private:
  const ::opencv_caffe::BlobShape& _internal_shape() const;
  ::opencv_caffe::BlobShape* _internal_mutable_shape();

  public:
  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num() ;
  ::int32_t num() const;
  void set_num(::int32_t value);

  private:
  ::int32_t _internal_num() const;
  void _internal_set_num(::int32_t value);

  public:
  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels() ;
  ::int32_t channels() const;
  void set_channels(::int32_t value);

  private:
  ::int32_t _internal_channels() const;
  void _internal_set_channels(::int32_t value);

  public:
  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // optional .opencv_caffe.Type raw_data_type = 10;
  bool has_raw_data_type() const;
  void clear_raw_data_type() ;
  ::opencv_caffe::Type raw_data_type() const;
  void set_raw_data_type(::opencv_caffe::Type value);

  private:
  ::opencv_caffe::Type _internal_raw_data_type() const;
  void _internal_set_raw_data_type(::opencv_caffe::Type value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.BlobProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> data_;
    ::google::protobuf::RepeatedField<float> diff_;
    ::google::protobuf::RepeatedField<double> double_data_;
    ::google::protobuf::RepeatedField<double> double_diff_;
    ::google::protobuf::internal::ArenaStringPtr raw_data_;
    ::opencv_caffe::BlobShape* shape_;
    ::int32_t num_;
    ::int32_t channels_;
    ::int32_t height_;
    ::int32_t width_;
    int raw_data_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class BiasParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.BiasParameter) */ {
 public:
  inline BiasParameter() : BiasParameter(nullptr) {}
  ~BiasParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BiasParameter(::google::protobuf::internal::ConstantInitialized);

  inline BiasParameter(const BiasParameter& from)
      : BiasParameter(nullptr, from) {}
  BiasParameter(BiasParameter&& from) noexcept
    : BiasParameter() {
    *this = ::std::move(from);
  }

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiasParameter& operator=(BiasParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiasParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiasParameter* internal_default_instance() {
    return reinterpret_cast<const BiasParameter*>(
               &_BiasParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BiasParameter& a, BiasParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(BiasParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiasParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiasParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiasParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BiasParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BiasParameter& from) {
    BiasParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BiasParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.BiasParameter";
  }
  protected:
  explicit BiasParameter(::google::protobuf::Arena* arena);
  BiasParameter(::google::protobuf::Arena* arena, const BiasParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillerFieldNumber = 3,
    kAxisFieldNumber = 1,
    kNumAxesFieldNumber = 2,
  };
  // optional .opencv_caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler() ;
  const ::opencv_caffe::FillerParameter& filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_filler();
  ::opencv_caffe::FillerParameter* mutable_filler();
  void set_allocated_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_filler();

  public:
  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis() ;
  ::int32_t axis() const;
  void set_axis(::int32_t value);

  private:
  ::int32_t _internal_axis() const;
  void _internal_set_axis(::int32_t value);

  public:
  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes() ;
  ::int32_t num_axes() const;
  void set_num_axes(::int32_t value);

  private:
  ::int32_t _internal_num_axes() const;
  void _internal_set_num_axes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.BiasParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::opencv_caffe::FillerParameter* filler_;
    ::int32_t axis_;
    ::int32_t num_axes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class V0LayerParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.V0LayerParameter) */ {
 public:
  inline V0LayerParameter() : V0LayerParameter(nullptr) {}
  ~V0LayerParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR V0LayerParameter(::google::protobuf::internal::ConstantInitialized);

  inline V0LayerParameter(const V0LayerParameter& from)
      : V0LayerParameter(nullptr, from) {}
  V0LayerParameter(V0LayerParameter&& from) noexcept
    : V0LayerParameter() {
    *this = ::std::move(from);
  }

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V0LayerParameter& operator=(V0LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V0LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const V0LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V0LayerParameter*>(
               &_V0LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(V0LayerParameter& a, V0LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V0LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V0LayerParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V0LayerParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V0LayerParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const V0LayerParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const V0LayerParameter& from) {
    V0LayerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(V0LayerParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.V0LayerParameter";
  }
  protected:
  explicit V0LayerParameter(::google::protobuf::Arena* arena);
  V0LayerParameter(::google::protobuf::Arena* arena, const V0LayerParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PoolMethod = V0LayerParameter_PoolMethod;
  static constexpr PoolMethod MAX = V0LayerParameter_PoolMethod_MAX;
  static constexpr PoolMethod AVE = V0LayerParameter_PoolMethod_AVE;
  static constexpr PoolMethod STOCHASTIC = V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static constexpr PoolMethod PoolMethod_MIN = V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static constexpr PoolMethod PoolMethod_MAX = V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static constexpr int PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  template <typename T>
  static inline const std::string& PoolMethod_Name(T value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(absl::string_view name, PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 50,
    kBlobsLrFieldNumber = 51,
    kWeightDecayFieldNumber = 52,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSourceFieldNumber = 16,
    kMeanfileFieldNumber = 18,
    kDetCropModeFieldNumber = 59,
    kWeightFillerFieldNumber = 5,
    kBiasFillerFieldNumber = 6,
    kHdf5OutputParamFieldNumber = 1001,
    kNumOutputFieldNumber = 3,
    kPadFieldNumber = 7,
    kKernelsizeFieldNumber = 8,
    kPoolFieldNumber = 11,
    kBatchsizeFieldNumber = 19,
    kCropsizeFieldNumber = 20,
    kMirrorFieldNumber = 21,
    kShuffleImagesFieldNumber = 64,
    kRandSkipFieldNumber = 53,
    kDetContextPadFieldNumber = 58,
    kNewNumFieldNumber = 60,
    kNewChannelsFieldNumber = 61,
    kNewHeightFieldNumber = 62,
    kNewWidthFieldNumber = 63,
    kConcatDimFieldNumber = 65,
    kBiastermFieldNumber = 4,
    kGroupFieldNumber = 9,
    kStrideFieldNumber = 10,
    kDropoutRatioFieldNumber = 12,
    kLocalSizeFieldNumber = 13,
    kAlphaFieldNumber = 14,
    kBetaFieldNumber = 15,
    kScaleFieldNumber = 17,
    kKFieldNumber = 22,
    kDetFgThresholdFieldNumber = 54,
    kDetBgThresholdFieldNumber = 55,
    kDetFgFractionFieldNumber = 56,
  };
  // repeated .opencv_caffe.BlobProto blobs = 50;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;

  public:
  void clear_blobs() ;
  ::opencv_caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& _internal_blobs() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* _internal_mutable_blobs();
  public:
  const ::opencv_caffe::BlobProto& blobs(int index) const;
  ::opencv_caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >&
      blobs() const;
  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;

  public:
  void clear_blobs_lr() ;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField<float>& blobs_lr() const;
  ::google::protobuf::RepeatedField<float>* mutable_blobs_lr();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_blobs_lr() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_blobs_lr();

  public:
  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;

  public:
  void clear_weight_decay() ;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField<float>& weight_decay() const;
  ::google::protobuf::RepeatedField<float>* mutable_weight_decay();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_weight_decay() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_weight_decay();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string type = 2;
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional string source = 16;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile() ;
  const std::string& meanfile() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_meanfile(Arg_&& arg, Args_... args);
  std::string* mutable_meanfile();
  PROTOBUF_NODISCARD std::string* release_meanfile();
  void set_allocated_meanfile(std::string* value);

  private:
  const std::string& _internal_meanfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meanfile(
      const std::string& value);
  std::string* _internal_mutable_meanfile();

  public:
  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode() ;
  const std::string& det_crop_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_det_crop_mode(Arg_&& arg, Args_... args);
  std::string* mutable_det_crop_mode();
  PROTOBUF_NODISCARD std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(std::string* value);

  private:
  const std::string& _internal_det_crop_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_det_crop_mode(
      const std::string& value);
  std::string* _internal_mutable_det_crop_mode();

  public:
  // optional .opencv_caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler() ;
  const ::opencv_caffe::FillerParameter& weight_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_weight_filler();
  ::opencv_caffe::FillerParameter* mutable_weight_filler();
  void set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_weight_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_weight_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_weight_filler();

  public:
  // optional .opencv_caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler() ;
  const ::opencv_caffe::FillerParameter& bias_filler() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FillerParameter* release_bias_filler();
  ::opencv_caffe::FillerParameter* mutable_bias_filler();
  void set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  void unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value);
  ::opencv_caffe::FillerParameter* unsafe_arena_release_bias_filler();

  private:
  const ::opencv_caffe::FillerParameter& _internal_bias_filler() const;
  ::opencv_caffe::FillerParameter* _internal_mutable_bias_filler();

  public:
  // optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param() ;
  const ::opencv_caffe::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::opencv_caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  void unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  ::opencv_caffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  private:
  const ::opencv_caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::opencv_caffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();

  public:
  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output() ;
  ::uint32_t num_output() const;
  void set_num_output(::uint32_t value);

  private:
  ::uint32_t _internal_num_output() const;
  void _internal_set_num_output(::uint32_t value);

  public:
  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad() ;
  ::uint32_t pad() const;
  void set_pad(::uint32_t value);

  private:
  ::uint32_t _internal_pad() const;
  void _internal_set_pad(::uint32_t value);

  public:
  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize() ;
  ::uint32_t kernelsize() const;
  void set_kernelsize(::uint32_t value);

  private:
  ::uint32_t _internal_kernelsize() const;
  void _internal_set_kernelsize(::uint32_t value);

  public:
  // optional .opencv_caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool() ;
  ::opencv_caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::opencv_caffe::V0LayerParameter_PoolMethod value);

  private:
  ::opencv_caffe::V0LayerParameter_PoolMethod _internal_pool() const;
  void _internal_set_pool(::opencv_caffe::V0LayerParameter_PoolMethod value);

  public:
  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize() ;
  ::uint32_t batchsize() const;
  void set_batchsize(::uint32_t value);

  private:
  ::uint32_t _internal_batchsize() const;
  void _internal_set_batchsize(::uint32_t value);

  public:
  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize() ;
  ::uint32_t cropsize() const;
  void set_cropsize(::uint32_t value);

  private:
  ::uint32_t _internal_cropsize() const;
  void _internal_set_cropsize(::uint32_t value);

  public:
  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror() ;
  bool mirror() const;
  void set_mirror(bool value);

  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);

  public:
  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images() ;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  private:
  bool _internal_shuffle_images() const;
  void _internal_set_shuffle_images(bool value);

  public:
  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip() ;
  ::uint32_t rand_skip() const;
  void set_rand_skip(::uint32_t value);

  private:
  ::uint32_t _internal_rand_skip() const;
  void _internal_set_rand_skip(::uint32_t value);

  public:
  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad() ;
  ::uint32_t det_context_pad() const;
  void set_det_context_pad(::uint32_t value);

  private:
  ::uint32_t _internal_det_context_pad() const;
  void _internal_set_det_context_pad(::uint32_t value);

  public:
  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num() ;
  ::int32_t new_num() const;
  void set_new_num(::int32_t value);

  private:
  ::int32_t _internal_new_num() const;
  void _internal_set_new_num(::int32_t value);

  public:
  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels() ;
  ::int32_t new_channels() const;
  void set_new_channels(::int32_t value);

  private:
  ::int32_t _internal_new_channels() const;
  void _internal_set_new_channels(::int32_t value);

  public:
  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height() ;
  ::int32_t new_height() const;
  void set_new_height(::int32_t value);

  private:
  ::int32_t _internal_new_height() const;
  void _internal_set_new_height(::int32_t value);

  public:
  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width() ;
  ::int32_t new_width() const;
  void set_new_width(::int32_t value);

  private:
  ::int32_t _internal_new_width() const;
  void _internal_set_new_width(::int32_t value);

  public:
  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim() ;
  ::uint32_t concat_dim() const;
  void set_concat_dim(::uint32_t value);

  private:
  ::uint32_t _internal_concat_dim() const;
  void _internal_set_concat_dim(::uint32_t value);

  public:
  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm() ;
  bool biasterm() const;
  void set_biasterm(bool value);

  private:
  bool _internal_biasterm() const;
  void _internal_set_biasterm(bool value);

  public:
  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group() ;
  ::uint32_t group() const;
  void set_group(::uint32_t value);

  private:
  ::uint32_t _internal_group() const;
  void _internal_set_group(::uint32_t value);

  public:
  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride() ;
  ::uint32_t stride() const;
  void set_stride(::uint32_t value);

  private:
  ::uint32_t _internal_stride() const;
  void _internal_set_stride(::uint32_t value);

  public:
  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio() ;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  private:
  float _internal_dropout_ratio() const;
  void _internal_set_dropout_ratio(float value);

  public:
  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size() ;
  ::uint32_t local_size() const;
  void set_local_size(::uint32_t value);

  private:
  ::uint32_t _internal_local_size() const;
  void _internal_set_local_size(::uint32_t value);

  public:
  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha() ;
  float alpha() const;
  void set_alpha(float value);

  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);

  public:
  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta() ;
  float beta() const;
  void set_beta(float value);

  private:
  float _internal_beta() const;
  void _internal_set_beta(float value);

  public:
  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale() ;
  float scale() const;
  void set_scale(float value);

  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);

  public:
  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k() ;
  float k() const;
  void set_k(float value);

  private:
  float _internal_k() const;
  void _internal_set_k(float value);

  public:
  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold() ;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  private:
  float _internal_det_fg_threshold() const;
  void _internal_set_det_fg_threshold(float value);

  public:
  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold() ;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  private:
  float _internal_det_bg_threshold() const;
  void _internal_set_det_bg_threshold(float value);

  public:
  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction() ;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  private:
  float _internal_det_fg_fraction() const;
  void _internal_set_det_fg_fraction(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.V0LayerParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 38, 5,
      105, 12>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto > blobs_;
    ::google::protobuf::RepeatedField<float> blobs_lr_;
    ::google::protobuf::RepeatedField<float> weight_decay_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    ::google::protobuf::internal::ArenaStringPtr meanfile_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_det_crop_mode_;
    ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
    ::opencv_caffe::FillerParameter* weight_filler_;
    ::opencv_caffe::FillerParameter* bias_filler_;
    ::opencv_caffe::HDF5OutputParameter* hdf5_output_param_;
    ::uint32_t num_output_;
    ::uint32_t pad_;
    ::uint32_t kernelsize_;
    int pool_;
    ::uint32_t batchsize_;
    ::uint32_t cropsize_;
    bool mirror_;
    bool shuffle_images_;
    ::uint32_t rand_skip_;
    ::uint32_t det_context_pad_;
    ::int32_t new_num_;
    ::int32_t new_channels_;
    ::int32_t new_height_;
    ::int32_t new_width_;
    ::uint32_t concat_dim_;
    bool biasterm_;
    ::uint32_t group_;
    ::uint32_t stride_;
    float dropout_ratio_;
    ::uint32_t local_size_;
    float alpha_;
    float beta_;
    float scale_;
    float k_;
    float det_fg_threshold_;
    float det_bg_threshold_;
    float det_fg_fraction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SolverState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SolverState) */ {
 public:
  inline SolverState() : SolverState(nullptr) {}
  ~SolverState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolverState(::google::protobuf::internal::ConstantInitialized);

  inline SolverState(const SolverState& from)
      : SolverState(nullptr, from) {}
  SolverState(SolverState&& from) noexcept
    : SolverState() {
    *this = ::std::move(from);
  }

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverState& operator=(SolverState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverState* internal_default_instance() {
    return reinterpret_cast<const SolverState*>(
               &_SolverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SolverState& a, SolverState& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolverState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolverState& from) {
    SolverState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SolverState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SolverState";
  }
  protected:
  explicit SolverState(::google::protobuf::Arena* arena);
  SolverState(::google::protobuf::Arena* arena, const SolverState& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 3,
    kLearnedNetFieldNumber = 2,
    kIterFieldNumber = 1,
    kCurrentStepFieldNumber = 4,
  };
  // repeated .opencv_caffe.BlobProto history = 3;
  int history_size() const;
  private:
  int _internal_history_size() const;

  public:
  void clear_history() ;
  ::opencv_caffe::BlobProto* mutable_history(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >*
      mutable_history();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& _internal_history() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* _internal_mutable_history();
  public:
  const ::opencv_caffe::BlobProto& history(int index) const;
  ::opencv_caffe::BlobProto* add_history();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >&
      history() const;
  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net() ;
  const std::string& learned_net() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_learned_net(Arg_&& arg, Args_... args);
  std::string* mutable_learned_net();
  PROTOBUF_NODISCARD std::string* release_learned_net();
  void set_allocated_learned_net(std::string* value);

  private:
  const std::string& _internal_learned_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_learned_net(
      const std::string& value);
  std::string* _internal_mutable_learned_net();

  public:
  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter() ;
  ::int32_t iter() const;
  void set_iter(::int32_t value);

  private:
  ::int32_t _internal_iter() const;
  void _internal_set_iter(::int32_t value);

  public:
  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step() ;
  ::int32_t current_step() const;
  void set_current_step(::int32_t value);

  private:
  ::int32_t _internal_current_step() const;
  void _internal_set_current_step(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SolverState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto > history_;
    ::google::protobuf::internal::ArenaStringPtr learned_net_;
    ::int32_t iter_;
    ::int32_t current_step_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class LayerParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.LayerParameter) */ {
 public:
  inline LayerParameter() : LayerParameter(nullptr) {}
  ~LayerParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LayerParameter(::google::protobuf::internal::ConstantInitialized);

  inline LayerParameter(const LayerParameter& from)
      : LayerParameter(nullptr, from) {}
  LayerParameter(LayerParameter&& from) noexcept
    : LayerParameter() {
    *this = ::std::move(from);
  }

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerParameter& operator=(LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerParameter* internal_default_instance() {
    return reinterpret_cast<const LayerParameter*>(
               &_LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(LayerParameter& a, LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LayerParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LayerParameter& from) {
    LayerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LayerParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.LayerParameter";
  }
  protected:
  explicit LayerParameter(::google::protobuf::Arena* arena);
  LayerParameter(::google::protobuf::Arena* arena, const LayerParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 3,
    kTopFieldNumber = 4,
    kLossWeightFieldNumber = 5,
    kParamFieldNumber = 6,
    kBlobsFieldNumber = 7,
    kIncludeFieldNumber = 8,
    kExcludeFieldNumber = 9,
    kPropagateDownFieldNumber = 11,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTransformParamFieldNumber = 100,
    kLossParamFieldNumber = 101,
    kAccuracyParamFieldNumber = 102,
    kArgmaxParamFieldNumber = 103,
    kConcatParamFieldNumber = 104,
    kContrastiveLossParamFieldNumber = 105,
    kConvolutionParamFieldNumber = 106,
    kDataParamFieldNumber = 107,
    kDropoutParamFieldNumber = 108,
    kDummyDataParamFieldNumber = 109,
    kEltwiseParamFieldNumber = 110,
    kExpParamFieldNumber = 111,
    kHdf5DataParamFieldNumber = 112,
    kHdf5OutputParamFieldNumber = 113,
    kHingeLossParamFieldNumber = 114,
    kImageDataParamFieldNumber = 115,
    kInfogainLossParamFieldNumber = 116,
    kInnerProductParamFieldNumber = 117,
    kLrnParamFieldNumber = 118,
    kMemoryDataParamFieldNumber = 119,
    kMvnParamFieldNumber = 120,
    kPoolingParamFieldNumber = 121,
    kPowerParamFieldNumber = 122,
    kReluParamFieldNumber = 123,
    kSigmoidParamFieldNumber = 124,
    kSoftmaxParamFieldNumber = 125,
    kSliceParamFieldNumber = 126,
    kTanhParamFieldNumber = 127,
    kThresholdParamFieldNumber = 128,
    kWindowDataParamFieldNumber = 129,
    kPythonParamFieldNumber = 130,
    kPreluParamFieldNumber = 131,
    kSppParamFieldNumber = 132,
    kReshapeParamFieldNumber = 133,
    kLogParamFieldNumber = 134,
    kFlattenParamFieldNumber = 135,
    kReductionParamFieldNumber = 136,
    kEmbedParamFieldNumber = 137,
    kTileParamFieldNumber = 138,
    kBatchNormParamFieldNumber = 139,
    kEluParamFieldNumber = 140,
    kBiasParamFieldNumber = 141,
    kScaleParamFieldNumber = 142,
    kInputParamFieldNumber = 143,
    kCropParamFieldNumber = 144,
    kParameterParamFieldNumber = 145,
    kRecurrentParamFieldNumber = 146,
    kDetectionOutputParamFieldNumber = 147,
    kPermuteParamFieldNumber = 148,
    kNormParamFieldNumber = 149,
    kPriorBoxParamFieldNumber = 150,
    kProposalParamFieldNumber = 201,
    kPsroiPoolingParamFieldNumber = 10002,
    kRoiPoolingParamFieldNumber = 8266711,
    kPhaseFieldNumber = 10,
  };
  // repeated string bottom = 3;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;

  public:
  void clear_bottom() ;
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, std::size_t size);
  void set_bottom(int index, absl::string_view value);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, std::size_t size);
  void add_bottom(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bottom();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bottom() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bottom();

  public:
  // repeated string top = 4;
  int top_size() const;
  private:
  int _internal_top_size() const;

  public:
  void clear_top() ;
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, std::size_t size);
  void set_top(int index, absl::string_view value);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, std::size_t size);
  void add_top(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_top();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_top();

  public:
  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;

  public:
  void clear_loss_weight() ;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField<float>& loss_weight() const;
  ::google::protobuf::RepeatedField<float>* mutable_loss_weight();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_loss_weight() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_loss_weight();

  public:
  // repeated .opencv_caffe.ParamSpec param = 6;
  int param_size() const;
  private:
  int _internal_param_size() const;

  public:
  void clear_param() ;
  ::opencv_caffe::ParamSpec* mutable_param(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::ParamSpec >*
      mutable_param();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>& _internal_param() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>* _internal_mutable_param();
  public:
  const ::opencv_caffe::ParamSpec& param(int index) const;
  ::opencv_caffe::ParamSpec* add_param();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::ParamSpec >&
      param() const;
  // repeated .opencv_caffe.BlobProto blobs = 7;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;

  public:
  void clear_blobs() ;
  ::opencv_caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& _internal_blobs() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* _internal_mutable_blobs();
  public:
  const ::opencv_caffe::BlobProto& blobs(int index) const;
  ::opencv_caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >&
      blobs() const;
  // repeated .opencv_caffe.NetStateRule include = 8;
  int include_size() const;
  private:
  int _internal_include_size() const;

  public:
  void clear_include() ;
  ::opencv_caffe::NetStateRule* mutable_include(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >*
      mutable_include();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& _internal_include() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* _internal_mutable_include();
  public:
  const ::opencv_caffe::NetStateRule& include(int index) const;
  ::opencv_caffe::NetStateRule* add_include();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >&
      include() const;
  // repeated .opencv_caffe.NetStateRule exclude = 9;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;

  public:
  void clear_exclude() ;
  ::opencv_caffe::NetStateRule* mutable_exclude(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >*
      mutable_exclude();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& _internal_exclude() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* _internal_mutable_exclude();
  public:
  const ::opencv_caffe::NetStateRule& exclude(int index) const;
  ::opencv_caffe::NetStateRule* add_exclude();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >&
      exclude() const;
  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  private:
  int _internal_propagate_down_size() const;

  public:
  void clear_propagate_down() ;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField<bool>& propagate_down() const;
  ::google::protobuf::RepeatedField<bool>* mutable_propagate_down();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_propagate_down() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_propagate_down();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string type = 2;
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional .opencv_caffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  void clear_transform_param() ;
  const ::opencv_caffe::TransformationParameter& transform_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::TransformationParameter* release_transform_param();
  ::opencv_caffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::opencv_caffe::TransformationParameter* value);
  void unsafe_arena_set_allocated_transform_param(::opencv_caffe::TransformationParameter* value);
  ::opencv_caffe::TransformationParameter* unsafe_arena_release_transform_param();

  private:
  const ::opencv_caffe::TransformationParameter& _internal_transform_param() const;
  ::opencv_caffe::TransformationParameter* _internal_mutable_transform_param();

  public:
  // optional .opencv_caffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  void clear_loss_param() ;
  const ::opencv_caffe::LossParameter& loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::LossParameter* release_loss_param();
  ::opencv_caffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::opencv_caffe::LossParameter* value);
  void unsafe_arena_set_allocated_loss_param(::opencv_caffe::LossParameter* value);
  ::opencv_caffe::LossParameter* unsafe_arena_release_loss_param();

  private:
  const ::opencv_caffe::LossParameter& _internal_loss_param() const;
  ::opencv_caffe::LossParameter* _internal_mutable_loss_param();

  public:
  // optional .opencv_caffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  void clear_accuracy_param() ;
  const ::opencv_caffe::AccuracyParameter& accuracy_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::AccuracyParameter* release_accuracy_param();
  ::opencv_caffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value);
  void unsafe_arena_set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value);
  ::opencv_caffe::AccuracyParameter* unsafe_arena_release_accuracy_param();

  private:
  const ::opencv_caffe::AccuracyParameter& _internal_accuracy_param() const;
  ::opencv_caffe::AccuracyParameter* _internal_mutable_accuracy_param();

  public:
  // optional .opencv_caffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  void clear_argmax_param() ;
  const ::opencv_caffe::ArgMaxParameter& argmax_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ArgMaxParameter* release_argmax_param();
  ::opencv_caffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value);
  void unsafe_arena_set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value);
  ::opencv_caffe::ArgMaxParameter* unsafe_arena_release_argmax_param();

  private:
  const ::opencv_caffe::ArgMaxParameter& _internal_argmax_param() const;
  ::opencv_caffe::ArgMaxParameter* _internal_mutable_argmax_param();

  public:
  // optional .opencv_caffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  void clear_concat_param() ;
  const ::opencv_caffe::ConcatParameter& concat_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ConcatParameter* release_concat_param();
  ::opencv_caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::opencv_caffe::ConcatParameter* value);
  void unsafe_arena_set_allocated_concat_param(::opencv_caffe::ConcatParameter* value);
  ::opencv_caffe::ConcatParameter* unsafe_arena_release_concat_param();

  private:
  const ::opencv_caffe::ConcatParameter& _internal_concat_param() const;
  ::opencv_caffe::ConcatParameter* _internal_mutable_concat_param();

  public:
  // optional .opencv_caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param() ;
  const ::opencv_caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::opencv_caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value);
  void unsafe_arena_set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value);
  ::opencv_caffe::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  private:
  const ::opencv_caffe::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::opencv_caffe::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();

  public:
  // optional .opencv_caffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param() ;
  const ::opencv_caffe::ConvolutionParameter& convolution_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ConvolutionParameter* release_convolution_param();
  ::opencv_caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value);
  void unsafe_arena_set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value);
  ::opencv_caffe::ConvolutionParameter* unsafe_arena_release_convolution_param();

  private:
  const ::opencv_caffe::ConvolutionParameter& _internal_convolution_param() const;
  ::opencv_caffe::ConvolutionParameter* _internal_mutable_convolution_param();

  public:
  // optional .opencv_caffe.DataParameter data_param = 107;
  bool has_data_param() const;
  void clear_data_param() ;
  const ::opencv_caffe::DataParameter& data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DataParameter* release_data_param();
  ::opencv_caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::opencv_caffe::DataParameter* value);
  void unsafe_arena_set_allocated_data_param(::opencv_caffe::DataParameter* value);
  ::opencv_caffe::DataParameter* unsafe_arena_release_data_param();

  private:
  const ::opencv_caffe::DataParameter& _internal_data_param() const;
  ::opencv_caffe::DataParameter* _internal_mutable_data_param();

  public:
  // optional .opencv_caffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  void clear_dropout_param() ;
  const ::opencv_caffe::DropoutParameter& dropout_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DropoutParameter* release_dropout_param();
  ::opencv_caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value);
  void unsafe_arena_set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value);
  ::opencv_caffe::DropoutParameter* unsafe_arena_release_dropout_param();

  private:
  const ::opencv_caffe::DropoutParameter& _internal_dropout_param() const;
  ::opencv_caffe::DropoutParameter* _internal_mutable_dropout_param();

  public:
  // optional .opencv_caffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param() ;
  const ::opencv_caffe::DummyDataParameter& dummy_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DummyDataParameter* release_dummy_data_param();
  ::opencv_caffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value);
  void unsafe_arena_set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value);
  ::opencv_caffe::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  private:
  const ::opencv_caffe::DummyDataParameter& _internal_dummy_data_param() const;
  ::opencv_caffe::DummyDataParameter* _internal_mutable_dummy_data_param();

  public:
  // optional .opencv_caffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  void clear_eltwise_param() ;
  const ::opencv_caffe::EltwiseParameter& eltwise_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::EltwiseParameter* release_eltwise_param();
  ::opencv_caffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value);
  void unsafe_arena_set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value);
  ::opencv_caffe::EltwiseParameter* unsafe_arena_release_eltwise_param();

  private:
  const ::opencv_caffe::EltwiseParameter& _internal_eltwise_param() const;
  ::opencv_caffe::EltwiseParameter* _internal_mutable_eltwise_param();

  public:
  // optional .opencv_caffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  void clear_exp_param() ;
  const ::opencv_caffe::ExpParameter& exp_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ExpParameter* release_exp_param();
  ::opencv_caffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::opencv_caffe::ExpParameter* value);
  void unsafe_arena_set_allocated_exp_param(::opencv_caffe::ExpParameter* value);
  ::opencv_caffe::ExpParameter* unsafe_arena_release_exp_param();

  private:
  const ::opencv_caffe::ExpParameter& _internal_exp_param() const;
  ::opencv_caffe::ExpParameter* _internal_mutable_exp_param();

  public:
  // optional .opencv_caffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param() ;
  const ::opencv_caffe::HDF5DataParameter& hdf5_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HDF5DataParameter* release_hdf5_data_param();
  ::opencv_caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value);
  void unsafe_arena_set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value);
  ::opencv_caffe::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  private:
  const ::opencv_caffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::opencv_caffe::HDF5DataParameter* _internal_mutable_hdf5_data_param();

  public:
  // optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param() ;
  const ::opencv_caffe::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::opencv_caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  void unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  ::opencv_caffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  private:
  const ::opencv_caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::opencv_caffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();

  public:
  // optional .opencv_caffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param() ;
  const ::opencv_caffe::HingeLossParameter& hinge_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HingeLossParameter* release_hinge_loss_param();
  ::opencv_caffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value);
  void unsafe_arena_set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value);
  ::opencv_caffe::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  private:
  const ::opencv_caffe::HingeLossParameter& _internal_hinge_loss_param() const;
  ::opencv_caffe::HingeLossParameter* _internal_mutable_hinge_loss_param();

  public:
  // optional .opencv_caffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  void clear_image_data_param() ;
  const ::opencv_caffe::ImageDataParameter& image_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ImageDataParameter* release_image_data_param();
  ::opencv_caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value);
  void unsafe_arena_set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value);
  ::opencv_caffe::ImageDataParameter* unsafe_arena_release_image_data_param();

  private:
  const ::opencv_caffe::ImageDataParameter& _internal_image_data_param() const;
  ::opencv_caffe::ImageDataParameter* _internal_mutable_image_data_param();

  public:
  // optional .opencv_caffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param() ;
  const ::opencv_caffe::InfogainLossParameter& infogain_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::InfogainLossParameter* release_infogain_loss_param();
  ::opencv_caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value);
  void unsafe_arena_set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value);
  ::opencv_caffe::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  private:
  const ::opencv_caffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::opencv_caffe::InfogainLossParameter* _internal_mutable_infogain_loss_param();

  public:
  // optional .opencv_caffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param() ;
  const ::opencv_caffe::InnerProductParameter& inner_product_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::InnerProductParameter* release_inner_product_param();
  ::opencv_caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value);
  void unsafe_arena_set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value);
  ::opencv_caffe::InnerProductParameter* unsafe_arena_release_inner_product_param();

  private:
  const ::opencv_caffe::InnerProductParameter& _internal_inner_product_param() const;
  ::opencv_caffe::InnerProductParameter* _internal_mutable_inner_product_param();

  public:
  // optional .opencv_caffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  void clear_lrn_param() ;
  const ::opencv_caffe::LRNParameter& lrn_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::LRNParameter* release_lrn_param();
  ::opencv_caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::opencv_caffe::LRNParameter* value);
  void unsafe_arena_set_allocated_lrn_param(::opencv_caffe::LRNParameter* value);
  ::opencv_caffe::LRNParameter* unsafe_arena_release_lrn_param();

  private:
  const ::opencv_caffe::LRNParameter& _internal_lrn_param() const;
  ::opencv_caffe::LRNParameter* _internal_mutable_lrn_param();

  public:
  // optional .opencv_caffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  void clear_memory_data_param() ;
  const ::opencv_caffe::MemoryDataParameter& memory_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::MemoryDataParameter* release_memory_data_param();
  ::opencv_caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value);
  void unsafe_arena_set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value);
  ::opencv_caffe::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  private:
  const ::opencv_caffe::MemoryDataParameter& _internal_memory_data_param() const;
  ::opencv_caffe::MemoryDataParameter* _internal_mutable_memory_data_param();

  public:
  // optional .opencv_caffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  void clear_mvn_param() ;
  const ::opencv_caffe::MVNParameter& mvn_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::MVNParameter* release_mvn_param();
  ::opencv_caffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::opencv_caffe::MVNParameter* value);
  void unsafe_arena_set_allocated_mvn_param(::opencv_caffe::MVNParameter* value);
  ::opencv_caffe::MVNParameter* unsafe_arena_release_mvn_param();

  private:
  const ::opencv_caffe::MVNParameter& _internal_mvn_param() const;
  ::opencv_caffe::MVNParameter* _internal_mutable_mvn_param();

  public:
  // optional .opencv_caffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param() ;
  const ::opencv_caffe::PoolingParameter& pooling_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PoolingParameter* release_pooling_param();
  ::opencv_caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value);
  void unsafe_arena_set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value);
  ::opencv_caffe::PoolingParameter* unsafe_arena_release_pooling_param();

  private:
  const ::opencv_caffe::PoolingParameter& _internal_pooling_param() const;
  ::opencv_caffe::PoolingParameter* _internal_mutable_pooling_param();

  public:
  // optional .opencv_caffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  void clear_power_param() ;
  const ::opencv_caffe::PowerParameter& power_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PowerParameter* release_power_param();
  ::opencv_caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::opencv_caffe::PowerParameter* value);
  void unsafe_arena_set_allocated_power_param(::opencv_caffe::PowerParameter* value);
  ::opencv_caffe::PowerParameter* unsafe_arena_release_power_param();

  private:
  const ::opencv_caffe::PowerParameter& _internal_power_param() const;
  ::opencv_caffe::PowerParameter* _internal_mutable_power_param();

  public:
  // optional .opencv_caffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param() ;
  const ::opencv_caffe::ReLUParameter& relu_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ReLUParameter* release_relu_param();
  ::opencv_caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::opencv_caffe::ReLUParameter* value);
  void unsafe_arena_set_allocated_relu_param(::opencv_caffe::ReLUParameter* value);
  ::opencv_caffe::ReLUParameter* unsafe_arena_release_relu_param();

  private:
  const ::opencv_caffe::ReLUParameter& _internal_relu_param() const;
  ::opencv_caffe::ReLUParameter* _internal_mutable_relu_param();

  public:
  // optional .opencv_caffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param() ;
  const ::opencv_caffe::SigmoidParameter& sigmoid_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SigmoidParameter* release_sigmoid_param();
  ::opencv_caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value);
  void unsafe_arena_set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value);
  ::opencv_caffe::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  private:
  const ::opencv_caffe::SigmoidParameter& _internal_sigmoid_param() const;
  ::opencv_caffe::SigmoidParameter* _internal_mutable_sigmoid_param();

  public:
  // optional .opencv_caffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  void clear_softmax_param() ;
  const ::opencv_caffe::SoftmaxParameter& softmax_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SoftmaxParameter* release_softmax_param();
  ::opencv_caffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value);
  void unsafe_arena_set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value);
  ::opencv_caffe::SoftmaxParameter* unsafe_arena_release_softmax_param();

  private:
  const ::opencv_caffe::SoftmaxParameter& _internal_softmax_param() const;
  ::opencv_caffe::SoftmaxParameter* _internal_mutable_softmax_param();

  public:
  // optional .opencv_caffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  void clear_slice_param() ;
  const ::opencv_caffe::SliceParameter& slice_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SliceParameter* release_slice_param();
  ::opencv_caffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::opencv_caffe::SliceParameter* value);
  void unsafe_arena_set_allocated_slice_param(::opencv_caffe::SliceParameter* value);
  ::opencv_caffe::SliceParameter* unsafe_arena_release_slice_param();

  private:
  const ::opencv_caffe::SliceParameter& _internal_slice_param() const;
  ::opencv_caffe::SliceParameter* _internal_mutable_slice_param();

  public:
  // optional .opencv_caffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  void clear_tanh_param() ;
  const ::opencv_caffe::TanHParameter& tanh_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::TanHParameter* release_tanh_param();
  ::opencv_caffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::opencv_caffe::TanHParameter* value);
  void unsafe_arena_set_allocated_tanh_param(::opencv_caffe::TanHParameter* value);
  ::opencv_caffe::TanHParameter* unsafe_arena_release_tanh_param();

  private:
  const ::opencv_caffe::TanHParameter& _internal_tanh_param() const;
  ::opencv_caffe::TanHParameter* _internal_mutable_tanh_param();

  public:
  // optional .opencv_caffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  void clear_threshold_param() ;
  const ::opencv_caffe::ThresholdParameter& threshold_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ThresholdParameter* release_threshold_param();
  ::opencv_caffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value);
  void unsafe_arena_set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value);
  ::opencv_caffe::ThresholdParameter* unsafe_arena_release_threshold_param();

  private:
  const ::opencv_caffe::ThresholdParameter& _internal_threshold_param() const;
  ::opencv_caffe::ThresholdParameter* _internal_mutable_threshold_param();

  public:
  // optional .opencv_caffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  void clear_window_data_param() ;
  const ::opencv_caffe::WindowDataParameter& window_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::WindowDataParameter* release_window_data_param();
  ::opencv_caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value);
  void unsafe_arena_set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value);
  ::opencv_caffe::WindowDataParameter* unsafe_arena_release_window_data_param();

  private:
  const ::opencv_caffe::WindowDataParameter& _internal_window_data_param() const;
  ::opencv_caffe::WindowDataParameter* _internal_mutable_window_data_param();

  public:
  // optional .opencv_caffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  void clear_python_param() ;
  const ::opencv_caffe::PythonParameter& python_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PythonParameter* release_python_param();
  ::opencv_caffe::PythonParameter* mutable_python_param();
  void set_allocated_python_param(::opencv_caffe::PythonParameter* value);
  void unsafe_arena_set_allocated_python_param(::opencv_caffe::PythonParameter* value);
  ::opencv_caffe::PythonParameter* unsafe_arena_release_python_param();

  private:
  const ::opencv_caffe::PythonParameter& _internal_python_param() const;
  ::opencv_caffe::PythonParameter* _internal_mutable_python_param();

  public:
  // optional .opencv_caffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  void clear_prelu_param() ;
  const ::opencv_caffe::PReLUParameter& prelu_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PReLUParameter* release_prelu_param();
  ::opencv_caffe::PReLUParameter* mutable_prelu_param();
  void set_allocated_prelu_param(::opencv_caffe::PReLUParameter* value);
  void unsafe_arena_set_allocated_prelu_param(::opencv_caffe::PReLUParameter* value);
  ::opencv_caffe::PReLUParameter* unsafe_arena_release_prelu_param();

  private:
  const ::opencv_caffe::PReLUParameter& _internal_prelu_param() const;
  ::opencv_caffe::PReLUParameter* _internal_mutable_prelu_param();

  public:
  // optional .opencv_caffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  void clear_spp_param() ;
  const ::opencv_caffe::SPPParameter& spp_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SPPParameter* release_spp_param();
  ::opencv_caffe::SPPParameter* mutable_spp_param();
  void set_allocated_spp_param(::opencv_caffe::SPPParameter* value);
  void unsafe_arena_set_allocated_spp_param(::opencv_caffe::SPPParameter* value);
  ::opencv_caffe::SPPParameter* unsafe_arena_release_spp_param();

  private:
  const ::opencv_caffe::SPPParameter& _internal_spp_param() const;
  ::opencv_caffe::SPPParameter* _internal_mutable_spp_param();

  public:
  // optional .opencv_caffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  void clear_reshape_param() ;
  const ::opencv_caffe::ReshapeParameter& reshape_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ReshapeParameter* release_reshape_param();
  ::opencv_caffe::ReshapeParameter* mutable_reshape_param();
  void set_allocated_reshape_param(::opencv_caffe::ReshapeParameter* value);
  void unsafe_arena_set_allocated_reshape_param(::opencv_caffe::ReshapeParameter* value);
  ::opencv_caffe::ReshapeParameter* unsafe_arena_release_reshape_param();

  private:
  const ::opencv_caffe::ReshapeParameter& _internal_reshape_param() const;
  ::opencv_caffe::ReshapeParameter* _internal_mutable_reshape_param();

  public:
  // optional .opencv_caffe.LogParameter log_param = 134;
  bool has_log_param() const;
  void clear_log_param() ;
  const ::opencv_caffe::LogParameter& log_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::LogParameter* release_log_param();
  ::opencv_caffe::LogParameter* mutable_log_param();
  void set_allocated_log_param(::opencv_caffe::LogParameter* value);
  void unsafe_arena_set_allocated_log_param(::opencv_caffe::LogParameter* value);
  ::opencv_caffe::LogParameter* unsafe_arena_release_log_param();

  private:
  const ::opencv_caffe::LogParameter& _internal_log_param() const;
  ::opencv_caffe::LogParameter* _internal_mutable_log_param();

  public:
  // optional .opencv_caffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  void clear_flatten_param() ;
  const ::opencv_caffe::FlattenParameter& flatten_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::FlattenParameter* release_flatten_param();
  ::opencv_caffe::FlattenParameter* mutable_flatten_param();
  void set_allocated_flatten_param(::opencv_caffe::FlattenParameter* value);
  void unsafe_arena_set_allocated_flatten_param(::opencv_caffe::FlattenParameter* value);
  ::opencv_caffe::FlattenParameter* unsafe_arena_release_flatten_param();

  private:
  const ::opencv_caffe::FlattenParameter& _internal_flatten_param() const;
  ::opencv_caffe::FlattenParameter* _internal_mutable_flatten_param();

  public:
  // optional .opencv_caffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  void clear_reduction_param() ;
  const ::opencv_caffe::ReductionParameter& reduction_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ReductionParameter* release_reduction_param();
  ::opencv_caffe::ReductionParameter* mutable_reduction_param();
  void set_allocated_reduction_param(::opencv_caffe::ReductionParameter* value);
  void unsafe_arena_set_allocated_reduction_param(::opencv_caffe::ReductionParameter* value);
  ::opencv_caffe::ReductionParameter* unsafe_arena_release_reduction_param();

  private:
  const ::opencv_caffe::ReductionParameter& _internal_reduction_param() const;
  ::opencv_caffe::ReductionParameter* _internal_mutable_reduction_param();

  public:
  // optional .opencv_caffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  void clear_embed_param() ;
  const ::opencv_caffe::EmbedParameter& embed_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::EmbedParameter* release_embed_param();
  ::opencv_caffe::EmbedParameter* mutable_embed_param();
  void set_allocated_embed_param(::opencv_caffe::EmbedParameter* value);
  void unsafe_arena_set_allocated_embed_param(::opencv_caffe::EmbedParameter* value);
  ::opencv_caffe::EmbedParameter* unsafe_arena_release_embed_param();

  private:
  const ::opencv_caffe::EmbedParameter& _internal_embed_param() const;
  ::opencv_caffe::EmbedParameter* _internal_mutable_embed_param();

  public:
  // optional .opencv_caffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  void clear_tile_param() ;
  const ::opencv_caffe::TileParameter& tile_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::TileParameter* release_tile_param();
  ::opencv_caffe::TileParameter* mutable_tile_param();
  void set_allocated_tile_param(::opencv_caffe::TileParameter* value);
  void unsafe_arena_set_allocated_tile_param(::opencv_caffe::TileParameter* value);
  ::opencv_caffe::TileParameter* unsafe_arena_release_tile_param();

  private:
  const ::opencv_caffe::TileParameter& _internal_tile_param() const;
  ::opencv_caffe::TileParameter* _internal_mutable_tile_param();

  public:
  // optional .opencv_caffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  void clear_batch_norm_param() ;
  const ::opencv_caffe::BatchNormParameter& batch_norm_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::BatchNormParameter* release_batch_norm_param();
  ::opencv_caffe::BatchNormParameter* mutable_batch_norm_param();
  void set_allocated_batch_norm_param(::opencv_caffe::BatchNormParameter* value);
  void unsafe_arena_set_allocated_batch_norm_param(::opencv_caffe::BatchNormParameter* value);
  ::opencv_caffe::BatchNormParameter* unsafe_arena_release_batch_norm_param();

  private:
  const ::opencv_caffe::BatchNormParameter& _internal_batch_norm_param() const;
  ::opencv_caffe::BatchNormParameter* _internal_mutable_batch_norm_param();

  public:
  // optional .opencv_caffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  void clear_elu_param() ;
  const ::opencv_caffe::ELUParameter& elu_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ELUParameter* release_elu_param();
  ::opencv_caffe::ELUParameter* mutable_elu_param();
  void set_allocated_elu_param(::opencv_caffe::ELUParameter* value);
  void unsafe_arena_set_allocated_elu_param(::opencv_caffe::ELUParameter* value);
  ::opencv_caffe::ELUParameter* unsafe_arena_release_elu_param();

  private:
  const ::opencv_caffe::ELUParameter& _internal_elu_param() const;
  ::opencv_caffe::ELUParameter* _internal_mutable_elu_param();

  public:
  // optional .opencv_caffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  void clear_bias_param() ;
  const ::opencv_caffe::BiasParameter& bias_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::BiasParameter* release_bias_param();
  ::opencv_caffe::BiasParameter* mutable_bias_param();
  void set_allocated_bias_param(::opencv_caffe::BiasParameter* value);
  void unsafe_arena_set_allocated_bias_param(::opencv_caffe::BiasParameter* value);
  ::opencv_caffe::BiasParameter* unsafe_arena_release_bias_param();

  private:
  const ::opencv_caffe::BiasParameter& _internal_bias_param() const;
  ::opencv_caffe::BiasParameter* _internal_mutable_bias_param();

  public:
  // optional .opencv_caffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  void clear_scale_param() ;
  const ::opencv_caffe::ScaleParameter& scale_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ScaleParameter* release_scale_param();
  ::opencv_caffe::ScaleParameter* mutable_scale_param();
  void set_allocated_scale_param(::opencv_caffe::ScaleParameter* value);
  void unsafe_arena_set_allocated_scale_param(::opencv_caffe::ScaleParameter* value);
  ::opencv_caffe::ScaleParameter* unsafe_arena_release_scale_param();

  private:
  const ::opencv_caffe::ScaleParameter& _internal_scale_param() const;
  ::opencv_caffe::ScaleParameter* _internal_mutable_scale_param();

  public:
  // optional .opencv_caffe.InputParameter input_param = 143;
  bool has_input_param() const;
  void clear_input_param() ;
  const ::opencv_caffe::InputParameter& input_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::InputParameter* release_input_param();
  ::opencv_caffe::InputParameter* mutable_input_param();
  void set_allocated_input_param(::opencv_caffe::InputParameter* value);
  void unsafe_arena_set_allocated_input_param(::opencv_caffe::InputParameter* value);
  ::opencv_caffe::InputParameter* unsafe_arena_release_input_param();

  private:
  const ::opencv_caffe::InputParameter& _internal_input_param() const;
  ::opencv_caffe::InputParameter* _internal_mutable_input_param();

  public:
  // optional .opencv_caffe.CropParameter crop_param = 144;
  bool has_crop_param() const;
  void clear_crop_param() ;
  const ::opencv_caffe::CropParameter& crop_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::CropParameter* release_crop_param();
  ::opencv_caffe::CropParameter* mutable_crop_param();
  void set_allocated_crop_param(::opencv_caffe::CropParameter* value);
  void unsafe_arena_set_allocated_crop_param(::opencv_caffe::CropParameter* value);
  ::opencv_caffe::CropParameter* unsafe_arena_release_crop_param();

  private:
  const ::opencv_caffe::CropParameter& _internal_crop_param() const;
  ::opencv_caffe::CropParameter* _internal_mutable_crop_param();

  public:
  // optional .opencv_caffe.ParameterParameter parameter_param = 145;
  bool has_parameter_param() const;
  void clear_parameter_param() ;
  const ::opencv_caffe::ParameterParameter& parameter_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ParameterParameter* release_parameter_param();
  ::opencv_caffe::ParameterParameter* mutable_parameter_param();
  void set_allocated_parameter_param(::opencv_caffe::ParameterParameter* value);
  void unsafe_arena_set_allocated_parameter_param(::opencv_caffe::ParameterParameter* value);
  ::opencv_caffe::ParameterParameter* unsafe_arena_release_parameter_param();

  private:
  const ::opencv_caffe::ParameterParameter& _internal_parameter_param() const;
  ::opencv_caffe::ParameterParameter* _internal_mutable_parameter_param();

  public:
  // optional .opencv_caffe.RecurrentParameter recurrent_param = 146;
  bool has_recurrent_param() const;
  void clear_recurrent_param() ;
  const ::opencv_caffe::RecurrentParameter& recurrent_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::RecurrentParameter* release_recurrent_param();
  ::opencv_caffe::RecurrentParameter* mutable_recurrent_param();
  void set_allocated_recurrent_param(::opencv_caffe::RecurrentParameter* value);
  void unsafe_arena_set_allocated_recurrent_param(::opencv_caffe::RecurrentParameter* value);
  ::opencv_caffe::RecurrentParameter* unsafe_arena_release_recurrent_param();

  private:
  const ::opencv_caffe::RecurrentParameter& _internal_recurrent_param() const;
  ::opencv_caffe::RecurrentParameter* _internal_mutable_recurrent_param();

  public:
  // optional .opencv_caffe.DetectionOutputParameter detection_output_param = 147;
  bool has_detection_output_param() const;
  void clear_detection_output_param() ;
  const ::opencv_caffe::DetectionOutputParameter& detection_output_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DetectionOutputParameter* release_detection_output_param();
  ::opencv_caffe::DetectionOutputParameter* mutable_detection_output_param();
  void set_allocated_detection_output_param(::opencv_caffe::DetectionOutputParameter* value);
  void unsafe_arena_set_allocated_detection_output_param(::opencv_caffe::DetectionOutputParameter* value);
  ::opencv_caffe::DetectionOutputParameter* unsafe_arena_release_detection_output_param();

  private:
  const ::opencv_caffe::DetectionOutputParameter& _internal_detection_output_param() const;
  ::opencv_caffe::DetectionOutputParameter* _internal_mutable_detection_output_param();

  public:
  // optional .opencv_caffe.PermuteParameter permute_param = 148;
  bool has_permute_param() const;
  void clear_permute_param() ;
  const ::opencv_caffe::PermuteParameter& permute_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PermuteParameter* release_permute_param();
  ::opencv_caffe::PermuteParameter* mutable_permute_param();
  void set_allocated_permute_param(::opencv_caffe::PermuteParameter* value);
  void unsafe_arena_set_allocated_permute_param(::opencv_caffe::PermuteParameter* value);
  ::opencv_caffe::PermuteParameter* unsafe_arena_release_permute_param();

  private:
  const ::opencv_caffe::PermuteParameter& _internal_permute_param() const;
  ::opencv_caffe::PermuteParameter* _internal_mutable_permute_param();

  public:
  // optional .opencv_caffe.NormalizeBBoxParameter norm_param = 149;
  bool has_norm_param() const;
  void clear_norm_param() ;
  const ::opencv_caffe::NormalizeBBoxParameter& norm_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NormalizeBBoxParameter* release_norm_param();
  ::opencv_caffe::NormalizeBBoxParameter* mutable_norm_param();
  void set_allocated_norm_param(::opencv_caffe::NormalizeBBoxParameter* value);
  void unsafe_arena_set_allocated_norm_param(::opencv_caffe::NormalizeBBoxParameter* value);
  ::opencv_caffe::NormalizeBBoxParameter* unsafe_arena_release_norm_param();

  private:
  const ::opencv_caffe::NormalizeBBoxParameter& _internal_norm_param() const;
  ::opencv_caffe::NormalizeBBoxParameter* _internal_mutable_norm_param();

  public:
  // optional .opencv_caffe.PriorBoxParameter prior_box_param = 150;
  bool has_prior_box_param() const;
  void clear_prior_box_param() ;
  const ::opencv_caffe::PriorBoxParameter& prior_box_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PriorBoxParameter* release_prior_box_param();
  ::opencv_caffe::PriorBoxParameter* mutable_prior_box_param();
  void set_allocated_prior_box_param(::opencv_caffe::PriorBoxParameter* value);
  void unsafe_arena_set_allocated_prior_box_param(::opencv_caffe::PriorBoxParameter* value);
  ::opencv_caffe::PriorBoxParameter* unsafe_arena_release_prior_box_param();

  private:
  const ::opencv_caffe::PriorBoxParameter& _internal_prior_box_param() const;
  ::opencv_caffe::PriorBoxParameter* _internal_mutable_prior_box_param();

  public:
  // optional .opencv_caffe.ProposalParameter proposal_param = 201;
  bool has_proposal_param() const;
  void clear_proposal_param() ;
  const ::opencv_caffe::ProposalParameter& proposal_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ProposalParameter* release_proposal_param();
  ::opencv_caffe::ProposalParameter* mutable_proposal_param();
  void set_allocated_proposal_param(::opencv_caffe::ProposalParameter* value);
  void unsafe_arena_set_allocated_proposal_param(::opencv_caffe::ProposalParameter* value);
  ::opencv_caffe::ProposalParameter* unsafe_arena_release_proposal_param();

  private:
  const ::opencv_caffe::ProposalParameter& _internal_proposal_param() const;
  ::opencv_caffe::ProposalParameter* _internal_mutable_proposal_param();

  public:
  // optional .opencv_caffe.PSROIPoolingParameter psroi_pooling_param = 10002;
  bool has_psroi_pooling_param() const;
  void clear_psroi_pooling_param() ;
  const ::opencv_caffe::PSROIPoolingParameter& psroi_pooling_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PSROIPoolingParameter* release_psroi_pooling_param();
  ::opencv_caffe::PSROIPoolingParameter* mutable_psroi_pooling_param();
  void set_allocated_psroi_pooling_param(::opencv_caffe::PSROIPoolingParameter* value);
  void unsafe_arena_set_allocated_psroi_pooling_param(::opencv_caffe::PSROIPoolingParameter* value);
  ::opencv_caffe::PSROIPoolingParameter* unsafe_arena_release_psroi_pooling_param();

  private:
  const ::opencv_caffe::PSROIPoolingParameter& _internal_psroi_pooling_param() const;
  ::opencv_caffe::PSROIPoolingParameter* _internal_mutable_psroi_pooling_param();

  public:
  // optional .opencv_caffe.ROIPoolingParameter roi_pooling_param = 8266711;
  bool has_roi_pooling_param() const;
  void clear_roi_pooling_param() ;
  const ::opencv_caffe::ROIPoolingParameter& roi_pooling_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ROIPoolingParameter* release_roi_pooling_param();
  ::opencv_caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  void set_allocated_roi_pooling_param(::opencv_caffe::ROIPoolingParameter* value);
  void unsafe_arena_set_allocated_roi_pooling_param(::opencv_caffe::ROIPoolingParameter* value);
  ::opencv_caffe::ROIPoolingParameter* unsafe_arena_release_roi_pooling_param();

  private:
  const ::opencv_caffe::ROIPoolingParameter& _internal_roi_pooling_param() const;
  ::opencv_caffe::ROIPoolingParameter* _internal_mutable_roi_pooling_param();

  public:
  // optional .opencv_caffe.Phase phase = 10;
  bool has_phase() const;
  void clear_phase() ;
  ::opencv_caffe::Phase phase() const;
  void set_phase(::opencv_caffe::Phase value);

  private:
  ::opencv_caffe::Phase _internal_phase() const;
  void _internal_set_phase(::opencv_caffe::Phase value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.LayerParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 65, 59,
      117, 29>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> bottom_;
    ::google::protobuf::RepeatedPtrField<std::string> top_;
    ::google::protobuf::RepeatedField<float> loss_weight_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::ParamSpec > param_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto > blobs_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule > include_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule > exclude_;
    ::google::protobuf::RepeatedField<bool> propagate_down_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::opencv_caffe::TransformationParameter* transform_param_;
    ::opencv_caffe::LossParameter* loss_param_;
    ::opencv_caffe::AccuracyParameter* accuracy_param_;
    ::opencv_caffe::ArgMaxParameter* argmax_param_;
    ::opencv_caffe::ConcatParameter* concat_param_;
    ::opencv_caffe::ContrastiveLossParameter* contrastive_loss_param_;
    ::opencv_caffe::ConvolutionParameter* convolution_param_;
    ::opencv_caffe::DataParameter* data_param_;
    ::opencv_caffe::DropoutParameter* dropout_param_;
    ::opencv_caffe::DummyDataParameter* dummy_data_param_;
    ::opencv_caffe::EltwiseParameter* eltwise_param_;
    ::opencv_caffe::ExpParameter* exp_param_;
    ::opencv_caffe::HDF5DataParameter* hdf5_data_param_;
    ::opencv_caffe::HDF5OutputParameter* hdf5_output_param_;
    ::opencv_caffe::HingeLossParameter* hinge_loss_param_;
    ::opencv_caffe::ImageDataParameter* image_data_param_;
    ::opencv_caffe::InfogainLossParameter* infogain_loss_param_;
    ::opencv_caffe::InnerProductParameter* inner_product_param_;
    ::opencv_caffe::LRNParameter* lrn_param_;
    ::opencv_caffe::MemoryDataParameter* memory_data_param_;
    ::opencv_caffe::MVNParameter* mvn_param_;
    ::opencv_caffe::PoolingParameter* pooling_param_;
    ::opencv_caffe::PowerParameter* power_param_;
    ::opencv_caffe::ReLUParameter* relu_param_;
    ::opencv_caffe::SigmoidParameter* sigmoid_param_;
    ::opencv_caffe::SoftmaxParameter* softmax_param_;
    ::opencv_caffe::SliceParameter* slice_param_;
    ::opencv_caffe::TanHParameter* tanh_param_;
    ::opencv_caffe::ThresholdParameter* threshold_param_;
    ::opencv_caffe::WindowDataParameter* window_data_param_;
    ::opencv_caffe::PythonParameter* python_param_;
    ::opencv_caffe::PReLUParameter* prelu_param_;
    ::opencv_caffe::SPPParameter* spp_param_;
    ::opencv_caffe::ReshapeParameter* reshape_param_;
    ::opencv_caffe::LogParameter* log_param_;
    ::opencv_caffe::FlattenParameter* flatten_param_;
    ::opencv_caffe::ReductionParameter* reduction_param_;
    ::opencv_caffe::EmbedParameter* embed_param_;
    ::opencv_caffe::TileParameter* tile_param_;
    ::opencv_caffe::BatchNormParameter* batch_norm_param_;
    ::opencv_caffe::ELUParameter* elu_param_;
    ::opencv_caffe::BiasParameter* bias_param_;
    ::opencv_caffe::ScaleParameter* scale_param_;
    ::opencv_caffe::InputParameter* input_param_;
    ::opencv_caffe::CropParameter* crop_param_;
    ::opencv_caffe::ParameterParameter* parameter_param_;
    ::opencv_caffe::RecurrentParameter* recurrent_param_;
    ::opencv_caffe::DetectionOutputParameter* detection_output_param_;
    ::opencv_caffe::PermuteParameter* permute_param_;
    ::opencv_caffe::NormalizeBBoxParameter* norm_param_;
    ::opencv_caffe::PriorBoxParameter* prior_box_param_;
    ::opencv_caffe::ProposalParameter* proposal_param_;
    ::opencv_caffe::PSROIPoolingParameter* psroi_pooling_param_;
    ::opencv_caffe::ROIPoolingParameter* roi_pooling_param_;
    int phase_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class BlobProtoVector final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.BlobProtoVector) */ {
 public:
  inline BlobProtoVector() : BlobProtoVector(nullptr) {}
  ~BlobProtoVector() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlobProtoVector(::google::protobuf::internal::ConstantInitialized);

  inline BlobProtoVector(const BlobProtoVector& from)
      : BlobProtoVector(nullptr, from) {}
  BlobProtoVector(BlobProtoVector&& from) noexcept
    : BlobProtoVector() {
    *this = ::std::move(from);
  }

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProtoVector& operator=(BlobProtoVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlobProtoVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlobProtoVector* internal_default_instance() {
    return reinterpret_cast<const BlobProtoVector*>(
               &_BlobProtoVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlobProtoVector& a, BlobProtoVector& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProtoVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProtoVector* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlobProtoVector* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlobProtoVector>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlobProtoVector& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BlobProtoVector& from) {
    BlobProtoVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlobProtoVector* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.BlobProtoVector";
  }
  protected:
  explicit BlobProtoVector(::google::protobuf::Arena* arena);
  BlobProtoVector(::google::protobuf::Arena* arena, const BlobProtoVector& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobsFieldNumber = 1,
  };
  // repeated .opencv_caffe.BlobProto blobs = 1;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;

  public:
  void clear_blobs() ;
  ::opencv_caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& _internal_blobs() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* _internal_mutable_blobs();
  public:
  const ::opencv_caffe::BlobProto& blobs(int index) const;
  ::opencv_caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >&
      blobs() const;
  // @@protoc_insertion_point(class_scope:opencv_caffe.BlobProtoVector)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto > blobs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class V1LayerParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.V1LayerParameter) */ {
 public:
  inline V1LayerParameter() : V1LayerParameter(nullptr) {}
  ~V1LayerParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR V1LayerParameter(::google::protobuf::internal::ConstantInitialized);

  inline V1LayerParameter(const V1LayerParameter& from)
      : V1LayerParameter(nullptr, from) {}
  V1LayerParameter(V1LayerParameter&& from) noexcept
    : V1LayerParameter() {
    *this = ::std::move(from);
  }

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline V1LayerParameter& operator=(V1LayerParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V1LayerParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const V1LayerParameter* internal_default_instance() {
    return reinterpret_cast<const V1LayerParameter*>(
               &_V1LayerParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(V1LayerParameter& a, V1LayerParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(V1LayerParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V1LayerParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V1LayerParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V1LayerParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const V1LayerParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const V1LayerParameter& from) {
    V1LayerParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(V1LayerParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.V1LayerParameter";
  }
  protected:
  explicit V1LayerParameter(::google::protobuf::Arena* arena);
  V1LayerParameter(::google::protobuf::Arena* arena, const V1LayerParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using LayerType = V1LayerParameter_LayerType;
  static constexpr LayerType NONE = V1LayerParameter_LayerType_NONE;
  static constexpr LayerType ABSVAL = V1LayerParameter_LayerType_ABSVAL;
  static constexpr LayerType ACCURACY = V1LayerParameter_LayerType_ACCURACY;
  static constexpr LayerType ARGMAX = V1LayerParameter_LayerType_ARGMAX;
  static constexpr LayerType BNLL = V1LayerParameter_LayerType_BNLL;
  static constexpr LayerType CONCAT = V1LayerParameter_LayerType_CONCAT;
  static constexpr LayerType CONTRASTIVE_LOSS = V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static constexpr LayerType CONVOLUTION = V1LayerParameter_LayerType_CONVOLUTION;
  static constexpr LayerType DATA = V1LayerParameter_LayerType_DATA;
  static constexpr LayerType DECONVOLUTION = V1LayerParameter_LayerType_DECONVOLUTION;
  static constexpr LayerType DROPOUT = V1LayerParameter_LayerType_DROPOUT;
  static constexpr LayerType DUMMY_DATA = V1LayerParameter_LayerType_DUMMY_DATA;
  static constexpr LayerType EUCLIDEAN_LOSS = V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static constexpr LayerType ELTWISE = V1LayerParameter_LayerType_ELTWISE;
  static constexpr LayerType EXP = V1LayerParameter_LayerType_EXP;
  static constexpr LayerType FLATTEN = V1LayerParameter_LayerType_FLATTEN;
  static constexpr LayerType HDF5_DATA = V1LayerParameter_LayerType_HDF5_DATA;
  static constexpr LayerType HDF5_OUTPUT = V1LayerParameter_LayerType_HDF5_OUTPUT;
  static constexpr LayerType HINGE_LOSS = V1LayerParameter_LayerType_HINGE_LOSS;
  static constexpr LayerType IM2COL = V1LayerParameter_LayerType_IM2COL;
  static constexpr LayerType IMAGE_DATA = V1LayerParameter_LayerType_IMAGE_DATA;
  static constexpr LayerType INFOGAIN_LOSS = V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static constexpr LayerType INNER_PRODUCT = V1LayerParameter_LayerType_INNER_PRODUCT;
  static constexpr LayerType LRN = V1LayerParameter_LayerType_LRN;
  static constexpr LayerType MEMORY_DATA = V1LayerParameter_LayerType_MEMORY_DATA;
  static constexpr LayerType MULTINOMIAL_LOGISTIC_LOSS = V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static constexpr LayerType MVN = V1LayerParameter_LayerType_MVN;
  static constexpr LayerType POOLING = V1LayerParameter_LayerType_POOLING;
  static constexpr LayerType POWER = V1LayerParameter_LayerType_POWER;
  static constexpr LayerType RELU = V1LayerParameter_LayerType_RELU;
  static constexpr LayerType SIGMOID = V1LayerParameter_LayerType_SIGMOID;
  static constexpr LayerType SIGMOID_CROSS_ENTROPY_LOSS = V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static constexpr LayerType SILENCE = V1LayerParameter_LayerType_SILENCE;
  static constexpr LayerType SOFTMAX = V1LayerParameter_LayerType_SOFTMAX;
  static constexpr LayerType SOFTMAX_LOSS = V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static constexpr LayerType SPLIT = V1LayerParameter_LayerType_SPLIT;
  static constexpr LayerType SLICE = V1LayerParameter_LayerType_SLICE;
  static constexpr LayerType TANH = V1LayerParameter_LayerType_TANH;
  static constexpr LayerType WINDOW_DATA = V1LayerParameter_LayerType_WINDOW_DATA;
  static constexpr LayerType THRESHOLD = V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN = V1LayerParameter_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX = V1LayerParameter_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  template <typename T>
  static inline const std::string& LayerType_Name(T value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(absl::string_view name, LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  using DimCheckMode = V1LayerParameter_DimCheckMode;
  static constexpr DimCheckMode STRICT = V1LayerParameter_DimCheckMode_STRICT;
  static constexpr DimCheckMode PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static constexpr DimCheckMode DimCheckMode_MIN = V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static constexpr DimCheckMode DimCheckMode_MAX = V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static constexpr int DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  template <typename T>
  static inline const std::string& DimCheckMode_Name(T value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(absl::string_view name, DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBottomFieldNumber = 2,
    kTopFieldNumber = 3,
    kBlobsFieldNumber = 6,
    kBlobsLrFieldNumber = 7,
    kWeightDecayFieldNumber = 8,
    kIncludeFieldNumber = 32,
    kExcludeFieldNumber = 33,
    kLossWeightFieldNumber = 35,
    kParamFieldNumber = 1001,
    kBlobShareModeFieldNumber = 1002,
    kNameFieldNumber = 4,
    kLayerFieldNumber = 1,
    kConcatParamFieldNumber = 9,
    kConvolutionParamFieldNumber = 10,
    kDataParamFieldNumber = 11,
    kDropoutParamFieldNumber = 12,
    kHdf5DataParamFieldNumber = 13,
    kHdf5OutputParamFieldNumber = 14,
    kImageDataParamFieldNumber = 15,
    kInfogainLossParamFieldNumber = 16,
    kInnerProductParamFieldNumber = 17,
    kLrnParamFieldNumber = 18,
    kPoolingParamFieldNumber = 19,
    kWindowDataParamFieldNumber = 20,
    kPowerParamFieldNumber = 21,
    kMemoryDataParamFieldNumber = 22,
    kArgmaxParamFieldNumber = 23,
    kEltwiseParamFieldNumber = 24,
    kThresholdParamFieldNumber = 25,
    kDummyDataParamFieldNumber = 26,
    kAccuracyParamFieldNumber = 27,
    kHingeLossParamFieldNumber = 29,
    kReluParamFieldNumber = 30,
    kSliceParamFieldNumber = 31,
    kMvnParamFieldNumber = 34,
    kTransformParamFieldNumber = 36,
    kTanhParamFieldNumber = 37,
    kSigmoidParamFieldNumber = 38,
    kSoftmaxParamFieldNumber = 39,
    kContrastiveLossParamFieldNumber = 40,
    kExpParamFieldNumber = 41,
    kLossParamFieldNumber = 42,
    kTypeFieldNumber = 5,
  };
  // repeated string bottom = 2;
  int bottom_size() const;
  private:
  int _internal_bottom_size() const;

  public:
  void clear_bottom() ;
  const std::string& bottom(int index) const;
  std::string* mutable_bottom(int index);
  void set_bottom(int index, const std::string& value);
  void set_bottom(int index, std::string&& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, std::size_t size);
  void set_bottom(int index, absl::string_view value);
  std::string* add_bottom();
  void add_bottom(const std::string& value);
  void add_bottom(std::string&& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, std::size_t size);
  void add_bottom(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_bottom();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_bottom() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_bottom();

  public:
  // repeated string top = 3;
  int top_size() const;
  private:
  int _internal_top_size() const;

  public:
  void clear_top() ;
  const std::string& top(int index) const;
  std::string* mutable_top(int index);
  void set_top(int index, const std::string& value);
  void set_top(int index, std::string&& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, std::size_t size);
  void set_top(int index, absl::string_view value);
  std::string* add_top();
  void add_top(const std::string& value);
  void add_top(std::string&& value);
  void add_top(const char* value);
  void add_top(const char* value, std::size_t size);
  void add_top(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_top();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_top() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_top();

  public:
  // repeated .opencv_caffe.BlobProto blobs = 6;
  int blobs_size() const;
  private:
  int _internal_blobs_size() const;

  public:
  void clear_blobs() ;
  ::opencv_caffe::BlobProto* mutable_blobs(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >*
      mutable_blobs();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& _internal_blobs() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* _internal_mutable_blobs();
  public:
  const ::opencv_caffe::BlobProto& blobs(int index) const;
  ::opencv_caffe::BlobProto* add_blobs();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto >&
      blobs() const;
  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  private:
  int _internal_blobs_lr_size() const;

  public:
  void clear_blobs_lr() ;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField<float>& blobs_lr() const;
  ::google::protobuf::RepeatedField<float>* mutable_blobs_lr();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_blobs_lr() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_blobs_lr();

  public:
  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  private:
  int _internal_weight_decay_size() const;

  public:
  void clear_weight_decay() ;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField<float>& weight_decay() const;
  ::google::protobuf::RepeatedField<float>* mutable_weight_decay();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_weight_decay() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_weight_decay();

  public:
  // repeated .opencv_caffe.NetStateRule include = 32;
  int include_size() const;
  private:
  int _internal_include_size() const;

  public:
  void clear_include() ;
  ::opencv_caffe::NetStateRule* mutable_include(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >*
      mutable_include();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& _internal_include() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* _internal_mutable_include();
  public:
  const ::opencv_caffe::NetStateRule& include(int index) const;
  ::opencv_caffe::NetStateRule* add_include();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >&
      include() const;
  // repeated .opencv_caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  private:
  int _internal_exclude_size() const;

  public:
  void clear_exclude() ;
  ::opencv_caffe::NetStateRule* mutable_exclude(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >*
      mutable_exclude();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& _internal_exclude() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* _internal_mutable_exclude();
  public:
  const ::opencv_caffe::NetStateRule& exclude(int index) const;
  ::opencv_caffe::NetStateRule* add_exclude();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule >&
      exclude() const;
  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  private:
  int _internal_loss_weight_size() const;

  public:
  void clear_loss_weight() ;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField<float>& loss_weight() const;
  ::google::protobuf::RepeatedField<float>* mutable_loss_weight();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_loss_weight() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_loss_weight();

  public:
  // repeated string param = 1001;
  int param_size() const;
  private:
  int _internal_param_size() const;

  public:
  void clear_param() ;
  const std::string& param(int index) const;
  std::string* mutable_param(int index);
  void set_param(int index, const std::string& value);
  void set_param(int index, std::string&& value);
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, std::size_t size);
  void set_param(int index, absl::string_view value);
  std::string* add_param();
  void add_param(const std::string& value);
  void add_param(std::string&& value);
  void add_param(const char* value);
  void add_param(const char* value, std::size_t size);
  void add_param(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& param() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_param();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_param() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_param();

  public:
  // repeated .opencv_caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  private:
  int _internal_blob_share_mode_size() const;

  public:
  void clear_blob_share_mode() ;
  public:
  ::opencv_caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::opencv_caffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::opencv_caffe::V1LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_blob_share_mode();

  public:
  // optional string name = 4;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .opencv_caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer() ;
  const ::opencv_caffe::V0LayerParameter& layer() const;
  PROTOBUF_NODISCARD ::opencv_caffe::V0LayerParameter* release_layer();
  ::opencv_caffe::V0LayerParameter* mutable_layer();
  void set_allocated_layer(::opencv_caffe::V0LayerParameter* value);
  void unsafe_arena_set_allocated_layer(::opencv_caffe::V0LayerParameter* value);
  ::opencv_caffe::V0LayerParameter* unsafe_arena_release_layer();

  private:
  const ::opencv_caffe::V0LayerParameter& _internal_layer() const;
  ::opencv_caffe::V0LayerParameter* _internal_mutable_layer();

  public:
  // optional .opencv_caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param() ;
  const ::opencv_caffe::ConcatParameter& concat_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ConcatParameter* release_concat_param();
  ::opencv_caffe::ConcatParameter* mutable_concat_param();
  void set_allocated_concat_param(::opencv_caffe::ConcatParameter* value);
  void unsafe_arena_set_allocated_concat_param(::opencv_caffe::ConcatParameter* value);
  ::opencv_caffe::ConcatParameter* unsafe_arena_release_concat_param();

  private:
  const ::opencv_caffe::ConcatParameter& _internal_concat_param() const;
  ::opencv_caffe::ConcatParameter* _internal_mutable_concat_param();

  public:
  // optional .opencv_caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param() ;
  const ::opencv_caffe::ConvolutionParameter& convolution_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ConvolutionParameter* release_convolution_param();
  ::opencv_caffe::ConvolutionParameter* mutable_convolution_param();
  void set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value);
  void unsafe_arena_set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value);
  ::opencv_caffe::ConvolutionParameter* unsafe_arena_release_convolution_param();

  private:
  const ::opencv_caffe::ConvolutionParameter& _internal_convolution_param() const;
  ::opencv_caffe::ConvolutionParameter* _internal_mutable_convolution_param();

  public:
  // optional .opencv_caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param() ;
  const ::opencv_caffe::DataParameter& data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DataParameter* release_data_param();
  ::opencv_caffe::DataParameter* mutable_data_param();
  void set_allocated_data_param(::opencv_caffe::DataParameter* value);
  void unsafe_arena_set_allocated_data_param(::opencv_caffe::DataParameter* value);
  ::opencv_caffe::DataParameter* unsafe_arena_release_data_param();

  private:
  const ::opencv_caffe::DataParameter& _internal_data_param() const;
  ::opencv_caffe::DataParameter* _internal_mutable_data_param();

  public:
  // optional .opencv_caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param() ;
  const ::opencv_caffe::DropoutParameter& dropout_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DropoutParameter* release_dropout_param();
  ::opencv_caffe::DropoutParameter* mutable_dropout_param();
  void set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value);
  void unsafe_arena_set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value);
  ::opencv_caffe::DropoutParameter* unsafe_arena_release_dropout_param();

  private:
  const ::opencv_caffe::DropoutParameter& _internal_dropout_param() const;
  ::opencv_caffe::DropoutParameter* _internal_mutable_dropout_param();

  public:
  // optional .opencv_caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param() ;
  const ::opencv_caffe::HDF5DataParameter& hdf5_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HDF5DataParameter* release_hdf5_data_param();
  ::opencv_caffe::HDF5DataParameter* mutable_hdf5_data_param();
  void set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value);
  void unsafe_arena_set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value);
  ::opencv_caffe::HDF5DataParameter* unsafe_arena_release_hdf5_data_param();

  private:
  const ::opencv_caffe::HDF5DataParameter& _internal_hdf5_data_param() const;
  ::opencv_caffe::HDF5DataParameter* _internal_mutable_hdf5_data_param();

  public:
  // optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param() ;
  const ::opencv_caffe::HDF5OutputParameter& hdf5_output_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HDF5OutputParameter* release_hdf5_output_param();
  ::opencv_caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  void set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  void unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value);
  ::opencv_caffe::HDF5OutputParameter* unsafe_arena_release_hdf5_output_param();

  private:
  const ::opencv_caffe::HDF5OutputParameter& _internal_hdf5_output_param() const;
  ::opencv_caffe::HDF5OutputParameter* _internal_mutable_hdf5_output_param();

  public:
  // optional .opencv_caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param() ;
  const ::opencv_caffe::ImageDataParameter& image_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ImageDataParameter* release_image_data_param();
  ::opencv_caffe::ImageDataParameter* mutable_image_data_param();
  void set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value);
  void unsafe_arena_set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value);
  ::opencv_caffe::ImageDataParameter* unsafe_arena_release_image_data_param();

  private:
  const ::opencv_caffe::ImageDataParameter& _internal_image_data_param() const;
  ::opencv_caffe::ImageDataParameter* _internal_mutable_image_data_param();

  public:
  // optional .opencv_caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param() ;
  const ::opencv_caffe::InfogainLossParameter& infogain_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::InfogainLossParameter* release_infogain_loss_param();
  ::opencv_caffe::InfogainLossParameter* mutable_infogain_loss_param();
  void set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value);
  void unsafe_arena_set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value);
  ::opencv_caffe::InfogainLossParameter* unsafe_arena_release_infogain_loss_param();

  private:
  const ::opencv_caffe::InfogainLossParameter& _internal_infogain_loss_param() const;
  ::opencv_caffe::InfogainLossParameter* _internal_mutable_infogain_loss_param();

  public:
  // optional .opencv_caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param() ;
  const ::opencv_caffe::InnerProductParameter& inner_product_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::InnerProductParameter* release_inner_product_param();
  ::opencv_caffe::InnerProductParameter* mutable_inner_product_param();
  void set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value);
  void unsafe_arena_set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value);
  ::opencv_caffe::InnerProductParameter* unsafe_arena_release_inner_product_param();

  private:
  const ::opencv_caffe::InnerProductParameter& _internal_inner_product_param() const;
  ::opencv_caffe::InnerProductParameter* _internal_mutable_inner_product_param();

  public:
  // optional .opencv_caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param() ;
  const ::opencv_caffe::LRNParameter& lrn_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::LRNParameter* release_lrn_param();
  ::opencv_caffe::LRNParameter* mutable_lrn_param();
  void set_allocated_lrn_param(::opencv_caffe::LRNParameter* value);
  void unsafe_arena_set_allocated_lrn_param(::opencv_caffe::LRNParameter* value);
  ::opencv_caffe::LRNParameter* unsafe_arena_release_lrn_param();

  private:
  const ::opencv_caffe::LRNParameter& _internal_lrn_param() const;
  ::opencv_caffe::LRNParameter* _internal_mutable_lrn_param();

  public:
  // optional .opencv_caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param() ;
  const ::opencv_caffe::PoolingParameter& pooling_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PoolingParameter* release_pooling_param();
  ::opencv_caffe::PoolingParameter* mutable_pooling_param();
  void set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value);
  void unsafe_arena_set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value);
  ::opencv_caffe::PoolingParameter* unsafe_arena_release_pooling_param();

  private:
  const ::opencv_caffe::PoolingParameter& _internal_pooling_param() const;
  ::opencv_caffe::PoolingParameter* _internal_mutable_pooling_param();

  public:
  // optional .opencv_caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param() ;
  const ::opencv_caffe::WindowDataParameter& window_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::WindowDataParameter* release_window_data_param();
  ::opencv_caffe::WindowDataParameter* mutable_window_data_param();
  void set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value);
  void unsafe_arena_set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value);
  ::opencv_caffe::WindowDataParameter* unsafe_arena_release_window_data_param();

  private:
  const ::opencv_caffe::WindowDataParameter& _internal_window_data_param() const;
  ::opencv_caffe::WindowDataParameter* _internal_mutable_window_data_param();

  public:
  // optional .opencv_caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param() ;
  const ::opencv_caffe::PowerParameter& power_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::PowerParameter* release_power_param();
  ::opencv_caffe::PowerParameter* mutable_power_param();
  void set_allocated_power_param(::opencv_caffe::PowerParameter* value);
  void unsafe_arena_set_allocated_power_param(::opencv_caffe::PowerParameter* value);
  ::opencv_caffe::PowerParameter* unsafe_arena_release_power_param();

  private:
  const ::opencv_caffe::PowerParameter& _internal_power_param() const;
  ::opencv_caffe::PowerParameter* _internal_mutable_power_param();

  public:
  // optional .opencv_caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param() ;
  const ::opencv_caffe::MemoryDataParameter& memory_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::MemoryDataParameter* release_memory_data_param();
  ::opencv_caffe::MemoryDataParameter* mutable_memory_data_param();
  void set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value);
  void unsafe_arena_set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value);
  ::opencv_caffe::MemoryDataParameter* unsafe_arena_release_memory_data_param();

  private:
  const ::opencv_caffe::MemoryDataParameter& _internal_memory_data_param() const;
  ::opencv_caffe::MemoryDataParameter* _internal_mutable_memory_data_param();

  public:
  // optional .opencv_caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param() ;
  const ::opencv_caffe::ArgMaxParameter& argmax_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ArgMaxParameter* release_argmax_param();
  ::opencv_caffe::ArgMaxParameter* mutable_argmax_param();
  void set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value);
  void unsafe_arena_set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value);
  ::opencv_caffe::ArgMaxParameter* unsafe_arena_release_argmax_param();

  private:
  const ::opencv_caffe::ArgMaxParameter& _internal_argmax_param() const;
  ::opencv_caffe::ArgMaxParameter* _internal_mutable_argmax_param();

  public:
  // optional .opencv_caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param() ;
  const ::opencv_caffe::EltwiseParameter& eltwise_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::EltwiseParameter* release_eltwise_param();
  ::opencv_caffe::EltwiseParameter* mutable_eltwise_param();
  void set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value);
  void unsafe_arena_set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value);
  ::opencv_caffe::EltwiseParameter* unsafe_arena_release_eltwise_param();

  private:
  const ::opencv_caffe::EltwiseParameter& _internal_eltwise_param() const;
  ::opencv_caffe::EltwiseParameter* _internal_mutable_eltwise_param();

  public:
  // optional .opencv_caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param() ;
  const ::opencv_caffe::ThresholdParameter& threshold_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ThresholdParameter* release_threshold_param();
  ::opencv_caffe::ThresholdParameter* mutable_threshold_param();
  void set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value);
  void unsafe_arena_set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value);
  ::opencv_caffe::ThresholdParameter* unsafe_arena_release_threshold_param();

  private:
  const ::opencv_caffe::ThresholdParameter& _internal_threshold_param() const;
  ::opencv_caffe::ThresholdParameter* _internal_mutable_threshold_param();

  public:
  // optional .opencv_caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param() ;
  const ::opencv_caffe::DummyDataParameter& dummy_data_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::DummyDataParameter* release_dummy_data_param();
  ::opencv_caffe::DummyDataParameter* mutable_dummy_data_param();
  void set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value);
  void unsafe_arena_set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value);
  ::opencv_caffe::DummyDataParameter* unsafe_arena_release_dummy_data_param();

  private:
  const ::opencv_caffe::DummyDataParameter& _internal_dummy_data_param() const;
  ::opencv_caffe::DummyDataParameter* _internal_mutable_dummy_data_param();

  public:
  // optional .opencv_caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param() ;
  const ::opencv_caffe::AccuracyParameter& accuracy_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::AccuracyParameter* release_accuracy_param();
  ::opencv_caffe::AccuracyParameter* mutable_accuracy_param();
  void set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value);
  void unsafe_arena_set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value);
  ::opencv_caffe::AccuracyParameter* unsafe_arena_release_accuracy_param();

  private:
  const ::opencv_caffe::AccuracyParameter& _internal_accuracy_param() const;
  ::opencv_caffe::AccuracyParameter* _internal_mutable_accuracy_param();

  public:
  // optional .opencv_caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param() ;
  const ::opencv_caffe::HingeLossParameter& hinge_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::HingeLossParameter* release_hinge_loss_param();
  ::opencv_caffe::HingeLossParameter* mutable_hinge_loss_param();
  void set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value);
  void unsafe_arena_set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value);
  ::opencv_caffe::HingeLossParameter* unsafe_arena_release_hinge_loss_param();

  private:
  const ::opencv_caffe::HingeLossParameter& _internal_hinge_loss_param() const;
  ::opencv_caffe::HingeLossParameter* _internal_mutable_hinge_loss_param();

  public:
  // optional .opencv_caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param() ;
  const ::opencv_caffe::ReLUParameter& relu_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ReLUParameter* release_relu_param();
  ::opencv_caffe::ReLUParameter* mutable_relu_param();
  void set_allocated_relu_param(::opencv_caffe::ReLUParameter* value);
  void unsafe_arena_set_allocated_relu_param(::opencv_caffe::ReLUParameter* value);
  ::opencv_caffe::ReLUParameter* unsafe_arena_release_relu_param();

  private:
  const ::opencv_caffe::ReLUParameter& _internal_relu_param() const;
  ::opencv_caffe::ReLUParameter* _internal_mutable_relu_param();

  public:
  // optional .opencv_caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param() ;
  const ::opencv_caffe::SliceParameter& slice_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SliceParameter* release_slice_param();
  ::opencv_caffe::SliceParameter* mutable_slice_param();
  void set_allocated_slice_param(::opencv_caffe::SliceParameter* value);
  void unsafe_arena_set_allocated_slice_param(::opencv_caffe::SliceParameter* value);
  ::opencv_caffe::SliceParameter* unsafe_arena_release_slice_param();

  private:
  const ::opencv_caffe::SliceParameter& _internal_slice_param() const;
  ::opencv_caffe::SliceParameter* _internal_mutable_slice_param();

  public:
  // optional .opencv_caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param() ;
  const ::opencv_caffe::MVNParameter& mvn_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::MVNParameter* release_mvn_param();
  ::opencv_caffe::MVNParameter* mutable_mvn_param();
  void set_allocated_mvn_param(::opencv_caffe::MVNParameter* value);
  void unsafe_arena_set_allocated_mvn_param(::opencv_caffe::MVNParameter* value);
  ::opencv_caffe::MVNParameter* unsafe_arena_release_mvn_param();

  private:
  const ::opencv_caffe::MVNParameter& _internal_mvn_param() const;
  ::opencv_caffe::MVNParameter* _internal_mutable_mvn_param();

  public:
  // optional .opencv_caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param() ;
  const ::opencv_caffe::TransformationParameter& transform_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::TransformationParameter* release_transform_param();
  ::opencv_caffe::TransformationParameter* mutable_transform_param();
  void set_allocated_transform_param(::opencv_caffe::TransformationParameter* value);
  void unsafe_arena_set_allocated_transform_param(::opencv_caffe::TransformationParameter* value);
  ::opencv_caffe::TransformationParameter* unsafe_arena_release_transform_param();

  private:
  const ::opencv_caffe::TransformationParameter& _internal_transform_param() const;
  ::opencv_caffe::TransformationParameter* _internal_mutable_transform_param();

  public:
  // optional .opencv_caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param() ;
  const ::opencv_caffe::TanHParameter& tanh_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::TanHParameter* release_tanh_param();
  ::opencv_caffe::TanHParameter* mutable_tanh_param();
  void set_allocated_tanh_param(::opencv_caffe::TanHParameter* value);
  void unsafe_arena_set_allocated_tanh_param(::opencv_caffe::TanHParameter* value);
  ::opencv_caffe::TanHParameter* unsafe_arena_release_tanh_param();

  private:
  const ::opencv_caffe::TanHParameter& _internal_tanh_param() const;
  ::opencv_caffe::TanHParameter* _internal_mutable_tanh_param();

  public:
  // optional .opencv_caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param() ;
  const ::opencv_caffe::SigmoidParameter& sigmoid_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SigmoidParameter* release_sigmoid_param();
  ::opencv_caffe::SigmoidParameter* mutable_sigmoid_param();
  void set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value);
  void unsafe_arena_set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value);
  ::opencv_caffe::SigmoidParameter* unsafe_arena_release_sigmoid_param();

  private:
  const ::opencv_caffe::SigmoidParameter& _internal_sigmoid_param() const;
  ::opencv_caffe::SigmoidParameter* _internal_mutable_sigmoid_param();

  public:
  // optional .opencv_caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param() ;
  const ::opencv_caffe::SoftmaxParameter& softmax_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::SoftmaxParameter* release_softmax_param();
  ::opencv_caffe::SoftmaxParameter* mutable_softmax_param();
  void set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value);
  void unsafe_arena_set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value);
  ::opencv_caffe::SoftmaxParameter* unsafe_arena_release_softmax_param();

  private:
  const ::opencv_caffe::SoftmaxParameter& _internal_softmax_param() const;
  ::opencv_caffe::SoftmaxParameter* _internal_mutable_softmax_param();

  public:
  // optional .opencv_caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param() ;
  const ::opencv_caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  ::opencv_caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value);
  void unsafe_arena_set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value);
  ::opencv_caffe::ContrastiveLossParameter* unsafe_arena_release_contrastive_loss_param();

  private:
  const ::opencv_caffe::ContrastiveLossParameter& _internal_contrastive_loss_param() const;
  ::opencv_caffe::ContrastiveLossParameter* _internal_mutable_contrastive_loss_param();

  public:
  // optional .opencv_caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param() ;
  const ::opencv_caffe::ExpParameter& exp_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::ExpParameter* release_exp_param();
  ::opencv_caffe::ExpParameter* mutable_exp_param();
  void set_allocated_exp_param(::opencv_caffe::ExpParameter* value);
  void unsafe_arena_set_allocated_exp_param(::opencv_caffe::ExpParameter* value);
  ::opencv_caffe::ExpParameter* unsafe_arena_release_exp_param();

  private:
  const ::opencv_caffe::ExpParameter& _internal_exp_param() const;
  ::opencv_caffe::ExpParameter* _internal_mutable_exp_param();

  public:
  // optional .opencv_caffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  void clear_loss_param() ;
  const ::opencv_caffe::LossParameter& loss_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::LossParameter* release_loss_param();
  ::opencv_caffe::LossParameter* mutable_loss_param();
  void set_allocated_loss_param(::opencv_caffe::LossParameter* value);
  void unsafe_arena_set_allocated_loss_param(::opencv_caffe::LossParameter* value);
  ::opencv_caffe::LossParameter* unsafe_arena_release_loss_param();

  private:
  const ::opencv_caffe::LossParameter& _internal_loss_param() const;
  ::opencv_caffe::LossParameter* _internal_mutable_loss_param();

  public:
  // optional .opencv_caffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type() ;
  ::opencv_caffe::V1LayerParameter_LayerType type() const;
  void set_type(::opencv_caffe::V1LayerParameter_LayerType value);

  private:
  ::opencv_caffe::V1LayerParameter_LayerType _internal_type() const;
  void _internal_set_type(::opencv_caffe::V1LayerParameter_LayerType value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.V1LayerParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 43, 36,
      96, 12>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> bottom_;
    ::google::protobuf::RepeatedPtrField<std::string> top_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobProto > blobs_;
    ::google::protobuf::RepeatedField<float> blobs_lr_;
    ::google::protobuf::RepeatedField<float> weight_decay_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule > include_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetStateRule > exclude_;
    ::google::protobuf::RepeatedField<float> loss_weight_;
    ::google::protobuf::RepeatedPtrField<std::string> param_;
    ::google::protobuf::RepeatedField<int> blob_share_mode_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::opencv_caffe::V0LayerParameter* layer_;
    ::opencv_caffe::ConcatParameter* concat_param_;
    ::opencv_caffe::ConvolutionParameter* convolution_param_;
    ::opencv_caffe::DataParameter* data_param_;
    ::opencv_caffe::DropoutParameter* dropout_param_;
    ::opencv_caffe::HDF5DataParameter* hdf5_data_param_;
    ::opencv_caffe::HDF5OutputParameter* hdf5_output_param_;
    ::opencv_caffe::ImageDataParameter* image_data_param_;
    ::opencv_caffe::InfogainLossParameter* infogain_loss_param_;
    ::opencv_caffe::InnerProductParameter* inner_product_param_;
    ::opencv_caffe::LRNParameter* lrn_param_;
    ::opencv_caffe::PoolingParameter* pooling_param_;
    ::opencv_caffe::WindowDataParameter* window_data_param_;
    ::opencv_caffe::PowerParameter* power_param_;
    ::opencv_caffe::MemoryDataParameter* memory_data_param_;
    ::opencv_caffe::ArgMaxParameter* argmax_param_;
    ::opencv_caffe::EltwiseParameter* eltwise_param_;
    ::opencv_caffe::ThresholdParameter* threshold_param_;
    ::opencv_caffe::DummyDataParameter* dummy_data_param_;
    ::opencv_caffe::AccuracyParameter* accuracy_param_;
    ::opencv_caffe::HingeLossParameter* hinge_loss_param_;
    ::opencv_caffe::ReLUParameter* relu_param_;
    ::opencv_caffe::SliceParameter* slice_param_;
    ::opencv_caffe::MVNParameter* mvn_param_;
    ::opencv_caffe::TransformationParameter* transform_param_;
    ::opencv_caffe::TanHParameter* tanh_param_;
    ::opencv_caffe::SigmoidParameter* sigmoid_param_;
    ::opencv_caffe::SoftmaxParameter* softmax_param_;
    ::opencv_caffe::ContrastiveLossParameter* contrastive_loss_param_;
    ::opencv_caffe::ExpParameter* exp_param_;
    ::opencv_caffe::LossParameter* loss_param_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class NetParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.NetParameter) */ {
 public:
  inline NetParameter() : NetParameter(nullptr) {}
  ~NetParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NetParameter(::google::protobuf::internal::ConstantInitialized);

  inline NetParameter(const NetParameter& from)
      : NetParameter(nullptr, from) {}
  NetParameter(NetParameter&& from) noexcept
    : NetParameter() {
    *this = ::std::move(from);
  }

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetParameter& operator=(NetParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetParameter* internal_default_instance() {
    return reinterpret_cast<const NetParameter*>(
               &_NetParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetParameter& a, NetParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(NetParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NetParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NetParameter& from) {
    NetParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NetParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.NetParameter";
  }
  protected:
  explicit NetParameter(::google::protobuf::Arena* arena);
  NetParameter(::google::protobuf::Arena* arena, const NetParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kInputFieldNumber = 3,
    kInputDimFieldNumber = 4,
    kInputShapeFieldNumber = 8,
    kLayerFieldNumber = 100,
    kNameFieldNumber = 1,
    kStateFieldNumber = 6,
    kForceBackwardFieldNumber = 5,
    kDebugInfoFieldNumber = 7,
  };
  // repeated .opencv_caffe.V1LayerParameter layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::opencv_caffe::V1LayerParameter* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::V1LayerParameter >*
      mutable_layers();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>* _internal_mutable_layers();
  public:
  const ::opencv_caffe::V1LayerParameter& layers(int index) const;
  ::opencv_caffe::V1LayerParameter* add_layers();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::V1LayerParameter >&
      layers() const;
  // repeated string input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;

  public:
  void clear_input() ;
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, std::size_t size);
  void set_input(int index, absl::string_view value);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, std::size_t size);
  void add_input(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& input() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_input();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_input() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_input();

  public:
  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  private:
  int _internal_input_dim_size() const;

  public:
  void clear_input_dim() ;
  ::int32_t input_dim(int index) const;
  void set_input_dim(int index, ::int32_t value);
  void add_input_dim(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& input_dim() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_input_dim();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_input_dim() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_input_dim();

  public:
  // repeated .opencv_caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  private:
  int _internal_input_shape_size() const;

  public:
  void clear_input_shape() ;
  ::opencv_caffe::BlobShape* mutable_input_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >*
      mutable_input_shape();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& _internal_input_shape() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* _internal_mutable_input_shape();
  public:
  const ::opencv_caffe::BlobShape& input_shape(int index) const;
  ::opencv_caffe::BlobShape* add_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape >&
      input_shape() const;
  // repeated .opencv_caffe.LayerParameter layer = 100;
  int layer_size() const;
  private:
  int _internal_layer_size() const;

  public:
  void clear_layer() ;
  ::opencv_caffe::LayerParameter* mutable_layer(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::LayerParameter >*
      mutable_layer();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>& _internal_layer() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>* _internal_mutable_layer();
  public:
  const ::opencv_caffe::LayerParameter& layer(int index) const;
  ::opencv_caffe::LayerParameter* add_layer();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::LayerParameter >&
      layer() const;
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .opencv_caffe.NetState state = 6;
  bool has_state() const;
  void clear_state() ;
  const ::opencv_caffe::NetState& state() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NetState* release_state();
  ::opencv_caffe::NetState* mutable_state();
  void set_allocated_state(::opencv_caffe::NetState* value);
  void unsafe_arena_set_allocated_state(::opencv_caffe::NetState* value);
  ::opencv_caffe::NetState* unsafe_arena_release_state();

  private:
  const ::opencv_caffe::NetState& _internal_state() const;
  ::opencv_caffe::NetState* _internal_mutable_state();

  public:
  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward() ;
  bool force_backward() const;
  void set_force_backward(bool value);

  private:
  bool _internal_force_backward() const;
  void _internal_set_force_backward(bool value);

  public:
  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info() ;
  bool debug_info() const;
  void set_debug_info(bool value);

  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.NetParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 9, 4,
      51, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::V1LayerParameter > layers_;
    ::google::protobuf::RepeatedPtrField<std::string> input_;
    ::google::protobuf::RepeatedField<::int32_t> input_dim_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::BlobShape > input_shape_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::LayerParameter > layer_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::opencv_caffe::NetState* state_;
    bool force_backward_;
    bool debug_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};// -------------------------------------------------------------------

class SolverParameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:opencv_caffe.SolverParameter) */ {
 public:
  inline SolverParameter() : SolverParameter(nullptr) {}
  ~SolverParameter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolverParameter(::google::protobuf::internal::ConstantInitialized);

  inline SolverParameter(const SolverParameter& from)
      : SolverParameter(nullptr, from) {}
  SolverParameter(SolverParameter&& from) noexcept
    : SolverParameter() {
    *this = ::std::move(from);
  }

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverParameter& operator=(SolverParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverParameter* internal_default_instance() {
    return reinterpret_cast<const SolverParameter*>(
               &_SolverParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SolverParameter& a, SolverParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolverParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolverParameter& from) {
    SolverParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SolverParameter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "opencv_caffe.SolverParameter";
  }
  protected:
  explicit SolverParameter(::google::protobuf::Arena* arena);
  SolverParameter(::google::protobuf::Arena* arena, const SolverParameter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SnapshotFormat = SolverParameter_SnapshotFormat;
  static constexpr SnapshotFormat HDF5 = SolverParameter_SnapshotFormat_HDF5;
  static constexpr SnapshotFormat BINARYPROTO = SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static constexpr SnapshotFormat SnapshotFormat_MIN = SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static constexpr SnapshotFormat SnapshotFormat_MAX = SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static constexpr int SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  template <typename T>
  static inline const std::string& SnapshotFormat_Name(T value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(absl::string_view name, SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  using SolverMode = SolverParameter_SolverMode;
  static constexpr SolverMode CPU = SolverParameter_SolverMode_CPU;
  static constexpr SolverMode GPU = SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static constexpr SolverMode SolverMode_MIN = SolverParameter_SolverMode_SolverMode_MIN;
  static constexpr SolverMode SolverMode_MAX = SolverParameter_SolverMode_SolverMode_MAX;
  static constexpr int SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  template <typename T>
  static inline const std::string& SolverMode_Name(T value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(absl::string_view name, SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  using SolverType = SolverParameter_SolverType;
  static constexpr SolverType SGD = SolverParameter_SolverType_SGD;
  static constexpr SolverType NESTEROV = SolverParameter_SolverType_NESTEROV;
  static constexpr SolverType ADAGRAD = SolverParameter_SolverType_ADAGRAD;
  static constexpr SolverType RMSPROP = SolverParameter_SolverType_RMSPROP;
  static constexpr SolverType ADADELTA = SolverParameter_SolverType_ADADELTA;
  static constexpr SolverType ADAM = SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static constexpr SolverType SolverType_MIN = SolverParameter_SolverType_SolverType_MIN;
  static constexpr SolverType SolverType_MAX = SolverParameter_SolverType_SolverType_MAX;
  static constexpr int SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  template <typename T>
  static inline const std::string& SolverType_Name(T value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(absl::string_view name, SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTestNetFieldNumber = 2,
    kTestIterFieldNumber = 3,
    kTestNetParamFieldNumber = 22,
    kTestStateFieldNumber = 27,
    kStepvalueFieldNumber = 34,
    kTrainNetFieldNumber = 1,
    kLrPolicyFieldNumber = 8,
    kSnapshotPrefixFieldNumber = 15,
    kNetFieldNumber = 24,
    kRegularizationTypeFieldNumber = 29,
    kTypeFieldNumber = 40,
    kTrainNetParamFieldNumber = 21,
    kNetParamFieldNumber = 25,
    kTrainStateFieldNumber = 26,
    kTestIntervalFieldNumber = 4,
    kBaseLrFieldNumber = 5,
    kDisplayFieldNumber = 6,
    kMaxIterFieldNumber = 7,
    kGammaFieldNumber = 9,
    kPowerFieldNumber = 10,
    kMomentumFieldNumber = 11,
    kWeightDecayFieldNumber = 12,
    kStepsizeFieldNumber = 13,
    kSnapshotFieldNumber = 14,
    kDeviceIdFieldNumber = 18,
    kTestComputeLossFieldNumber = 19,
    kSnapshotDiffFieldNumber = 16,
    kDebugInfoFieldNumber = 23,
    kSolverTypeFieldNumber = 30,
    kMomentum2FieldNumber = 39,
    kRandomSeedFieldNumber = 20,
    kSolverModeFieldNumber = 17,
    kTestInitializationFieldNumber = 32,
    kSnapshotAfterTrainFieldNumber = 28,
    kDeltaFieldNumber = 31,
    kAverageLossFieldNumber = 33,
    kClipGradientsFieldNumber = 35,
    kIterSizeFieldNumber = 36,
    kSnapshotFormatFieldNumber = 37,
    kRmsDecayFieldNumber = 38,
  };
  // repeated string test_net = 2;
  int test_net_size() const;
  private:
  int _internal_test_net_size() const;

  public:
  void clear_test_net() ;
  const std::string& test_net(int index) const;
  std::string* mutable_test_net(int index);
  void set_test_net(int index, const std::string& value);
  void set_test_net(int index, std::string&& value);
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, std::size_t size);
  void set_test_net(int index, absl::string_view value);
  std::string* add_test_net();
  void add_test_net(const std::string& value);
  void add_test_net(std::string&& value);
  void add_test_net(const char* value);
  void add_test_net(const char* value, std::size_t size);
  void add_test_net(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_test_net();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_test_net() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_test_net();

  public:
  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  private:
  int _internal_test_iter_size() const;

  public:
  void clear_test_iter() ;
  ::int32_t test_iter(int index) const;
  void set_test_iter(int index, ::int32_t value);
  void add_test_iter(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& test_iter() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_test_iter();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_test_iter() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_test_iter();

  public:
  // repeated .opencv_caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  private:
  int _internal_test_net_param_size() const;

  public:
  void clear_test_net_param() ;
  ::opencv_caffe::NetParameter* mutable_test_net_param(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetParameter >*
      mutable_test_net_param();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>& _internal_test_net_param() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>* _internal_mutable_test_net_param();
  public:
  const ::opencv_caffe::NetParameter& test_net_param(int index) const;
  ::opencv_caffe::NetParameter* add_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetParameter >&
      test_net_param() const;
  // repeated .opencv_caffe.NetState test_state = 27;
  int test_state_size() const;
  private:
  int _internal_test_state_size() const;

  public:
  void clear_test_state() ;
  ::opencv_caffe::NetState* mutable_test_state(int index);
  ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetState >*
      mutable_test_state();
  private:
  const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>& _internal_test_state() const;
  ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>* _internal_mutable_test_state();
  public:
  const ::opencv_caffe::NetState& test_state(int index) const;
  ::opencv_caffe::NetState* add_test_state();
  const ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetState >&
      test_state() const;
  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  private:
  int _internal_stepvalue_size() const;

  public:
  void clear_stepvalue() ;
  ::int32_t stepvalue(int index) const;
  void set_stepvalue(int index, ::int32_t value);
  void add_stepvalue(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& stepvalue() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_stepvalue();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_stepvalue() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_stepvalue();

  public:
  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net() ;
  const std::string& train_net() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_train_net(Arg_&& arg, Args_... args);
  std::string* mutable_train_net();
  PROTOBUF_NODISCARD std::string* release_train_net();
  void set_allocated_train_net(std::string* value);

  private:
  const std::string& _internal_train_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_train_net(
      const std::string& value);
  std::string* _internal_mutable_train_net();

  public:
  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy() ;
  const std::string& lr_policy() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lr_policy(Arg_&& arg, Args_... args);
  std::string* mutable_lr_policy();
  PROTOBUF_NODISCARD std::string* release_lr_policy();
  void set_allocated_lr_policy(std::string* value);

  private:
  const std::string& _internal_lr_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lr_policy(
      const std::string& value);
  std::string* _internal_mutable_lr_policy();

  public:
  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix() ;
  const std::string& snapshot_prefix() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_snapshot_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_snapshot_prefix();
  PROTOBUF_NODISCARD std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(std::string* value);

  private:
  const std::string& _internal_snapshot_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snapshot_prefix(
      const std::string& value);
  std::string* _internal_mutable_snapshot_prefix();

  public:
  // optional string net = 24;
  bool has_net() const;
  void clear_net() ;
  const std::string& net() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_net(Arg_&& arg, Args_... args);
  std::string* mutable_net();
  PROTOBUF_NODISCARD std::string* release_net();
  void set_allocated_net(std::string* value);

  private:
  const std::string& _internal_net() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_net(
      const std::string& value);
  std::string* _internal_mutable_net();

  public:
  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type() ;
  const std::string& regularization_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_regularization_type(Arg_&& arg, Args_... args);
  std::string* mutable_regularization_type();
  PROTOBUF_NODISCARD std::string* release_regularization_type();
  void set_allocated_regularization_type(std::string* value);

  private:
  const std::string& _internal_regularization_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_regularization_type(
      const std::string& value);
  std::string* _internal_mutable_regularization_type();

  public:
  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // optional .opencv_caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param() ;
  const ::opencv_caffe::NetParameter& train_net_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NetParameter* release_train_net_param();
  ::opencv_caffe::NetParameter* mutable_train_net_param();
  void set_allocated_train_net_param(::opencv_caffe::NetParameter* value);
  void unsafe_arena_set_allocated_train_net_param(::opencv_caffe::NetParameter* value);
  ::opencv_caffe::NetParameter* unsafe_arena_release_train_net_param();

  private:
  const ::opencv_caffe::NetParameter& _internal_train_net_param() const;
  ::opencv_caffe::NetParameter* _internal_mutable_train_net_param();

  public:
  // optional .opencv_caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param() ;
  const ::opencv_caffe::NetParameter& net_param() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NetParameter* release_net_param();
  ::opencv_caffe::NetParameter* mutable_net_param();
  void set_allocated_net_param(::opencv_caffe::NetParameter* value);
  void unsafe_arena_set_allocated_net_param(::opencv_caffe::NetParameter* value);
  ::opencv_caffe::NetParameter* unsafe_arena_release_net_param();

  private:
  const ::opencv_caffe::NetParameter& _internal_net_param() const;
  ::opencv_caffe::NetParameter* _internal_mutable_net_param();

  public:
  // optional .opencv_caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state() ;
  const ::opencv_caffe::NetState& train_state() const;
  PROTOBUF_NODISCARD ::opencv_caffe::NetState* release_train_state();
  ::opencv_caffe::NetState* mutable_train_state();
  void set_allocated_train_state(::opencv_caffe::NetState* value);
  void unsafe_arena_set_allocated_train_state(::opencv_caffe::NetState* value);
  ::opencv_caffe::NetState* unsafe_arena_release_train_state();

  private:
  const ::opencv_caffe::NetState& _internal_train_state() const;
  ::opencv_caffe::NetState* _internal_mutable_train_state();

  public:
  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval() ;
  ::int32_t test_interval() const;
  void set_test_interval(::int32_t value);

  private:
  ::int32_t _internal_test_interval() const;
  void _internal_set_test_interval(::int32_t value);

  public:
  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr() ;
  float base_lr() const;
  void set_base_lr(float value);

  private:
  float _internal_base_lr() const;
  void _internal_set_base_lr(float value);

  public:
  // optional int32 display = 6;
  bool has_display() const;
  void clear_display() ;
  ::int32_t display() const;
  void set_display(::int32_t value);

  private:
  ::int32_t _internal_display() const;
  void _internal_set_display(::int32_t value);

  public:
  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter() ;
  ::int32_t max_iter() const;
  void set_max_iter(::int32_t value);

  private:
  ::int32_t _internal_max_iter() const;
  void _internal_set_max_iter(::int32_t value);

  public:
  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma() ;
  float gamma() const;
  void set_gamma(float value);

  private:
  float _internal_gamma() const;
  void _internal_set_gamma(float value);

  public:
  // optional float power = 10;
  bool has_power() const;
  void clear_power() ;
  float power() const;
  void set_power(float value);

  private:
  float _internal_power() const;
  void _internal_set_power(float value);

  public:
  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum() ;
  float momentum() const;
  void set_momentum(float value);

  private:
  float _internal_momentum() const;
  void _internal_set_momentum(float value);

  public:
  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay() ;
  float weight_decay() const;
  void set_weight_decay(float value);

  private:
  float _internal_weight_decay() const;
  void _internal_set_weight_decay(float value);

  public:
  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize() ;
  ::int32_t stepsize() const;
  void set_stepsize(::int32_t value);

  private:
  ::int32_t _internal_stepsize() const;
  void _internal_set_stepsize(::int32_t value);

  public:
  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot() ;
  ::int32_t snapshot() const;
  void set_snapshot(::int32_t value);

  private:
  ::int32_t _internal_snapshot() const;
  void _internal_set_snapshot(::int32_t value);

  public:
  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id() ;
  ::int32_t device_id() const;
  void set_device_id(::int32_t value);

  private:
  ::int32_t _internal_device_id() const;
  void _internal_set_device_id(::int32_t value);

  public:
  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss() ;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  private:
  bool _internal_test_compute_loss() const;
  void _internal_set_test_compute_loss(bool value);

  public:
  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff() ;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  private:
  bool _internal_snapshot_diff() const;
  void _internal_set_snapshot_diff(bool value);

  public:
  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info() ;
  bool debug_info() const;
  void set_debug_info(bool value);

  private:
  bool _internal_debug_info() const;
  void _internal_set_debug_info(bool value);

  public:
  // optional .opencv_caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type() ;
  ::opencv_caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::opencv_caffe::SolverParameter_SolverType value);

  private:
  ::opencv_caffe::SolverParameter_SolverType _internal_solver_type() const;
  void _internal_set_solver_type(::opencv_caffe::SolverParameter_SolverType value);

  public:
  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  void clear_momentum2() ;
  float momentum2() const;
  void set_momentum2(float value);

  private:
  float _internal_momentum2() const;
  void _internal_set_momentum2(float value);

  public:
  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed() ;
  ::int64_t random_seed() const;
  void set_random_seed(::int64_t value);

  private:
  ::int64_t _internal_random_seed() const;
  void _internal_set_random_seed(::int64_t value);

  public:
  // optional .opencv_caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode() ;
  ::opencv_caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::opencv_caffe::SolverParameter_SolverMode value);

  private:
  ::opencv_caffe::SolverParameter_SolverMode _internal_solver_mode() const;
  void _internal_set_solver_mode(::opencv_caffe::SolverParameter_SolverMode value);

  public:
  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization() ;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  private:
  bool _internal_test_initialization() const;
  void _internal_set_test_initialization(bool value);

  public:
  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train() ;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  private:
  bool _internal_snapshot_after_train() const;
  void _internal_set_snapshot_after_train(bool value);

  public:
  // optional float delta = 31 [default = 1e-08];
  bool has_delta() const;
  void clear_delta() ;
  float delta() const;
  void set_delta(float value);

  private:
  float _internal_delta() const;
  void _internal_set_delta(float value);

  public:
  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss() ;
  ::int32_t average_loss() const;
  void set_average_loss(::int32_t value);

  private:
  ::int32_t _internal_average_loss() const;
  void _internal_set_average_loss(::int32_t value);

  public:
  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients() ;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  private:
  float _internal_clip_gradients() const;
  void _internal_set_clip_gradients(float value);

  public:
  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  void clear_iter_size() ;
  ::int32_t iter_size() const;
  void set_iter_size(::int32_t value);

  private:
  ::int32_t _internal_iter_size() const;
  void _internal_set_iter_size(::int32_t value);

  public:
  // optional .opencv_caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  void clear_snapshot_format() ;
  ::opencv_caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::opencv_caffe::SolverParameter_SnapshotFormat value);

  private:
  ::opencv_caffe::SolverParameter_SnapshotFormat _internal_snapshot_format() const;
  void _internal_set_snapshot_format(::opencv_caffe::SolverParameter_SnapshotFormat value);

  public:
  // optional float rms_decay = 38 [default = 0.99];
  bool has_rms_decay() const;
  void clear_rms_decay() ;
  float rms_decay() const;
  void set_rms_decay(float value);

  private:
  float _internal_rms_decay() const;
  void _internal_set_rms_decay(float value);

  public:
  // @@protoc_insertion_point(class_scope:opencv_caffe.SolverParameter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 40, 8,
      144, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> test_net_;
    ::google::protobuf::RepeatedField<::int32_t> test_iter_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetParameter > test_net_param_;
    ::google::protobuf::RepeatedPtrField< ::opencv_caffe::NetState > test_state_;
    ::google::protobuf::RepeatedField<::int32_t> stepvalue_;
    ::google::protobuf::internal::ArenaStringPtr train_net_;
    ::google::protobuf::internal::ArenaStringPtr lr_policy_;
    ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
    ::google::protobuf::internal::ArenaStringPtr net_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_regularization_type_;
    ::google::protobuf::internal::ArenaStringPtr regularization_type_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_type_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::opencv_caffe::NetParameter* train_net_param_;
    ::opencv_caffe::NetParameter* net_param_;
    ::opencv_caffe::NetState* train_state_;
    ::int32_t test_interval_;
    float base_lr_;
    ::int32_t display_;
    ::int32_t max_iter_;
    float gamma_;
    float power_;
    float momentum_;
    float weight_decay_;
    ::int32_t stepsize_;
    ::int32_t snapshot_;
    ::int32_t device_id_;
    bool test_compute_loss_;
    bool snapshot_diff_;
    bool debug_info_;
    int solver_type_;
    float momentum2_;
    ::int64_t random_seed_;
    int solver_mode_;
    bool test_initialization_;
    bool snapshot_after_train_;
    float delta_;
    ::int32_t average_loss_;
    float clip_gradients_;
    ::int32_t iter_size_;
    int snapshot_format_;
    float rms_decay_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_opencv_2dcaffe_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::_internal_dim_size() const {
  return _internal_dim().size();
}
inline int BlobShape::dim_size() const {
  return _internal_dim_size();
}
inline void BlobShape::clear_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dim_.Clear();
}
inline ::int64_t BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobShape.dim)
  return _internal_dim().Get(index);
}
inline void BlobShape::set_dim(int index, ::int64_t value) {
  _internal_mutable_dim()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dim()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BlobShape::dim() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobShape.dim)
  return _internal_dim();
}
inline ::google::protobuf::RepeatedField<::int64_t>* BlobShape::mutable_dim()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobShape.dim)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dim();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& BlobShape::_internal_dim()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dim_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* BlobShape::_internal_mutable_dim() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .opencv_caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline void BlobProto::clear_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::BlobShape& BlobProto::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::BlobShape&>(::opencv_caffe::_BlobShape_default_instance_);
}
inline const ::opencv_caffe::BlobShape& BlobProto::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.shape)
  return _internal_shape();
}
inline void BlobProto::unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.BlobProto.shape)
}
inline ::opencv_caffe::BlobShape* BlobProto::release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::BlobShape* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::BlobShape* BlobProto::unsafe_arena_release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.BlobProto.shape)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::opencv_caffe::BlobShape* BlobProto::_internal_mutable_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::BlobShape>(GetArena());
    _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(p);
  }
  return _impl_.shape_;
}
inline ::opencv_caffe::BlobShape* BlobProto::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.BlobProto.shape)
  return _msg;
}
inline void BlobProto::set_allocated_shape(::opencv_caffe::BlobShape* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::BlobShape*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::BlobShape*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::_internal_data_size() const {
  return _internal_data().size();
}
inline int BlobProto::data_size() const {
  return _internal_data_size();
}
inline void BlobProto::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.data)
  return _internal_data().Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  _internal_mutable_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_data()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField<float>& BlobProto::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobProto.data)
  return _internal_data();
}
inline ::google::protobuf::RepeatedField<float>* BlobProto::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobProto.data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data();
}
inline const ::google::protobuf::RepeatedField<float>& BlobProto::_internal_data()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedField<float>* BlobProto::_internal_mutable_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::_internal_diff_size() const {
  return _internal_diff().size();
}
inline int BlobProto::diff_size() const {
  return _internal_diff_size();
}
inline void BlobProto::clear_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.diff)
  return _internal_diff().Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  _internal_mutable_diff()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_diff()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField<float>& BlobProto::diff() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobProto.diff)
  return _internal_diff();
}
inline ::google::protobuf::RepeatedField<float>* BlobProto::mutable_diff()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobProto.diff)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_diff();
}
inline const ::google::protobuf::RepeatedField<float>& BlobProto::_internal_diff()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.diff_;
}
inline ::google::protobuf::RepeatedField<float>* BlobProto::_internal_mutable_diff() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::_internal_double_data_size() const {
  return _internal_double_data().size();
}
inline int BlobProto::double_data_size() const {
  return _internal_double_data_size();
}
inline void BlobProto::clear_double_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.double_data)
  return _internal_double_data().Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  _internal_mutable_double_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_double_data()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField<double>& BlobProto::double_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobProto.double_data)
  return _internal_double_data();
}
inline ::google::protobuf::RepeatedField<double>* BlobProto::mutable_double_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobProto.double_data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_double_data();
}
inline const ::google::protobuf::RepeatedField<double>& BlobProto::_internal_double_data()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.double_data_;
}
inline ::google::protobuf::RepeatedField<double>* BlobProto::_internal_mutable_double_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::_internal_double_diff_size() const {
  return _internal_double_diff().size();
}
inline int BlobProto::double_diff_size() const {
  return _internal_double_diff_size();
}
inline void BlobProto::clear_double_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.double_diff)
  return _internal_double_diff().Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  _internal_mutable_double_diff()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_double_diff()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField<double>& BlobProto::double_diff() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobProto.double_diff)
  return _internal_double_diff();
}
inline ::google::protobuf::RepeatedField<double>* BlobProto::mutable_double_diff()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobProto.double_diff)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_double_diff();
}
inline const ::google::protobuf::RepeatedField<double>& BlobProto::_internal_double_diff()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.double_diff_;
}
inline ::google::protobuf::RepeatedField<double>* BlobProto::_internal_mutable_double_diff() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.double_diff_;
}

// optional .opencv_caffe.Type raw_data_type = 10;
inline bool BlobProto::has_raw_data_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BlobProto::clear_raw_data_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.raw_data_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::opencv_caffe::Type BlobProto::raw_data_type() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.raw_data_type)
  return _internal_raw_data_type();
}
inline void BlobProto::set_raw_data_type(::opencv_caffe::Type value) {
  _internal_set_raw_data_type(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.raw_data_type)
}
inline ::opencv_caffe::Type BlobProto::_internal_raw_data_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::Type>(_impl_.raw_data_type_);
}
inline void BlobProto::_internal_set_raw_data_type(::opencv_caffe::Type value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.raw_data_type_ = value;
}

// optional bytes raw_data = 12 [packed = false];
inline bool BlobProto::has_raw_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BlobProto::clear_raw_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.raw_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlobProto::raw_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.raw_data)
  return _internal_raw_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlobProto::set_raw_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.raw_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.raw_data)
}
inline std::string* BlobProto::mutable_raw_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_raw_data();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.BlobProto.raw_data)
  return _s;
}
inline const std::string& BlobProto::_internal_raw_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.raw_data_.Get();
}
inline void BlobProto::_internal_set_raw_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.raw_data_.Set(value, GetArena());
}
inline std::string* BlobProto::_internal_mutable_raw_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.raw_data_.Mutable( GetArena());
}
inline std::string* BlobProto::release_raw_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.BlobProto.raw_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.raw_data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BlobProto::set_allocated_raw_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.raw_data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.raw_data_.IsDefault()) {
          _impl_.raw_data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.BlobProto.raw_data)
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BlobProto::clear_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t BlobProto::num() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.num)
  return _internal_num();
}
inline void BlobProto::set_num(::int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.num)
}
inline ::int32_t BlobProto::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void BlobProto::_internal_set_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_ = value;
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BlobProto::clear_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.channels)
  return _internal_channels();
}
inline void BlobProto::set_channels(::int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.channels)
}
inline ::int32_t BlobProto::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline void BlobProto::_internal_set_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.channels_ = value;
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BlobProto::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t BlobProto::height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.height)
  return _internal_height();
}
inline void BlobProto::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.height)
}
inline ::int32_t BlobProto::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void BlobProto::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.height_ = value;
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BlobProto::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t BlobProto::width() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProto.width)
  return _internal_width();
}
inline void BlobProto::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BlobProto.width)
}
inline ::int32_t BlobProto::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void BlobProto::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.width_ = value;
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .opencv_caffe.BlobProto blobs = 1;
inline int BlobProtoVector::_internal_blobs_size() const {
  return _internal_blobs().size();
}
inline int BlobProtoVector::blobs_size() const {
  return _internal_blobs_size();
}
inline void BlobProtoVector::clear_blobs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_.Clear();
}
inline ::opencv_caffe::BlobProto* BlobProtoVector::mutable_blobs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.BlobProtoVector.blobs)
  return _internal_mutable_blobs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* BlobProtoVector::mutable_blobs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.BlobProtoVector.blobs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs();
}
inline const ::opencv_caffe::BlobProto& BlobProtoVector::blobs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.BlobProtoVector.blobs)
  return _internal_blobs().Get(index);
}
inline ::opencv_caffe::BlobProto* BlobProtoVector::add_blobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobProto* _add = _internal_mutable_blobs()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.BlobProtoVector.blobs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& BlobProtoVector::blobs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.BlobProtoVector.blobs)
  return _internal_blobs();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>&
BlobProtoVector::_internal_blobs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>*
BlobProtoVector::_internal_mutable_blobs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_;
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::_internal_order_size() const {
  return _internal_order().size();
}
inline int PermuteParameter::order_size() const {
  return _internal_order_size();
}
inline void PermuteParameter::clear_order() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.order_.Clear();
}
inline ::uint32_t PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PermuteParameter.order)
  return _internal_order().Get(index);
}
inline void PermuteParameter::set_order(int index, ::uint32_t value) {
  _internal_mutable_order()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_order()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& PermuteParameter::order() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PermuteParameter.order)
  return _internal_order();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PermuteParameter::mutable_order()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PermuteParameter.order)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_order();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& PermuteParameter::_internal_order()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.order_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PermuteParameter::_internal_mutable_order() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.order_;
}

// -------------------------------------------------------------------

// NormalizeBBoxParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeBBoxParameter::has_across_spatial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NormalizeBBoxParameter::clear_across_spatial() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.across_spatial_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NormalizeBBoxParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizeBBoxParameter.across_spatial)
  return _internal_across_spatial();
}
inline void NormalizeBBoxParameter::set_across_spatial(bool value) {
  _internal_set_across_spatial(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizeBBoxParameter.across_spatial)
}
inline bool NormalizeBBoxParameter::_internal_across_spatial() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.across_spatial_;
}
inline void NormalizeBBoxParameter::_internal_set_across_spatial(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.across_spatial_ = value;
}

// optional .opencv_caffe.FillerParameter scale_filler = 2;
inline bool NormalizeBBoxParameter::has_scale_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_filler_ != nullptr);
  return value;
}
inline void NormalizeBBoxParameter::clear_scale_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scale_filler_ != nullptr) _impl_.scale_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& NormalizeBBoxParameter::_internal_scale_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.scale_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& NormalizeBBoxParameter::scale_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizeBBoxParameter.scale_filler)
  return _internal_scale_filler();
}
inline void NormalizeBBoxParameter::unsafe_arena_set_allocated_scale_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scale_filler_);
  }
  _impl_.scale_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.NormalizeBBoxParameter.scale_filler)
}
inline ::opencv_caffe::FillerParameter* NormalizeBBoxParameter::release_scale_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.scale_filler_;
  _impl_.scale_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* NormalizeBBoxParameter::unsafe_arena_release_scale_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.NormalizeBBoxParameter.scale_filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.scale_filler_;
  _impl_.scale_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* NormalizeBBoxParameter::_internal_mutable_scale_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scale_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.scale_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.scale_filler_;
}
inline ::opencv_caffe::FillerParameter* NormalizeBBoxParameter::mutable_scale_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_scale_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NormalizeBBoxParameter.scale_filler)
  return _msg;
}
inline void NormalizeBBoxParameter::set_allocated_scale_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.scale_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.scale_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.NormalizeBBoxParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeBBoxParameter::has_channel_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NormalizeBBoxParameter::clear_channel_shared() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_shared_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NormalizeBBoxParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizeBBoxParameter.channel_shared)
  return _internal_channel_shared();
}
inline void NormalizeBBoxParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizeBBoxParameter.channel_shared)
}
inline bool NormalizeBBoxParameter::_internal_channel_shared() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_shared_;
}
inline void NormalizeBBoxParameter::_internal_set_channel_shared(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_shared_ = value;
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeBBoxParameter::has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NormalizeBBoxParameter::clear_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ = 1e-10f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float NormalizeBBoxParameter::eps() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizeBBoxParameter.eps)
  return _internal_eps();
}
inline void NormalizeBBoxParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizeBBoxParameter.eps)
}
inline float NormalizeBBoxParameter::_internal_eps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_;
}
inline void NormalizeBBoxParameter::_internal_set_eps(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.eps_ = value;
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::_internal_min_size_size() const {
  return _internal_min_size().size();
}
inline int PriorBoxParameter::min_size_size() const {
  return _internal_min_size_size();
}
inline void PriorBoxParameter::clear_min_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_size_.Clear();
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.min_size)
  return _internal_min_size().Get(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  _internal_mutable_min_size()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::add_min_size(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_min_size()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.min_size)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::min_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.min_size)
  return _internal_min_size();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_min_size()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.min_size)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_min_size();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_min_size()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_size_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_min_size() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.min_size_;
}

// repeated float max_size = 2;
inline int PriorBoxParameter::_internal_max_size_size() const {
  return _internal_max_size().size();
}
inline int PriorBoxParameter::max_size_size() const {
  return _internal_max_size_size();
}
inline void PriorBoxParameter::clear_max_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_size_.Clear();
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.max_size)
  return _internal_max_size().Get(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  _internal_mutable_max_size()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::add_max_size(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_max_size()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.max_size)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::max_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.max_size)
  return _internal_max_size();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_max_size()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.max_size)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_max_size();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_max_size()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_size_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_max_size() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.max_size_;
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::_internal_aspect_ratio_size() const {
  return _internal_aspect_ratio().size();
}
inline int PriorBoxParameter::aspect_ratio_size() const {
  return _internal_aspect_ratio_size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.aspect_ratio_.Clear();
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio().Get(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  _internal_mutable_aspect_ratio()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aspect_ratio()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::aspect_ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.aspect_ratio)
  return _internal_aspect_ratio();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_aspect_ratio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.aspect_ratio)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_aspect_ratio();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_aspect_ratio()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aspect_ratio_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_aspect_ratio() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.aspect_ratio_;
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::has_flip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_flip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flip_ = true;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.flip)
  return _internal_flip();
}
inline void PriorBoxParameter::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.flip)
}
inline bool PriorBoxParameter::_internal_flip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.flip_;
}
inline void PriorBoxParameter::_internal_set_flip(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.flip_ = value;
}

// optional bool clip = 5 [default = true];
inline bool PriorBoxParameter::has_clip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_clip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clip_ = true;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.clip)
  return _internal_clip();
}
inline void PriorBoxParameter::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.clip)
}
inline bool PriorBoxParameter::_internal_clip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clip_;
}
inline void PriorBoxParameter::_internal_set_clip(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.clip_ = value;
}

// repeated float variance = 6;
inline int PriorBoxParameter::_internal_variance_size() const {
  return _internal_variance().size();
}
inline int PriorBoxParameter::variance_size() const {
  return _internal_variance_size();
}
inline void PriorBoxParameter::clear_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variance_.Clear();
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.variance)
  return _internal_variance().Get(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  _internal_mutable_variance()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::add_variance(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_variance()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.variance)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::variance() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.variance)
  return _internal_variance();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_variance()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.variance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variance();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_variance()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variance_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_variance() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variance_;
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::has_img_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_img_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.img_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.img_size)
  return _internal_img_size();
}
inline void PriorBoxParameter::set_img_size(::uint32_t value) {
  _internal_set_img_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.img_size)
}
inline ::uint32_t PriorBoxParameter::_internal_img_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.img_size_;
}
inline void PriorBoxParameter::_internal_set_img_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.img_size_ = value;
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::has_img_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_img_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.img_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.img_h)
  return _internal_img_h();
}
inline void PriorBoxParameter::set_img_h(::uint32_t value) {
  _internal_set_img_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.img_h)
}
inline ::uint32_t PriorBoxParameter::_internal_img_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.img_h_;
}
inline void PriorBoxParameter::_internal_set_img_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.img_h_ = value;
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::has_img_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_img_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.img_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.img_w)
  return _internal_img_w();
}
inline void PriorBoxParameter::set_img_w(::uint32_t value) {
  _internal_set_img_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.img_w)
}
inline ::uint32_t PriorBoxParameter::_internal_img_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.img_w_;
}
inline void PriorBoxParameter::_internal_set_img_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.img_w_ = value;
}

// optional float step = 10;
inline bool PriorBoxParameter::has_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_step() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.step)
  return _internal_step();
}
inline void PriorBoxParameter::set_step(float value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.step)
}
inline float PriorBoxParameter::_internal_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_;
}
inline void PriorBoxParameter::_internal_set_step(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.step_ = value;
}

// optional float step_h = 11;
inline bool PriorBoxParameter::has_step_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_step_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.step_h_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.step_h)
  return _internal_step_h();
}
inline void PriorBoxParameter::set_step_h(float value) {
  _internal_set_step_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.step_h)
}
inline float PriorBoxParameter::_internal_step_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_h_;
}
inline void PriorBoxParameter::_internal_set_step_h(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.step_h_ = value;
}

// optional float step_w = 12;
inline bool PriorBoxParameter::has_step_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_step_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.step_w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.step_w)
  return _internal_step_w();
}
inline void PriorBoxParameter::set_step_w(float value) {
  _internal_set_step_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.step_w)
}
inline float PriorBoxParameter::_internal_step_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_w_;
}
inline void PriorBoxParameter::_internal_set_step_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.step_w_ = value;
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PriorBoxParameter::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.offset)
  return _internal_offset();
}
inline void PriorBoxParameter::set_offset(float value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.offset)
}
inline float PriorBoxParameter::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void PriorBoxParameter::_internal_set_offset(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.offset_ = value;
}

// repeated float offset_h = 14;
inline int PriorBoxParameter::_internal_offset_h_size() const {
  return _internal_offset_h().size();
}
inline int PriorBoxParameter::offset_h_size() const {
  return _internal_offset_h_size();
}
inline void PriorBoxParameter::clear_offset_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_h_.Clear();
}
inline float PriorBoxParameter::offset_h(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.offset_h)
  return _internal_offset_h().Get(index);
}
inline void PriorBoxParameter::set_offset_h(int index, float value) {
  _internal_mutable_offset_h()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.offset_h)
}
inline void PriorBoxParameter::add_offset_h(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_offset_h()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.offset_h)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::offset_h() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.offset_h)
  return _internal_offset_h();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_offset_h()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.offset_h)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_offset_h();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_offset_h()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_h_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_offset_h() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.offset_h_;
}

// repeated float offset_w = 15;
inline int PriorBoxParameter::_internal_offset_w_size() const {
  return _internal_offset_w().size();
}
inline int PriorBoxParameter::offset_w_size() const {
  return _internal_offset_w_size();
}
inline void PriorBoxParameter::clear_offset_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_w_.Clear();
}
inline float PriorBoxParameter::offset_w(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.offset_w)
  return _internal_offset_w().Get(index);
}
inline void PriorBoxParameter::set_offset_w(int index, float value) {
  _internal_mutable_offset_w()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.offset_w)
}
inline void PriorBoxParameter::add_offset_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_offset_w()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.offset_w)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::offset_w() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.offset_w)
  return _internal_offset_w();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_offset_w()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.offset_w)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_offset_w();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_offset_w()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_w_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_offset_w() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.offset_w_;
}

// repeated float width = 16;
inline int PriorBoxParameter::_internal_width_size() const {
  return _internal_width().size();
}
inline int PriorBoxParameter::width_size() const {
  return _internal_width_size();
}
inline void PriorBoxParameter::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_.Clear();
}
inline float PriorBoxParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.width)
  return _internal_width().Get(index);
}
inline void PriorBoxParameter::set_width(int index, float value) {
  _internal_mutable_width()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.width)
}
inline void PriorBoxParameter::add_width(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_width()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.width)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::width() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.width)
  return _internal_width();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_width()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.width)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_width();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_width()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_width() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.width_;
}

// repeated float height = 17;
inline int PriorBoxParameter::_internal_height_size() const {
  return _internal_height().size();
}
inline int PriorBoxParameter::height_size() const {
  return _internal_height_size();
}
inline void PriorBoxParameter::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_.Clear();
}
inline float PriorBoxParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PriorBoxParameter.height)
  return _internal_height().Get(index);
}
inline void PriorBoxParameter::set_height(int index, float value) {
  _internal_mutable_height()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PriorBoxParameter.height)
}
inline void PriorBoxParameter::add_height(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_height()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.PriorBoxParameter.height)
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::height() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.PriorBoxParameter.height)
  return _internal_height();
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::mutable_height()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.PriorBoxParameter.height)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_height();
}
inline const ::google::protobuf::RepeatedField<float>& PriorBoxParameter::_internal_height()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline ::google::protobuf::RepeatedField<float>* PriorBoxParameter::_internal_mutable_height() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.height_;
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionOutputParameter::has_num_classes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_num_classes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_classes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DetectionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.num_classes)
  return _internal_num_classes();
}
inline void DetectionOutputParameter::set_num_classes(::uint32_t value) {
  _internal_set_num_classes(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.num_classes)
}
inline ::uint32_t DetectionOutputParameter::_internal_num_classes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_classes_;
}
inline void DetectionOutputParameter::_internal_set_num_classes(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_classes_ = value;
}

// optional bool share_location = 2 [default = true];
inline bool DetectionOutputParameter::has_share_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_share_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_location_ = true;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool DetectionOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.share_location)
  return _internal_share_location();
}
inline void DetectionOutputParameter::set_share_location(bool value) {
  _internal_set_share_location(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.share_location)
}
inline bool DetectionOutputParameter::_internal_share_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.share_location_;
}
inline void DetectionOutputParameter::_internal_set_share_location(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.share_location_ = value;
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionOutputParameter::has_background_label_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_background_label_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.background_label_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t DetectionOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.background_label_id)
  return _internal_background_label_id();
}
inline void DetectionOutputParameter::set_background_label_id(::int32_t value) {
  _internal_set_background_label_id(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.background_label_id)
}
inline ::int32_t DetectionOutputParameter::_internal_background_label_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.background_label_id_;
}
inline void DetectionOutputParameter::_internal_set_background_label_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.background_label_id_ = value;
}

// optional .opencv_caffe.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionOutputParameter::has_nms_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nms_param_ != nullptr);
  return value;
}
inline void DetectionOutputParameter::clear_nms_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.nms_param_ != nullptr) _impl_.nms_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::NonMaximumSuppressionParameter& DetectionOutputParameter::_internal_nms_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NonMaximumSuppressionParameter* p = _impl_.nms_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NonMaximumSuppressionParameter&>(::opencv_caffe::_NonMaximumSuppressionParameter_default_instance_);
}
inline const ::opencv_caffe::NonMaximumSuppressionParameter& DetectionOutputParameter::nms_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.nms_param)
  return _internal_nms_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_nms_param(::opencv_caffe::NonMaximumSuppressionParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.nms_param_);
  }
  _impl_.nms_param_ = reinterpret_cast<::opencv_caffe::NonMaximumSuppressionParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.DetectionOutputParameter.nms_param)
}
inline ::opencv_caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::release_nms_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::NonMaximumSuppressionParameter* released = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::unsafe_arena_release_nms_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.DetectionOutputParameter.nms_param)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::NonMaximumSuppressionParameter* temp = _impl_.nms_param_;
  _impl_.nms_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::_internal_mutable_nms_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nms_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NonMaximumSuppressionParameter>(GetArena());
    _impl_.nms_param_ = reinterpret_cast<::opencv_caffe::NonMaximumSuppressionParameter*>(p);
  }
  return _impl_.nms_param_;
}
inline ::opencv_caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::mutable_nms_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NonMaximumSuppressionParameter* _msg = _internal_mutable_nms_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DetectionOutputParameter.nms_param)
  return _msg;
}
inline void DetectionOutputParameter::set_allocated_nms_param(::opencv_caffe::NonMaximumSuppressionParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NonMaximumSuppressionParameter*>(_impl_.nms_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NonMaximumSuppressionParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.nms_param_ = reinterpret_cast<::opencv_caffe::NonMaximumSuppressionParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.DetectionOutputParameter.nms_param)
}

// optional .opencv_caffe.SaveOutputParameter save_output_param = 5;
inline bool DetectionOutputParameter::has_save_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.save_output_param_ != nullptr);
  return value;
}
inline void DetectionOutputParameter::clear_save_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.save_output_param_ != nullptr) _impl_.save_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::SaveOutputParameter& DetectionOutputParameter::_internal_save_output_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SaveOutputParameter* p = _impl_.save_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SaveOutputParameter&>(::opencv_caffe::_SaveOutputParameter_default_instance_);
}
inline const ::opencv_caffe::SaveOutputParameter& DetectionOutputParameter::save_output_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.save_output_param)
  return _internal_save_output_param();
}
inline void DetectionOutputParameter::unsafe_arena_set_allocated_save_output_param(::opencv_caffe::SaveOutputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.save_output_param_);
  }
  _impl_.save_output_param_ = reinterpret_cast<::opencv_caffe::SaveOutputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.DetectionOutputParameter.save_output_param)
}
inline ::opencv_caffe::SaveOutputParameter* DetectionOutputParameter::release_save_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::SaveOutputParameter* released = _impl_.save_output_param_;
  _impl_.save_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SaveOutputParameter* DetectionOutputParameter::unsafe_arena_release_save_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.DetectionOutputParameter.save_output_param)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::SaveOutputParameter* temp = _impl_.save_output_param_;
  _impl_.save_output_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SaveOutputParameter* DetectionOutputParameter::_internal_mutable_save_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.save_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SaveOutputParameter>(GetArena());
    _impl_.save_output_param_ = reinterpret_cast<::opencv_caffe::SaveOutputParameter*>(p);
  }
  return _impl_.save_output_param_;
}
inline ::opencv_caffe::SaveOutputParameter* DetectionOutputParameter::mutable_save_output_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SaveOutputParameter* _msg = _internal_mutable_save_output_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DetectionOutputParameter.save_output_param)
  return _msg;
}
inline void DetectionOutputParameter::set_allocated_save_output_param(::opencv_caffe::SaveOutputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SaveOutputParameter*>(_impl_.save_output_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SaveOutputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.save_output_param_ = reinterpret_cast<::opencv_caffe::SaveOutputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.DetectionOutputParameter.save_output_param)
}

// optional .opencv_caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionOutputParameter::has_code_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_code_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::opencv_caffe::PriorBoxParameter_CodeType DetectionOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.code_type)
  return _internal_code_type();
}
inline void DetectionOutputParameter::set_code_type(::opencv_caffe::PriorBoxParameter_CodeType value) {
  _internal_set_code_type(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.code_type)
}
inline ::opencv_caffe::PriorBoxParameter_CodeType DetectionOutputParameter::_internal_code_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::PriorBoxParameter_CodeType>(_impl_.code_type_);
}
inline void DetectionOutputParameter::_internal_set_code_type(::opencv_caffe::PriorBoxParameter_CodeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::PriorBoxParameter_CodeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.code_type_ = value;
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionOutputParameter::has_variance_encoded_in_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_variance_encoded_in_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variance_encoded_in_target_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DetectionOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.variance_encoded_in_target)
  return _internal_variance_encoded_in_target();
}
inline void DetectionOutputParameter::set_variance_encoded_in_target(bool value) {
  _internal_set_variance_encoded_in_target(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.variance_encoded_in_target)
}
inline bool DetectionOutputParameter::_internal_variance_encoded_in_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variance_encoded_in_target_;
}
inline void DetectionOutputParameter::_internal_set_variance_encoded_in_target(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.variance_encoded_in_target_ = value;
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionOutputParameter::has_keep_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_keep_top_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keep_top_k_ = -1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t DetectionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.keep_top_k)
  return _internal_keep_top_k();
}
inline void DetectionOutputParameter::set_keep_top_k(::int32_t value) {
  _internal_set_keep_top_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.keep_top_k)
}
inline ::int32_t DetectionOutputParameter::_internal_keep_top_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keep_top_k_;
}
inline void DetectionOutputParameter::_internal_set_keep_top_k(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.keep_top_k_ = value;
}

// optional float confidence_threshold = 9;
inline bool DetectionOutputParameter::has_confidence_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_confidence_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confidence_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DetectionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void DetectionOutputParameter::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.confidence_threshold)
}
inline float DetectionOutputParameter::_internal_confidence_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.confidence_threshold_;
}
inline void DetectionOutputParameter::_internal_set_confidence_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.confidence_threshold_ = value;
}

// optional bool normalized_bbox = 10 [default = true];
inline bool DetectionOutputParameter::has_normalized_bbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_normalized_bbox() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.normalized_bbox_ = true;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool DetectionOutputParameter::normalized_bbox() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.normalized_bbox)
  return _internal_normalized_bbox();
}
inline void DetectionOutputParameter::set_normalized_bbox(bool value) {
  _internal_set_normalized_bbox(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.normalized_bbox)
}
inline bool DetectionOutputParameter::_internal_normalized_bbox() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.normalized_bbox_;
}
inline void DetectionOutputParameter::_internal_set_normalized_bbox(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.normalized_bbox_ = value;
}

// optional bool clip = 1000 [default = false];
inline bool DetectionOutputParameter::has_clip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void DetectionOutputParameter::clear_clip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clip_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DetectionOutputParameter::clip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DetectionOutputParameter.clip)
  return _internal_clip();
}
inline void DetectionOutputParameter::set_clip(bool value) {
  _internal_set_clip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DetectionOutputParameter.clip)
}
inline bool DetectionOutputParameter::_internal_clip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clip_;
}
inline void DetectionOutputParameter::_internal_set_clip(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.clip_ = value;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Datum::clear_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Datum::channels() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.channels)
  return _internal_channels();
}
inline void Datum::set_channels(::int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.channels)
}
inline ::int32_t Datum::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline void Datum::_internal_set_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channels_ = value;
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Datum::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Datum::height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.height)
  return _internal_height();
}
inline void Datum::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.height)
}
inline ::int32_t Datum::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Datum::_internal_set_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Datum::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Datum::width() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.width)
  return _internal_width();
}
inline void Datum::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.width)
}
inline ::int32_t Datum::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Datum::_internal_set_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Datum::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Datum::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Datum::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.data)
}
inline std::string* Datum::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.Datum.data)
  return _s;
}
inline const std::string& Datum::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void Datum::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* Datum::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* Datum::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.Datum.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Datum::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Datum::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Datum::label() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.label)
  return _internal_label();
}
inline void Datum::set_label(::int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.label)
}
inline ::int32_t Datum::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_;
}
inline void Datum::_internal_set_label(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.label_ = value;
}

// repeated float float_data = 6;
inline int Datum::_internal_float_data_size() const {
  return _internal_float_data().size();
}
inline int Datum::float_data_size() const {
  return _internal_float_data_size();
}
inline void Datum::clear_float_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.float_data)
  return _internal_float_data().Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  _internal_mutable_float_data()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_float_data()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField<float>& Datum::float_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.Datum.float_data)
  return _internal_float_data();
}
inline ::google::protobuf::RepeatedField<float>* Datum::mutable_float_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.Datum.float_data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_float_data();
}
inline const ::google::protobuf::RepeatedField<float>& Datum::_internal_float_data()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_data_;
}
inline ::google::protobuf::RepeatedField<float>* Datum::_internal_mutable_float_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Datum::clear_encoded() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.encoded_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.Datum.encoded)
  return _internal_encoded();
}
inline void Datum::set_encoded(bool value) {
  _internal_set_encoded(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.Datum.encoded)
}
inline bool Datum::_internal_encoded() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.encoded_;
}
inline void Datum::_internal_set_encoded(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.encoded_ = value;
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FillerParameter::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToDefault(::opencv_caffe::FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FillerParameter::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.type)
  if (_impl_.type_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_type_.get();
  }
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FillerParameter::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.type)
}
inline std::string* FillerParameter::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.FillerParameter.type)
  return _s;
}
inline const std::string& FillerParameter::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void FillerParameter::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* FillerParameter::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(::opencv_caffe::FillerParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArena());
}
inline std::string* FillerParameter::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.FillerParameter.type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.type_.Release();
}
inline void FillerParameter::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FillerParameter::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.value)
  return _internal_value();
}
inline void FillerParameter::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.value)
}
inline float FillerParameter::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void FillerParameter::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_ = value;
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FillerParameter::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.min)
  return _internal_min();
}
inline void FillerParameter::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.min)
}
inline float FillerParameter::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void FillerParameter::_internal_set_min(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_ = value;
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FillerParameter::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.max)
  return _internal_max();
}
inline void FillerParameter::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.max)
}
inline float FillerParameter::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void FillerParameter::_internal_set_max(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_ = value;
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FillerParameter::clear_mean() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.mean)
  return _internal_mean();
}
inline void FillerParameter::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.mean)
}
inline float FillerParameter::_internal_mean() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_;
}
inline void FillerParameter::_internal_set_mean(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mean_ = value;
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FillerParameter::clear_std() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.std_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.std)
  return _internal_std();
}
inline void FillerParameter::set_std(float value) {
  _internal_set_std(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.std)
}
inline float FillerParameter::_internal_std() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.std_;
}
inline void FillerParameter::_internal_set_std(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.std_ = value;
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FillerParameter::clear_sparse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sparse_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.sparse)
  return _internal_sparse();
}
inline void FillerParameter::set_sparse(::int32_t value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.sparse)
}
inline ::int32_t FillerParameter::_internal_sparse() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sparse_;
}
inline void FillerParameter::_internal_set_sparse(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sparse_ = value;
}

// optional .opencv_caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FillerParameter::clear_variance_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variance_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::opencv_caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FillerParameter.variance_norm)
  return _internal_variance_norm();
}
inline void FillerParameter::set_variance_norm(::opencv_caffe::FillerParameter_VarianceNorm value) {
  _internal_set_variance_norm(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FillerParameter.variance_norm)
}
inline ::opencv_caffe::FillerParameter_VarianceNorm FillerParameter::_internal_variance_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::FillerParameter_VarianceNorm>(_impl_.variance_norm_);
}
inline void FillerParameter::_internal_set_variance_norm(::opencv_caffe::FillerParameter_VarianceNorm value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::FillerParameter_VarianceNorm_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.variance_norm_ = value;
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetParameter::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetParameter::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NetParameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.name)
}
inline std::string* NetParameter::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.name)
  return _s;
}
inline const std::string& NetParameter::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void NetParameter::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NetParameter::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NetParameter::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.NetParameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void NetParameter::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::_internal_input_size() const {
  return _internal_input().size();
}
inline int NetParameter::input_size() const {
  return _internal_input_size();
}
inline void NetParameter::clear_input() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_.Clear();
}
inline std::string* NetParameter::add_input()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_input()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.NetParameter.input)
  return _s;
}
inline const std::string& NetParameter::input(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.input)
  return _internal_input().Get(index);
}
inline std::string* NetParameter::mutable_input(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.input)
  return _internal_mutable_input()->Mutable(index);
}
inline void NetParameter::set_input(int index, const std::string& value) {
  _internal_mutable_input()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, std::string&& value) {
  _internal_mutable_input()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_input()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_input()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, absl::string_view value) {
  _internal_mutable_input()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.NetParameter.input)
}
inline void NetParameter::add_input(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.input)
}
inline void NetParameter::add_input(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.NetParameter.input)
}
inline void NetParameter::add_input(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetParameter::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetParameter.input)
  return _internal_input();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetParameter::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetParameter.input)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_input();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetParameter::_internal_input() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetParameter::_internal_mutable_input() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.input_;
}

// repeated .opencv_caffe.BlobShape input_shape = 8;
inline int NetParameter::_internal_input_shape_size() const {
  return _internal_input_shape().size();
}
inline int NetParameter::input_shape_size() const {
  return _internal_input_shape_size();
}
inline void NetParameter::clear_input_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_shape_.Clear();
}
inline ::opencv_caffe::BlobShape* NetParameter::mutable_input_shape(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.input_shape)
  return _internal_mutable_input_shape()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* NetParameter::mutable_input_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetParameter.input_shape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_input_shape();
}
inline const ::opencv_caffe::BlobShape& NetParameter::input_shape(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.input_shape)
  return _internal_input_shape().Get(index);
}
inline ::opencv_caffe::BlobShape* NetParameter::add_input_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobShape* _add = _internal_mutable_input_shape()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.input_shape)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& NetParameter::input_shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetParameter.input_shape)
  return _internal_input_shape();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>&
NetParameter::_internal_input_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_shape_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>*
NetParameter::_internal_mutable_input_shape() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::_internal_input_dim_size() const {
  return _internal_input_dim().size();
}
inline int NetParameter::input_dim_size() const {
  return _internal_input_dim_size();
}
inline void NetParameter::clear_input_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_dim_.Clear();
}
inline ::int32_t NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.input_dim)
  return _internal_input_dim().Get(index);
}
inline void NetParameter::set_input_dim(int index, ::int32_t value) {
  _internal_mutable_input_dim()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_input_dim()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NetParameter::input_dim() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetParameter.input_dim)
  return _internal_input_dim();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NetParameter::mutable_input_dim()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetParameter.input_dim)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_input_dim();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NetParameter::_internal_input_dim()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_dim_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NetParameter::_internal_mutable_input_dim() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetParameter::clear_force_backward() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_backward_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.force_backward)
  return _internal_force_backward();
}
inline void NetParameter::set_force_backward(bool value) {
  _internal_set_force_backward(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.force_backward)
}
inline bool NetParameter::_internal_force_backward() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_backward_;
}
inline void NetParameter::_internal_set_force_backward(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.force_backward_ = value;
}

// optional .opencv_caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void NetParameter::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::NetState& NetParameter::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NetState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NetState&>(::opencv_caffe::_NetState_default_instance_);
}
inline const ::opencv_caffe::NetState& NetParameter::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.state)
  return _internal_state();
}
inline void NetParameter::unsafe_arena_set_allocated_state(::opencv_caffe::NetState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::opencv_caffe::NetState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.NetParameter.state)
}
inline ::opencv_caffe::NetState* NetParameter::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::NetState* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NetState* NetParameter::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.NetParameter.state)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::NetState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NetState* NetParameter::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NetState>(GetArena());
    _impl_.state_ = reinterpret_cast<::opencv_caffe::NetState*>(p);
  }
  return _impl_.state_;
}
inline ::opencv_caffe::NetState* NetParameter::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NetState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.state)
  return _msg;
}
inline void NetParameter::set_allocated_state(::opencv_caffe::NetState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NetState*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NetState*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.state_ = reinterpret_cast<::opencv_caffe::NetState*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NetParameter::clear_debug_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.debug_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.debug_info)
  return _internal_debug_info();
}
inline void NetParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetParameter.debug_info)
}
inline bool NetParameter::_internal_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_info_;
}
inline void NetParameter::_internal_set_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_ = value;
}

// repeated .opencv_caffe.LayerParameter layer = 100;
inline int NetParameter::_internal_layer_size() const {
  return _internal_layer().size();
}
inline int NetParameter::layer_size() const {
  return _internal_layer_size();
}
inline void NetParameter::clear_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.layer_.Clear();
}
inline ::opencv_caffe::LayerParameter* NetParameter::mutable_layer(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.layer)
  return _internal_mutable_layer()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>* NetParameter::mutable_layer()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetParameter.layer)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_layer();
}
inline const ::opencv_caffe::LayerParameter& NetParameter::layer(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.layer)
  return _internal_layer().Get(index);
}
inline ::opencv_caffe::LayerParameter* NetParameter::add_layer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::LayerParameter* _add = _internal_mutable_layer()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.layer)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>& NetParameter::layer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetParameter.layer)
  return _internal_layer();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>&
NetParameter::_internal_layer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layer_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::LayerParameter>*
NetParameter::_internal_mutable_layer() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.layer_;
}

// repeated .opencv_caffe.V1LayerParameter layers = 2;
inline int NetParameter::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int NetParameter::layers_size() const {
  return _internal_layers_size();
}
inline void NetParameter::clear_layers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.layers_.Clear();
}
inline ::opencv_caffe::V1LayerParameter* NetParameter::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetParameter.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>* NetParameter::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetParameter.layers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_layers();
}
inline const ::opencv_caffe::V1LayerParameter& NetParameter::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetParameter.layers)
  return _internal_layers().Get(index);
}
inline ::opencv_caffe::V1LayerParameter* NetParameter::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::V1LayerParameter* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.NetParameter.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>& NetParameter::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetParameter.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>&
NetParameter::_internal_layers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::V1LayerParameter>*
NetParameter::_internal_mutable_layers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.layers_;
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SolverParameter::clear_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.net_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SolverParameter::net() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.net)
  return _internal_net();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_net(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.net_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.net)
}
inline std::string* SolverParameter::mutable_net() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_net();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.net)
  return _s;
}
inline const std::string& SolverParameter::_internal_net() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.net_.Get();
}
inline void SolverParameter::_internal_set_net(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.net_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.net_.Mutable( GetArena());
}
inline std::string* SolverParameter::release_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.net)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.net_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.net_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverParameter::set_allocated_net(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.net_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.net_.IsDefault()) {
          _impl_.net_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.net)
}

// optional .opencv_caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.net_param_ != nullptr);
  return value;
}
inline void SolverParameter::clear_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.net_param_ != nullptr) _impl_.net_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::opencv_caffe::NetParameter& SolverParameter::_internal_net_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NetParameter* p = _impl_.net_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NetParameter&>(::opencv_caffe::_NetParameter_default_instance_);
}
inline const ::opencv_caffe::NetParameter& SolverParameter::net_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.net_param)
  return _internal_net_param();
}
inline void SolverParameter::unsafe_arena_set_allocated_net_param(::opencv_caffe::NetParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.net_param_);
  }
  _impl_.net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.SolverParameter.net_param)
}
inline ::opencv_caffe::NetParameter* SolverParameter::release_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::NetParameter* released = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NetParameter* SolverParameter::unsafe_arena_release_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.net_param)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::NetParameter* temp = _impl_.net_param_;
  _impl_.net_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NetParameter* SolverParameter::_internal_mutable_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NetParameter>(GetArena());
    _impl_.net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(p);
  }
  return _impl_.net_param_;
}
inline ::opencv_caffe::NetParameter* SolverParameter::mutable_net_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NetParameter* _msg = _internal_mutable_net_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.net_param)
  return _msg;
}
inline void SolverParameter::set_allocated_net_param(::opencv_caffe::NetParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NetParameter*>(_impl_.net_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NetParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SolverParameter::clear_train_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.train_net_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverParameter::train_net() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.train_net)
  return _internal_train_net();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_train_net(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.train_net_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.train_net)
}
inline std::string* SolverParameter::mutable_train_net() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_train_net();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.train_net)
  return _s;
}
inline const std::string& SolverParameter::_internal_train_net() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.train_net_.Get();
}
inline void SolverParameter::_internal_set_train_net(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.train_net_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_train_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.train_net_.Mutable( GetArena());
}
inline std::string* SolverParameter::release_train_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.train_net)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.train_net_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.train_net_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverParameter::set_allocated_train_net(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.train_net_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.train_net_.IsDefault()) {
          _impl_.train_net_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::_internal_test_net_size() const {
  return _internal_test_net().size();
}
inline int SolverParameter::test_net_size() const {
  return _internal_test_net_size();
}
inline void SolverParameter::clear_test_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_net_.Clear();
}
inline std::string* SolverParameter::add_test_net()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_test_net()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.SolverParameter.test_net)
  return _s;
}
inline const std::string& SolverParameter::test_net(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_net)
  return _internal_test_net().Get(index);
}
inline std::string* SolverParameter::mutable_test_net(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.test_net)
  return _internal_mutable_test_net()->Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const std::string& value) {
  _internal_mutable_test_net()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, std::string&& value) {
  _internal_mutable_test_net()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_test_net()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_test_net()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, absl::string_view value) {
  _internal_mutable_test_net()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_net()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_net()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_net()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_net()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_net()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SolverParameter::test_net() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverParameter.test_net)
  return _internal_test_net();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SolverParameter::mutable_test_net() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverParameter.test_net)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_test_net();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SolverParameter::_internal_test_net() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_net_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SolverParameter::_internal_mutable_test_net() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.test_net_;
}

// optional .opencv_caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.train_net_param_ != nullptr);
  return value;
}
inline void SolverParameter::clear_train_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.train_net_param_ != nullptr) _impl_.train_net_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::opencv_caffe::NetParameter& SolverParameter::_internal_train_net_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NetParameter* p = _impl_.train_net_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NetParameter&>(::opencv_caffe::_NetParameter_default_instance_);
}
inline const ::opencv_caffe::NetParameter& SolverParameter::train_net_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.train_net_param)
  return _internal_train_net_param();
}
inline void SolverParameter::unsafe_arena_set_allocated_train_net_param(::opencv_caffe::NetParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.train_net_param_);
  }
  _impl_.train_net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.SolverParameter.train_net_param)
}
inline ::opencv_caffe::NetParameter* SolverParameter::release_train_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::NetParameter* released = _impl_.train_net_param_;
  _impl_.train_net_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NetParameter* SolverParameter::unsafe_arena_release_train_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.train_net_param)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::NetParameter* temp = _impl_.train_net_param_;
  _impl_.train_net_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NetParameter* SolverParameter::_internal_mutable_train_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.train_net_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NetParameter>(GetArena());
    _impl_.train_net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(p);
  }
  return _impl_.train_net_param_;
}
inline ::opencv_caffe::NetParameter* SolverParameter::mutable_train_net_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NetParameter* _msg = _internal_mutable_train_net_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.train_net_param)
  return _msg;
}
inline void SolverParameter::set_allocated_train_net_param(::opencv_caffe::NetParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NetParameter*>(_impl_.train_net_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NetParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.train_net_param_ = reinterpret_cast<::opencv_caffe::NetParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.train_net_param)
}

// repeated .opencv_caffe.NetParameter test_net_param = 22;
inline int SolverParameter::_internal_test_net_param_size() const {
  return _internal_test_net_param().size();
}
inline int SolverParameter::test_net_param_size() const {
  return _internal_test_net_param_size();
}
inline void SolverParameter::clear_test_net_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_net_param_.Clear();
}
inline ::opencv_caffe::NetParameter* SolverParameter::mutable_test_net_param(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.test_net_param)
  return _internal_mutable_test_net_param()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>* SolverParameter::mutable_test_net_param()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverParameter.test_net_param)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_test_net_param();
}
inline const ::opencv_caffe::NetParameter& SolverParameter::test_net_param(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_net_param)
  return _internal_test_net_param().Get(index);
}
inline ::opencv_caffe::NetParameter* SolverParameter::add_test_net_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetParameter* _add = _internal_mutable_test_net_param()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.test_net_param)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>& SolverParameter::test_net_param() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverParameter.test_net_param)
  return _internal_test_net_param();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>&
SolverParameter::_internal_test_net_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_net_param_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetParameter>*
SolverParameter::_internal_mutable_test_net_param() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.test_net_param_;
}

// optional .opencv_caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.train_state_ != nullptr);
  return value;
}
inline void SolverParameter::clear_train_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.train_state_ != nullptr) _impl_.train_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::opencv_caffe::NetState& SolverParameter::_internal_train_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NetState* p = _impl_.train_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NetState&>(::opencv_caffe::_NetState_default_instance_);
}
inline const ::opencv_caffe::NetState& SolverParameter::train_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.train_state)
  return _internal_train_state();
}
inline void SolverParameter::unsafe_arena_set_allocated_train_state(::opencv_caffe::NetState* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.train_state_);
  }
  _impl_.train_state_ = reinterpret_cast<::opencv_caffe::NetState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.SolverParameter.train_state)
}
inline ::opencv_caffe::NetState* SolverParameter::release_train_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::NetState* released = _impl_.train_state_;
  _impl_.train_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NetState* SolverParameter::unsafe_arena_release_train_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.train_state)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::NetState* temp = _impl_.train_state_;
  _impl_.train_state_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NetState* SolverParameter::_internal_mutable_train_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.train_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NetState>(GetArena());
    _impl_.train_state_ = reinterpret_cast<::opencv_caffe::NetState*>(p);
  }
  return _impl_.train_state_;
}
inline ::opencv_caffe::NetState* SolverParameter::mutable_train_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NetState* _msg = _internal_mutable_train_state();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.train_state)
  return _msg;
}
inline void SolverParameter::set_allocated_train_state(::opencv_caffe::NetState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NetState*>(_impl_.train_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NetState*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.train_state_ = reinterpret_cast<::opencv_caffe::NetState*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.train_state)
}

// repeated .opencv_caffe.NetState test_state = 27;
inline int SolverParameter::_internal_test_state_size() const {
  return _internal_test_state().size();
}
inline int SolverParameter::test_state_size() const {
  return _internal_test_state_size();
}
inline void SolverParameter::clear_test_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_state_.Clear();
}
inline ::opencv_caffe::NetState* SolverParameter::mutable_test_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.test_state)
  return _internal_mutable_test_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>* SolverParameter::mutable_test_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverParameter.test_state)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_test_state();
}
inline const ::opencv_caffe::NetState& SolverParameter::test_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_state)
  return _internal_test_state().Get(index);
}
inline ::opencv_caffe::NetState* SolverParameter::add_test_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetState* _add = _internal_mutable_test_state()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.test_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>& SolverParameter::test_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverParameter.test_state)
  return _internal_test_state();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>&
SolverParameter::_internal_test_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_state_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetState>*
SolverParameter::_internal_mutable_test_state() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::_internal_test_iter_size() const {
  return _internal_test_iter().size();
}
inline int SolverParameter::test_iter_size() const {
  return _internal_test_iter_size();
}
inline void SolverParameter::clear_test_iter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_iter_.Clear();
}
inline ::int32_t SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_iter)
  return _internal_test_iter().Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::int32_t value) {
  _internal_mutable_test_iter()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_test_iter()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SolverParameter::test_iter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverParameter.test_iter)
  return _internal_test_iter();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SolverParameter::mutable_test_iter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverParameter.test_iter)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_test_iter();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SolverParameter::_internal_test_iter()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_iter_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SolverParameter::_internal_mutable_test_iter() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SolverParameter::clear_test_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_interval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_interval)
  return _internal_test_interval();
}
inline void SolverParameter::set_test_interval(::int32_t value) {
  _internal_set_test_interval(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_interval)
}
inline ::int32_t SolverParameter::_internal_test_interval() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_interval_;
}
inline void SolverParameter::_internal_set_test_interval(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.test_interval_ = value;
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void SolverParameter::clear_test_compute_loss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_compute_loss_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_compute_loss)
  return _internal_test_compute_loss();
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  _internal_set_test_compute_loss(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_compute_loss)
}
inline bool SolverParameter::_internal_test_compute_loss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_compute_loss_;
}
inline void SolverParameter::_internal_set_test_compute_loss(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.test_compute_loss_ = value;
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void SolverParameter::clear_test_initialization() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_initialization_ = true;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.test_initialization)
  return _internal_test_initialization();
}
inline void SolverParameter::set_test_initialization(bool value) {
  _internal_set_test_initialization(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.test_initialization)
}
inline bool SolverParameter::_internal_test_initialization() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.test_initialization_;
}
inline void SolverParameter::_internal_set_test_initialization(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.test_initialization_ = value;
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SolverParameter::clear_base_lr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_lr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.base_lr)
  return _internal_base_lr();
}
inline void SolverParameter::set_base_lr(float value) {
  _internal_set_base_lr(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.base_lr)
}
inline float SolverParameter::_internal_base_lr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_lr_;
}
inline void SolverParameter::_internal_set_base_lr(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.base_lr_ = value;
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SolverParameter::clear_display() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.display)
  return _internal_display();
}
inline void SolverParameter::set_display(::int32_t value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.display)
}
inline ::int32_t SolverParameter::_internal_display() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_;
}
inline void SolverParameter::_internal_set_display(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.display_ = value;
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void SolverParameter::clear_average_loss() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.average_loss_ = 1;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::int32_t SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.average_loss)
  return _internal_average_loss();
}
inline void SolverParameter::set_average_loss(::int32_t value) {
  _internal_set_average_loss(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.average_loss)
}
inline ::int32_t SolverParameter::_internal_average_loss() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.average_loss_;
}
inline void SolverParameter::_internal_set_average_loss(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.average_loss_ = value;
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SolverParameter::clear_max_iter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_iter_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.max_iter)
  return _internal_max_iter();
}
inline void SolverParameter::set_max_iter(::int32_t value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.max_iter)
}
inline ::int32_t SolverParameter::_internal_max_iter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_iter_;
}
inline void SolverParameter::_internal_set_max_iter(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.max_iter_ = value;
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void SolverParameter::clear_iter_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iter_size_ = 1;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::int32_t SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.iter_size)
  return _internal_iter_size();
}
inline void SolverParameter::set_iter_size(::int32_t value) {
  _internal_set_iter_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.iter_size)
}
inline ::int32_t SolverParameter::_internal_iter_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iter_size_;
}
inline void SolverParameter::_internal_set_iter_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.iter_size_ = value;
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SolverParameter::clear_lr_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lr_policy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SolverParameter::lr_policy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.lr_policy)
  return _internal_lr_policy();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_lr_policy(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lr_policy_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.lr_policy)
}
inline std::string* SolverParameter::mutable_lr_policy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_lr_policy();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.lr_policy)
  return _s;
}
inline const std::string& SolverParameter::_internal_lr_policy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lr_policy_.Get();
}
inline void SolverParameter::_internal_set_lr_policy(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lr_policy_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_lr_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.lr_policy_.Mutable( GetArena());
}
inline std::string* SolverParameter::release_lr_policy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.lr_policy)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.lr_policy_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lr_policy_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverParameter::set_allocated_lr_policy(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lr_policy_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lr_policy_.IsDefault()) {
          _impl_.lr_policy_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SolverParameter::clear_gamma() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gamma_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.gamma)
  return _internal_gamma();
}
inline void SolverParameter::set_gamma(float value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.gamma)
}
inline float SolverParameter::_internal_gamma() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gamma_;
}
inline void SolverParameter::_internal_set_gamma(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.gamma_ = value;
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SolverParameter::clear_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.power_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.power)
  return _internal_power();
}
inline void SolverParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.power)
}
inline float SolverParameter::_internal_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.power_;
}
inline void SolverParameter::_internal_set_power(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.power_ = value;
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SolverParameter::clear_momentum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.momentum_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.momentum)
  return _internal_momentum();
}
inline void SolverParameter::set_momentum(float value) {
  _internal_set_momentum(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.momentum)
}
inline float SolverParameter::_internal_momentum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.momentum_;
}
inline void SolverParameter::_internal_set_momentum(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.momentum_ = value;
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SolverParameter::clear_weight_decay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weight_decay_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.weight_decay)
  return _internal_weight_decay();
}
inline void SolverParameter::set_weight_decay(float value) {
  _internal_set_weight_decay(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.weight_decay)
}
inline float SolverParameter::_internal_weight_decay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weight_decay_;
}
inline void SolverParameter::_internal_set_weight_decay(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.weight_decay_ = value;
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SolverParameter::clear_regularization_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.regularization_type_.ClearToDefault(::opencv_caffe::SolverParameter::Impl_::_i_give_permission_to_break_this_code_default_regularization_type_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SolverParameter::regularization_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.regularization_type)
  if (_impl_.regularization_type_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_regularization_type_.get();
  }
  return _internal_regularization_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_regularization_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.regularization_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.regularization_type)
}
inline std::string* SolverParameter::mutable_regularization_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_regularization_type();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.regularization_type)
  return _s;
}
inline const std::string& SolverParameter::_internal_regularization_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.regularization_type_.Get();
}
inline void SolverParameter::_internal_set_regularization_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.regularization_type_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_regularization_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.regularization_type_.Mutable(::opencv_caffe::SolverParameter::Impl_::_i_give_permission_to_break_this_code_default_regularization_type_, GetArena());
}
inline std::string* SolverParameter::release_regularization_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.regularization_type)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  return _impl_.regularization_type_.Release();
}
inline void SolverParameter::set_allocated_regularization_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.regularization_type_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SolverParameter::clear_stepsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stepsize_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.stepsize)
  return _internal_stepsize();
}
inline void SolverParameter::set_stepsize(::int32_t value) {
  _internal_set_stepsize(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.stepsize)
}
inline ::int32_t SolverParameter::_internal_stepsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stepsize_;
}
inline void SolverParameter::_internal_set_stepsize(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.stepsize_ = value;
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::_internal_stepvalue_size() const {
  return _internal_stepvalue().size();
}
inline int SolverParameter::stepvalue_size() const {
  return _internal_stepvalue_size();
}
inline void SolverParameter::clear_stepvalue() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stepvalue_.Clear();
}
inline ::int32_t SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.stepvalue)
  return _internal_stepvalue().Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::int32_t value) {
  _internal_mutable_stepvalue()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stepvalue()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SolverParameter::stepvalue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverParameter.stepvalue)
  return _internal_stepvalue();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SolverParameter::mutable_stepvalue()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverParameter.stepvalue)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stepvalue();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SolverParameter::_internal_stepvalue()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stepvalue_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SolverParameter::_internal_mutable_stepvalue() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void SolverParameter::clear_clip_gradients() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clip_gradients_ = -1;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.clip_gradients)
  return _internal_clip_gradients();
}
inline void SolverParameter::set_clip_gradients(float value) {
  _internal_set_clip_gradients(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.clip_gradients)
}
inline float SolverParameter::_internal_clip_gradients() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clip_gradients_;
}
inline void SolverParameter::_internal_set_clip_gradients(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.clip_gradients_ = value;
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void SolverParameter::clear_snapshot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.snapshot_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.snapshot)
  return _internal_snapshot();
}
inline void SolverParameter::set_snapshot(::int32_t value) {
  _internal_set_snapshot(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot)
}
inline ::int32_t SolverParameter::_internal_snapshot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.snapshot_;
}
inline void SolverParameter::_internal_set_snapshot(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.snapshot_ = value;
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SolverParameter::clear_snapshot_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.snapshot_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SolverParameter::snapshot_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.snapshot_prefix)
  return _internal_snapshot_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_snapshot_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.snapshot_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot_prefix)
}
inline std::string* SolverParameter::mutable_snapshot_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.snapshot_prefix)
  return _s;
}
inline const std::string& SolverParameter::_internal_snapshot_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.snapshot_prefix_.Get();
}
inline void SolverParameter::_internal_set_snapshot_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.snapshot_prefix_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_snapshot_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.snapshot_prefix_.Mutable( GetArena());
}
inline std::string* SolverParameter::release_snapshot_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.snapshot_prefix)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.snapshot_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.snapshot_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverParameter::set_allocated_snapshot_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.snapshot_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.snapshot_prefix_.IsDefault()) {
          _impl_.snapshot_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void SolverParameter::clear_snapshot_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.snapshot_diff_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.snapshot_diff)
  return _internal_snapshot_diff();
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  _internal_set_snapshot_diff(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot_diff)
}
inline bool SolverParameter::_internal_snapshot_diff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.snapshot_diff_;
}
inline void SolverParameter::_internal_set_snapshot_diff(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.snapshot_diff_ = value;
}

// optional .opencv_caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void SolverParameter::clear_snapshot_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.snapshot_format_ = 1;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::opencv_caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.snapshot_format)
  return _internal_snapshot_format();
}
inline void SolverParameter::set_snapshot_format(::opencv_caffe::SolverParameter_SnapshotFormat value) {
  _internal_set_snapshot_format(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot_format)
}
inline ::opencv_caffe::SolverParameter_SnapshotFormat SolverParameter::_internal_snapshot_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SolverParameter_SnapshotFormat>(_impl_.snapshot_format_);
}
inline void SolverParameter::_internal_set_snapshot_format(::opencv_caffe::SolverParameter_SnapshotFormat value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SolverParameter_SnapshotFormat_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.snapshot_format_ = value;
}

// optional .opencv_caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void SolverParameter::clear_solver_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solver_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::opencv_caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.solver_mode)
  return _internal_solver_mode();
}
inline void SolverParameter::set_solver_mode(::opencv_caffe::SolverParameter_SolverMode value) {
  _internal_set_solver_mode(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.solver_mode)
}
inline ::opencv_caffe::SolverParameter_SolverMode SolverParameter::_internal_solver_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SolverParameter_SolverMode>(_impl_.solver_mode_);
}
inline void SolverParameter::_internal_set_solver_mode(::opencv_caffe::SolverParameter_SolverMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SolverParameter_SolverMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.solver_mode_ = value;
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void SolverParameter::clear_device_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.device_id)
  return _internal_device_id();
}
inline void SolverParameter::set_device_id(::int32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.device_id)
}
inline ::int32_t SolverParameter::_internal_device_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_id_;
}
inline void SolverParameter::_internal_set_device_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.device_id_ = value;
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void SolverParameter::clear_random_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_seed_ = ::int64_t{-1};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int64_t SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.random_seed)
  return _internal_random_seed();
}
inline void SolverParameter::set_random_seed(::int64_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.random_seed)
}
inline ::int64_t SolverParameter::_internal_random_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_seed_;
}
inline void SolverParameter::_internal_set_random_seed(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.random_seed_ = value;
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SolverParameter::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToDefault(::opencv_caffe::SolverParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SolverParameter::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.type)
  if (_impl_.type_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_type_.get();
  }
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverParameter::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.type)
}
inline std::string* SolverParameter::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverParameter.type)
  return _s;
}
inline const std::string& SolverParameter::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void SolverParameter::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* SolverParameter::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.type_.Mutable(::opencv_caffe::SolverParameter::Impl_::_i_give_permission_to_break_this_code_default_type_, GetArena());
}
inline std::string* SolverParameter::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverParameter.type)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  return _impl_.type_.Release();
}
inline void SolverParameter::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.type_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void SolverParameter::clear_delta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delta_ = 1e-08f;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.delta)
  return _internal_delta();
}
inline void SolverParameter::set_delta(float value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.delta)
}
inline float SolverParameter::_internal_delta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delta_;
}
inline void SolverParameter::_internal_set_delta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.delta_ = value;
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void SolverParameter::clear_momentum2() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.momentum2_ = 0.999f;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.momentum2)
  return _internal_momentum2();
}
inline void SolverParameter::set_momentum2(float value) {
  _internal_set_momentum2(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.momentum2)
}
inline float SolverParameter::_internal_momentum2() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.momentum2_;
}
inline void SolverParameter::_internal_set_momentum2(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.momentum2_ = value;
}

// optional float rms_decay = 38 [default = 0.99];
inline bool SolverParameter::has_rms_decay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void SolverParameter::clear_rms_decay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rms_decay_ = 0.99f;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.rms_decay)
  return _internal_rms_decay();
}
inline void SolverParameter::set_rms_decay(float value) {
  _internal_set_rms_decay(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.rms_decay)
}
inline float SolverParameter::_internal_rms_decay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rms_decay_;
}
inline void SolverParameter::_internal_set_rms_decay(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.rms_decay_ = value;
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void SolverParameter::clear_debug_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.debug_info_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.debug_info)
  return _internal_debug_info();
}
inline void SolverParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.debug_info)
}
inline bool SolverParameter::_internal_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_info_;
}
inline void SolverParameter::_internal_set_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.debug_info_ = value;
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void SolverParameter::clear_snapshot_after_train() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.snapshot_after_train_ = true;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.snapshot_after_train)
  return _internal_snapshot_after_train();
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  _internal_set_snapshot_after_train(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.snapshot_after_train)
}
inline bool SolverParameter::_internal_snapshot_after_train() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.snapshot_after_train_;
}
inline void SolverParameter::_internal_set_snapshot_after_train(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.snapshot_after_train_ = value;
}

// optional .opencv_caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void SolverParameter::clear_solver_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solver_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::opencv_caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverParameter.solver_type)
  return _internal_solver_type();
}
inline void SolverParameter::set_solver_type(::opencv_caffe::SolverParameter_SolverType value) {
  _internal_set_solver_type(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverParameter.solver_type)
}
inline ::opencv_caffe::SolverParameter_SolverType SolverParameter::_internal_solver_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SolverParameter_SolverType>(_impl_.solver_type_);
}
inline void SolverParameter::_internal_set_solver_type(::opencv_caffe::SolverParameter_SolverType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SolverParameter_SolverType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.solver_type_ = value;
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SolverState::clear_iter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SolverState::iter() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverState.iter)
  return _internal_iter();
}
inline void SolverState::set_iter(::int32_t value) {
  _internal_set_iter(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverState.iter)
}
inline ::int32_t SolverState::_internal_iter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iter_;
}
inline void SolverState::_internal_set_iter(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iter_ = value;
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SolverState::clear_learned_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.learned_net_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolverState::learned_net() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverState.learned_net)
  return _internal_learned_net();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolverState::set_learned_net(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.learned_net_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverState.learned_net)
}
inline std::string* SolverState::mutable_learned_net() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_learned_net();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverState.learned_net)
  return _s;
}
inline const std::string& SolverState::_internal_learned_net() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.learned_net_.Get();
}
inline void SolverState::_internal_set_learned_net(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.learned_net_.Set(value, GetArena());
}
inline std::string* SolverState::_internal_mutable_learned_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.learned_net_.Mutable( GetArena());
}
inline std::string* SolverState::release_learned_net() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SolverState.learned_net)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.learned_net_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.learned_net_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolverState::set_allocated_learned_net(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.learned_net_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.learned_net_.IsDefault()) {
          _impl_.learned_net_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SolverState.learned_net)
}

// repeated .opencv_caffe.BlobProto history = 3;
inline int SolverState::_internal_history_size() const {
  return _internal_history().size();
}
inline int SolverState::history_size() const {
  return _internal_history_size();
}
inline void SolverState::clear_history() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.history_.Clear();
}
inline ::opencv_caffe::BlobProto* SolverState::mutable_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SolverState.history)
  return _internal_mutable_history()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* SolverState::mutable_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SolverState.history)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_history();
}
inline const ::opencv_caffe::BlobProto& SolverState::history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverState.history)
  return _internal_history().Get(index);
}
inline ::opencv_caffe::BlobProto* SolverState::add_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobProto* _add = _internal_mutable_history()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.SolverState.history)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& SolverState::history() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SolverState.history)
  return _internal_history();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>&
SolverState::_internal_history() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.history_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>*
SolverState::_internal_mutable_history() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SolverState::clear_current_step() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SolverState.current_step)
  return _internal_current_step();
}
inline void SolverState::set_current_step(::int32_t value) {
  _internal_set_current_step(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SolverState.current_step)
}
inline ::int32_t SolverState::_internal_current_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_step_;
}
inline void SolverState::_internal_set_current_step(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.current_step_ = value;
}

// -------------------------------------------------------------------

// NetState

// optional .opencv_caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetState::clear_phase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phase_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetState.phase)
  return _internal_phase();
}
inline void NetState::set_phase(::opencv_caffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetState.phase)
}
inline ::opencv_caffe::Phase NetState::_internal_phase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::Phase>(_impl_.phase_);
}
inline void NetState::_internal_set_phase(::opencv_caffe::Phase value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::Phase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phase_ = value;
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetState::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NetState::level() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetState.level)
  return _internal_level();
}
inline void NetState::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetState.level)
}
inline ::int32_t NetState::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void NetState::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}

// repeated string stage = 3;
inline int NetState::_internal_stage_size() const {
  return _internal_stage().size();
}
inline int NetState::stage_size() const {
  return _internal_stage_size();
}
inline void NetState::clear_stage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stage_.Clear();
}
inline std::string* NetState::add_stage()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_stage()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.NetState.stage)
  return _s;
}
inline const std::string& NetState::stage(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetState.stage)
  return _internal_stage().Get(index);
}
inline std::string* NetState::mutable_stage(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetState.stage)
  return _internal_mutable_stage()->Mutable(index);
}
inline void NetState::set_stage(int index, const std::string& value) {
  _internal_mutable_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetState.stage)
}
inline void NetState::set_stage(int index, std::string&& value) {
  _internal_mutable_stage()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_stage()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.NetState.stage)
}
inline void NetState::set_stage(int index, absl::string_view value) {
  _internal_mutable_stage()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.NetState.stage)
}
inline void NetState::add_stage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.NetState.stage)
}
inline void NetState::add_stage(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.NetState.stage)
}
inline void NetState::add_stage(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetState::stage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetState.stage)
  return _internal_stage();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetState::mutable_stage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetState.stage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stage();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetState::_internal_stage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stage_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetState::_internal_mutable_stage() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .opencv_caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NetStateRule::clear_phase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phase_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetStateRule.phase)
  return _internal_phase();
}
inline void NetStateRule::set_phase(::opencv_caffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.phase)
}
inline ::opencv_caffe::Phase NetStateRule::_internal_phase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::Phase>(_impl_.phase_);
}
inline void NetStateRule::_internal_set_phase(::opencv_caffe::Phase value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::Phase_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phase_ = value;
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NetStateRule::clear_min_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetStateRule.min_level)
  return _internal_min_level();
}
inline void NetStateRule::set_min_level(::int32_t value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.min_level)
}
inline ::int32_t NetStateRule::_internal_min_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_level_;
}
inline void NetStateRule::_internal_set_min_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_level_ = value;
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NetStateRule::clear_max_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetStateRule.max_level)
  return _internal_max_level();
}
inline void NetStateRule::set_max_level(::int32_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.max_level)
}
inline ::int32_t NetStateRule::_internal_max_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_level_;
}
inline void NetStateRule::_internal_set_max_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_level_ = value;
}

// repeated string stage = 4;
inline int NetStateRule::_internal_stage_size() const {
  return _internal_stage().size();
}
inline int NetStateRule::stage_size() const {
  return _internal_stage_size();
}
inline void NetStateRule::clear_stage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stage_.Clear();
}
inline std::string* NetStateRule::add_stage()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_stage()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.NetStateRule.stage)
  return _s;
}
inline const std::string& NetStateRule::stage(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetStateRule.stage)
  return _internal_stage().Get(index);
}
inline std::string* NetStateRule::mutable_stage(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetStateRule.stage)
  return _internal_mutable_stage()->Mutable(index);
}
inline void NetStateRule::set_stage(int index, const std::string& value) {
  _internal_mutable_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, std::string&& value) {
  _internal_mutable_stage()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_stage()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, absl::string_view value) {
  _internal_mutable_stage()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stage()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetStateRule::stage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetStateRule.stage)
  return _internal_stage();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetStateRule::mutable_stage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetStateRule.stage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stage();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetStateRule::_internal_stage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stage_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetStateRule::_internal_mutable_stage() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::_internal_not_stage_size() const {
  return _internal_not_stage().size();
}
inline int NetStateRule::not_stage_size() const {
  return _internal_not_stage_size();
}
inline void NetStateRule::clear_not_stage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.not_stage_.Clear();
}
inline std::string* NetStateRule::add_not_stage()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_not_stage()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.NetStateRule.not_stage)
  return _s;
}
inline const std::string& NetStateRule::not_stage(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.NetStateRule.not_stage)
  return _internal_not_stage().Get(index);
}
inline std::string* NetStateRule::mutable_not_stage(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.NetStateRule.not_stage)
  return _internal_mutable_not_stage()->Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const std::string& value) {
  _internal_mutable_not_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, std::string&& value) {
  _internal_mutable_not_stage()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_not_stage()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_not_stage()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, absl::string_view value) {
  _internal_mutable_not_stage()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_stage()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_stage()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_stage()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_not_stage()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetStateRule::not_stage() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.NetStateRule.not_stage)
  return _internal_not_stage();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetStateRule::mutable_not_stage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.NetStateRule.not_stage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_not_stage();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
NetStateRule::_internal_not_stage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.not_stage_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
NetStateRule::_internal_mutable_not_stage() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ParamSpec::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParamSpec::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ParamSpec.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParamSpec::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.ParamSpec.name)
}
inline std::string* ParamSpec::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ParamSpec.name)
  return _s;
}
inline const std::string& ParamSpec::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ParamSpec::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ParamSpec::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ParamSpec::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ParamSpec.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ParamSpec::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ParamSpec.name)
}

// optional .opencv_caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ParamSpec::clear_share_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ParamSpec.share_mode)
  return _internal_share_mode();
}
inline void ParamSpec::set_share_mode(::opencv_caffe::ParamSpec_DimCheckMode value) {
  _internal_set_share_mode(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ParamSpec.share_mode)
}
inline ::opencv_caffe::ParamSpec_DimCheckMode ParamSpec::_internal_share_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::ParamSpec_DimCheckMode>(_impl_.share_mode_);
}
inline void ParamSpec::_internal_set_share_mode(::opencv_caffe::ParamSpec_DimCheckMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::ParamSpec_DimCheckMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.share_mode_ = value;
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ParamSpec::clear_lr_mult() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lr_mult_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ParamSpec.lr_mult)
  return _internal_lr_mult();
}
inline void ParamSpec::set_lr_mult(float value) {
  _internal_set_lr_mult(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ParamSpec.lr_mult)
}
inline float ParamSpec::_internal_lr_mult() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lr_mult_;
}
inline void ParamSpec::_internal_set_lr_mult(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lr_mult_ = value;
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ParamSpec::clear_decay_mult() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.decay_mult_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ParamSpec.decay_mult)
  return _internal_decay_mult();
}
inline void ParamSpec::set_decay_mult(float value) {
  _internal_set_decay_mult(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ParamSpec.decay_mult)
}
inline float ParamSpec::_internal_decay_mult() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.decay_mult_;
}
inline void ParamSpec::_internal_set_decay_mult(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.decay_mult_ = value;
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LayerParameter::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerParameter::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LayerParameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.name)
}
inline std::string* LayerParameter::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.name)
  return _s;
}
inline const std::string& LayerParameter::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void LayerParameter::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LayerParameter::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LayerParameter::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LayerParameter::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LayerParameter::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerParameter::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LayerParameter::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.type)
}
inline std::string* LayerParameter::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.type)
  return _s;
}
inline const std::string& LayerParameter::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void LayerParameter::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* LayerParameter::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* LayerParameter::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.type)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LayerParameter::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::_internal_bottom_size() const {
  return _internal_bottom().size();
}
inline int LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void LayerParameter::clear_bottom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bottom_.Clear();
}
inline std::string* LayerParameter::add_bottom()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_bottom()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.LayerParameter.bottom)
  return _s;
}
inline const std::string& LayerParameter::bottom(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.bottom)
  return _internal_bottom().Get(index);
}
inline std::string* LayerParameter::mutable_bottom(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.bottom)
  return _internal_mutable_bottom()->Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const std::string& value) {
  _internal_mutable_bottom()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, std::string&& value) {
  _internal_mutable_bottom()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_bottom()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_bottom()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, absl::string_view value) {
  _internal_mutable_bottom()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LayerParameter::bottom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.bottom)
  return _internal_bottom();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LayerParameter::mutable_bottom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.bottom)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bottom();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LayerParameter::_internal_bottom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bottom_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LayerParameter::_internal_mutable_bottom() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bottom_;
}

// repeated string top = 4;
inline int LayerParameter::_internal_top_size() const {
  return _internal_top().size();
}
inline int LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void LayerParameter::clear_top() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_.Clear();
}
inline std::string* LayerParameter::add_top()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_top()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.LayerParameter.top)
  return _s;
}
inline const std::string& LayerParameter::top(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.top)
  return _internal_top().Get(index);
}
inline std::string* LayerParameter::mutable_top(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.top)
  return _internal_mutable_top()->Mutable(index);
}
inline void LayerParameter::set_top(int index, const std::string& value) {
  _internal_mutable_top()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, std::string&& value) {
  _internal_mutable_top()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_top()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_top()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, absl::string_view value) {
  _internal_mutable_top()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LayerParameter::top() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.top)
  return _internal_top();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LayerParameter::mutable_top() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.top)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_top();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LayerParameter::_internal_top() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LayerParameter::_internal_mutable_top() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.top_;
}

// optional .opencv_caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void LayerParameter::clear_phase() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.phase_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::opencv_caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.phase)
  return _internal_phase();
}
inline void LayerParameter::set_phase(::opencv_caffe::Phase value) {
  _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.phase)
}
inline ::opencv_caffe::Phase LayerParameter::_internal_phase() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::Phase>(_impl_.phase_);
}
inline void LayerParameter::_internal_set_phase(::opencv_caffe::Phase value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::Phase_IsValid(value));
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.phase_ = value;
}

// repeated float loss_weight = 5;
inline int LayerParameter::_internal_loss_weight_size() const {
  return _internal_loss_weight().size();
}
inline int LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void LayerParameter::clear_loss_weight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.loss_weight)
  return _internal_loss_weight().Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  _internal_mutable_loss_weight()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_loss_weight()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField<float>& LayerParameter::loss_weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::google::protobuf::RepeatedField<float>* LayerParameter::mutable_loss_weight()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.loss_weight)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_loss_weight();
}
inline const ::google::protobuf::RepeatedField<float>& LayerParameter::_internal_loss_weight()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.loss_weight_;
}
inline ::google::protobuf::RepeatedField<float>* LayerParameter::_internal_mutable_loss_weight() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.loss_weight_;
}

// repeated .opencv_caffe.ParamSpec param = 6;
inline int LayerParameter::_internal_param_size() const {
  return _internal_param().size();
}
inline int LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void LayerParameter::clear_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.param_.Clear();
}
inline ::opencv_caffe::ParamSpec* LayerParameter::mutable_param(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.param)
  return _internal_mutable_param()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>* LayerParameter::mutable_param()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.param)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_param();
}
inline const ::opencv_caffe::ParamSpec& LayerParameter::param(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.param)
  return _internal_param().Get(index);
}
inline ::opencv_caffe::ParamSpec* LayerParameter::add_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::ParamSpec* _add = _internal_mutable_param()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.param)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>& LayerParameter::param() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.param)
  return _internal_param();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>&
LayerParameter::_internal_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::ParamSpec>*
LayerParameter::_internal_mutable_param() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.param_;
}

// repeated .opencv_caffe.BlobProto blobs = 7;
inline int LayerParameter::_internal_blobs_size() const {
  return _internal_blobs().size();
}
inline int LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void LayerParameter::clear_blobs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_.Clear();
}
inline ::opencv_caffe::BlobProto* LayerParameter::mutable_blobs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.blobs)
  return _internal_mutable_blobs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* LayerParameter::mutable_blobs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.blobs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs();
}
inline const ::opencv_caffe::BlobProto& LayerParameter::blobs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.blobs)
  return _internal_blobs().Get(index);
}
inline ::opencv_caffe::BlobProto* LayerParameter::add_blobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobProto* _add = _internal_mutable_blobs()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.blobs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& LayerParameter::blobs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.blobs)
  return _internal_blobs();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>&
LayerParameter::_internal_blobs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>*
LayerParameter::_internal_mutable_blobs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::_internal_propagate_down_size() const {
  return _internal_propagate_down().size();
}
inline int LayerParameter::propagate_down_size() const {
  return _internal_propagate_down_size();
}
inline void LayerParameter::clear_propagate_down() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.propagate_down)
  return _internal_propagate_down().Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  _internal_mutable_propagate_down()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_propagate_down()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField<bool>& LayerParameter::propagate_down() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.propagate_down)
  return _internal_propagate_down();
}
inline ::google::protobuf::RepeatedField<bool>* LayerParameter::mutable_propagate_down()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.propagate_down)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_propagate_down();
}
inline const ::google::protobuf::RepeatedField<bool>& LayerParameter::_internal_propagate_down()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.propagate_down_;
}
inline ::google::protobuf::RepeatedField<bool>* LayerParameter::_internal_mutable_propagate_down() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.propagate_down_;
}

// repeated .opencv_caffe.NetStateRule include = 8;
inline int LayerParameter::_internal_include_size() const {
  return _internal_include().size();
}
inline int LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void LayerParameter::clear_include() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_.Clear();
}
inline ::opencv_caffe::NetStateRule* LayerParameter::mutable_include(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.include)
  return _internal_mutable_include()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* LayerParameter::mutable_include()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.include)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_include();
}
inline const ::opencv_caffe::NetStateRule& LayerParameter::include(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.include)
  return _internal_include().Get(index);
}
inline ::opencv_caffe::NetStateRule* LayerParameter::add_include() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetStateRule* _add = _internal_mutable_include()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.include)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& LayerParameter::include() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.include)
  return _internal_include();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>&
LayerParameter::_internal_include() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>*
LayerParameter::_internal_mutable_include() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.include_;
}

// repeated .opencv_caffe.NetStateRule exclude = 9;
inline int LayerParameter::_internal_exclude_size() const {
  return _internal_exclude().size();
}
inline int LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void LayerParameter::clear_exclude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exclude_.Clear();
}
inline ::opencv_caffe::NetStateRule* LayerParameter::mutable_exclude(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.exclude)
  return _internal_mutable_exclude()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* LayerParameter::mutable_exclude()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.LayerParameter.exclude)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exclude();
}
inline const ::opencv_caffe::NetStateRule& LayerParameter::exclude(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.exclude)
  return _internal_exclude().Get(index);
}
inline ::opencv_caffe::NetStateRule* LayerParameter::add_exclude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetStateRule* _add = _internal_mutable_exclude()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.LayerParameter.exclude)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& LayerParameter::exclude() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.LayerParameter.exclude)
  return _internal_exclude();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>&
LayerParameter::_internal_exclude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exclude_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>*
LayerParameter::_internal_mutable_exclude() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exclude_;
}

// optional .opencv_caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_param_ != nullptr) _impl_.transform_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::opencv_caffe::TransformationParameter& LayerParameter::_internal_transform_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::TransformationParameter* p = _impl_.transform_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::TransformationParameter&>(::opencv_caffe::_TransformationParameter_default_instance_);
}
inline const ::opencv_caffe::TransformationParameter& LayerParameter::transform_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_transform_param(::opencv_caffe::TransformationParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transform_param_);
  }
  _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.transform_param)
}
inline ::opencv_caffe::TransformationParameter* LayerParameter::release_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::opencv_caffe::TransformationParameter* released = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::TransformationParameter* LayerParameter::unsafe_arena_release_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.transform_param)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::opencv_caffe::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::TransformationParameter* LayerParameter::_internal_mutable_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::TransformationParameter>(GetArena());
    _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(p);
  }
  return _impl_.transform_param_;
}
inline ::opencv_caffe::TransformationParameter* LayerParameter::mutable_transform_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::TransformationParameter* _msg = _internal_mutable_transform_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.transform_param)
  return _msg;
}
inline void LayerParameter::set_allocated_transform_param(::opencv_caffe::TransformationParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::TransformationParameter*>(_impl_.transform_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.transform_param)
}

// optional .opencv_caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loss_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.loss_param_ != nullptr) _impl_.loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::opencv_caffe::LossParameter& LayerParameter::_internal_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::LossParameter* p = _impl_.loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::LossParameter&>(::opencv_caffe::_LossParameter_default_instance_);
}
inline const ::opencv_caffe::LossParameter& LayerParameter::loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_loss_param(::opencv_caffe::LossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.loss_param_);
  }
  _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.loss_param)
}
inline ::opencv_caffe::LossParameter* LayerParameter::release_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::opencv_caffe::LossParameter* released = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::LossParameter* LayerParameter::unsafe_arena_release_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.loss_param)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::opencv_caffe::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::LossParameter* LayerParameter::_internal_mutable_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::LossParameter>(GetArena());
    _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(p);
  }
  return _impl_.loss_param_;
}
inline ::opencv_caffe::LossParameter* LayerParameter::mutable_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::LossParameter* _msg = _internal_mutable_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_loss_param(::opencv_caffe::LossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::LossParameter*>(_impl_.loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::LossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.loss_param)
}

// optional .opencv_caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.accuracy_param_ != nullptr) _impl_.accuracy_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::opencv_caffe::AccuracyParameter& LayerParameter::_internal_accuracy_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::AccuracyParameter* p = _impl_.accuracy_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::AccuracyParameter&>(::opencv_caffe::_AccuracyParameter_default_instance_);
}
inline const ::opencv_caffe::AccuracyParameter& LayerParameter::accuracy_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_param_);
  }
  _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.accuracy_param)
}
inline ::opencv_caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::opencv_caffe::AccuracyParameter* released = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::AccuracyParameter* LayerParameter::unsafe_arena_release_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.accuracy_param)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::opencv_caffe::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::AccuracyParameter* LayerParameter::_internal_mutable_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::AccuracyParameter>(GetArena());
    _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(p);
  }
  return _impl_.accuracy_param_;
}
inline ::opencv_caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::AccuracyParameter* _msg = _internal_mutable_accuracy_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.accuracy_param)
  return _msg;
}
inline void LayerParameter::set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::AccuracyParameter*>(_impl_.accuracy_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.accuracy_param)
}

// optional .opencv_caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argmax_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.argmax_param_ != nullptr) _impl_.argmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::opencv_caffe::ArgMaxParameter& LayerParameter::_internal_argmax_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ArgMaxParameter* p = _impl_.argmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ArgMaxParameter&>(::opencv_caffe::_ArgMaxParameter_default_instance_);
}
inline const ::opencv_caffe::ArgMaxParameter& LayerParameter::argmax_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.argmax_param_);
  }
  _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.argmax_param)
}
inline ::opencv_caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::ArgMaxParameter* released = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ArgMaxParameter* LayerParameter::unsafe_arena_release_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.argmax_param)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ArgMaxParameter* LayerParameter::_internal_mutable_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ArgMaxParameter>(GetArena());
    _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(p);
  }
  return _impl_.argmax_param_;
}
inline ::opencv_caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ArgMaxParameter* _msg = _internal_mutable_argmax_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.argmax_param)
  return _msg;
}
inline void LayerParameter::set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(_impl_.argmax_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.argmax_param)
}

// optional .opencv_caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.batch_norm_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_batch_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.batch_norm_param_ != nullptr) _impl_.batch_norm_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline const ::opencv_caffe::BatchNormParameter& LayerParameter::_internal_batch_norm_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::BatchNormParameter* p = _impl_.batch_norm_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::BatchNormParameter&>(::opencv_caffe::_BatchNormParameter_default_instance_);
}
inline const ::opencv_caffe::BatchNormParameter& LayerParameter::batch_norm_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.batch_norm_param)
  return _internal_batch_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_batch_norm_param(::opencv_caffe::BatchNormParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.batch_norm_param_);
  }
  _impl_.batch_norm_param_ = reinterpret_cast<::opencv_caffe::BatchNormParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.batch_norm_param)
}
inline ::opencv_caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000200u;
  ::opencv_caffe::BatchNormParameter* released = _impl_.batch_norm_param_;
  _impl_.batch_norm_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::BatchNormParameter* LayerParameter::unsafe_arena_release_batch_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.batch_norm_param)

  _impl_._has_bits_[1] &= ~0x00000200u;
  ::opencv_caffe::BatchNormParameter* temp = _impl_.batch_norm_param_;
  _impl_.batch_norm_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::BatchNormParameter* LayerParameter::_internal_mutable_batch_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000200u;
  if (_impl_.batch_norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::BatchNormParameter>(GetArena());
    _impl_.batch_norm_param_ = reinterpret_cast<::opencv_caffe::BatchNormParameter*>(p);
  }
  return _impl_.batch_norm_param_;
}
inline ::opencv_caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::BatchNormParameter* _msg = _internal_mutable_batch_norm_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.batch_norm_param)
  return _msg;
}
inline void LayerParameter::set_allocated_batch_norm_param(::opencv_caffe::BatchNormParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::BatchNormParameter*>(_impl_.batch_norm_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::BatchNormParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }

  _impl_.batch_norm_param_ = reinterpret_cast<::opencv_caffe::BatchNormParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.batch_norm_param)
}

// optional .opencv_caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_bias_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_param_ != nullptr) _impl_.bias_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline const ::opencv_caffe::BiasParameter& LayerParameter::_internal_bias_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::BiasParameter* p = _impl_.bias_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::BiasParameter&>(::opencv_caffe::_BiasParameter_default_instance_);
}
inline const ::opencv_caffe::BiasParameter& LayerParameter::bias_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.bias_param)
  return _internal_bias_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_bias_param(::opencv_caffe::BiasParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_param_);
  }
  _impl_.bias_param_ = reinterpret_cast<::opencv_caffe::BiasParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.bias_param)
}
inline ::opencv_caffe::BiasParameter* LayerParameter::release_bias_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000800u;
  ::opencv_caffe::BiasParameter* released = _impl_.bias_param_;
  _impl_.bias_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::BiasParameter* LayerParameter::unsafe_arena_release_bias_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.bias_param)

  _impl_._has_bits_[1] &= ~0x00000800u;
  ::opencv_caffe::BiasParameter* temp = _impl_.bias_param_;
  _impl_.bias_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::BiasParameter* LayerParameter::_internal_mutable_bias_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000800u;
  if (_impl_.bias_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::BiasParameter>(GetArena());
    _impl_.bias_param_ = reinterpret_cast<::opencv_caffe::BiasParameter*>(p);
  }
  return _impl_.bias_param_;
}
inline ::opencv_caffe::BiasParameter* LayerParameter::mutable_bias_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::BiasParameter* _msg = _internal_mutable_bias_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.bias_param)
  return _msg;
}
inline void LayerParameter::set_allocated_bias_param(::opencv_caffe::BiasParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::BiasParameter*>(_impl_.bias_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::BiasParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }

  _impl_.bias_param_ = reinterpret_cast<::opencv_caffe::BiasParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.bias_param)
}

// optional .opencv_caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concat_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.concat_param_ != nullptr) _impl_.concat_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::opencv_caffe::ConcatParameter& LayerParameter::_internal_concat_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ConcatParameter* p = _impl_.concat_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ConcatParameter&>(::opencv_caffe::_ConcatParameter_default_instance_);
}
inline const ::opencv_caffe::ConcatParameter& LayerParameter::concat_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_concat_param(::opencv_caffe::ConcatParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.concat_param_);
  }
  _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.concat_param)
}
inline ::opencv_caffe::ConcatParameter* LayerParameter::release_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::ConcatParameter* released = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ConcatParameter* LayerParameter::unsafe_arena_release_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.concat_param)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ConcatParameter* LayerParameter::_internal_mutable_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ConcatParameter>(GetArena());
    _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(p);
  }
  return _impl_.concat_param_;
}
inline ::opencv_caffe::ConcatParameter* LayerParameter::mutable_concat_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ConcatParameter* _msg = _internal_mutable_concat_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.concat_param)
  return _msg;
}
inline void LayerParameter::set_allocated_concat_param(::opencv_caffe::ConcatParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ConcatParameter*>(_impl_.concat_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.concat_param)
}

// optional .opencv_caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contrastive_loss_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.contrastive_loss_param_ != nullptr) _impl_.contrastive_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::opencv_caffe::ContrastiveLossParameter& LayerParameter::_internal_contrastive_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ContrastiveLossParameter* p = _impl_.contrastive_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ContrastiveLossParameter&>(::opencv_caffe::_ContrastiveLossParameter_default_instance_);
}
inline const ::opencv_caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contrastive_loss_param_);
  }
  _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.contrastive_loss_param)
}
inline ::opencv_caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::ContrastiveLossParameter* released = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ContrastiveLossParameter* LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.contrastive_loss_param)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ContrastiveLossParameter* LayerParameter::_internal_mutable_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ContrastiveLossParameter>(GetArena());
    _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(p);
  }
  return _impl_.contrastive_loss_param_;
}
inline ::opencv_caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ContrastiveLossParameter* _msg = _internal_mutable_contrastive_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.contrastive_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(_impl_.contrastive_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.contrastive_loss_param)
}

// optional .opencv_caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convolution_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.convolution_param_ != nullptr) _impl_.convolution_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::opencv_caffe::ConvolutionParameter& LayerParameter::_internal_convolution_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ConvolutionParameter* p = _impl_.convolution_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ConvolutionParameter&>(::opencv_caffe::_ConvolutionParameter_default_instance_);
}
inline const ::opencv_caffe::ConvolutionParameter& LayerParameter::convolution_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convolution_param_);
  }
  _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.convolution_param)
}
inline ::opencv_caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::ConvolutionParameter* released = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ConvolutionParameter* LayerParameter::unsafe_arena_release_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.convolution_param)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ConvolutionParameter* LayerParameter::_internal_mutable_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ConvolutionParameter>(GetArena());
    _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(p);
  }
  return _impl_.convolution_param_;
}
inline ::opencv_caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ConvolutionParameter* _msg = _internal_mutable_convolution_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.convolution_param)
  return _msg;
}
inline void LayerParameter::set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(_impl_.convolution_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.convolution_param)
}

// optional .opencv_caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crop_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_crop_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.crop_param_ != nullptr) _impl_.crop_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline const ::opencv_caffe::CropParameter& LayerParameter::_internal_crop_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::CropParameter* p = _impl_.crop_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::CropParameter&>(::opencv_caffe::_CropParameter_default_instance_);
}
inline const ::opencv_caffe::CropParameter& LayerParameter::crop_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.crop_param)
  return _internal_crop_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_crop_param(::opencv_caffe::CropParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.crop_param_);
  }
  _impl_.crop_param_ = reinterpret_cast<::opencv_caffe::CropParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.crop_param)
}
inline ::opencv_caffe::CropParameter* LayerParameter::release_crop_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00004000u;
  ::opencv_caffe::CropParameter* released = _impl_.crop_param_;
  _impl_.crop_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::CropParameter* LayerParameter::unsafe_arena_release_crop_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.crop_param)

  _impl_._has_bits_[1] &= ~0x00004000u;
  ::opencv_caffe::CropParameter* temp = _impl_.crop_param_;
  _impl_.crop_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::CropParameter* LayerParameter::_internal_mutable_crop_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00004000u;
  if (_impl_.crop_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::CropParameter>(GetArena());
    _impl_.crop_param_ = reinterpret_cast<::opencv_caffe::CropParameter*>(p);
  }
  return _impl_.crop_param_;
}
inline ::opencv_caffe::CropParameter* LayerParameter::mutable_crop_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::CropParameter* _msg = _internal_mutable_crop_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.crop_param)
  return _msg;
}
inline void LayerParameter::set_allocated_crop_param(::opencv_caffe::CropParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::CropParameter*>(_impl_.crop_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::CropParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00004000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00004000u;
  }

  _impl_.crop_param_ = reinterpret_cast<::opencv_caffe::CropParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.crop_param)
}

// optional .opencv_caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.data_param_ != nullptr) _impl_.data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::opencv_caffe::DataParameter& LayerParameter::_internal_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DataParameter* p = _impl_.data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DataParameter&>(::opencv_caffe::_DataParameter_default_instance_);
}
inline const ::opencv_caffe::DataParameter& LayerParameter::data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.data_param)
  return _internal_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_data_param(::opencv_caffe::DataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_param_);
  }
  _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.data_param)
}
inline ::opencv_caffe::DataParameter* LayerParameter::release_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::opencv_caffe::DataParameter* released = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DataParameter* LayerParameter::unsafe_arena_release_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.data_param)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::opencv_caffe::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DataParameter* LayerParameter::_internal_mutable_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DataParameter>(GetArena());
    _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(p);
  }
  return _impl_.data_param_;
}
inline ::opencv_caffe::DataParameter* LayerParameter::mutable_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DataParameter* _msg = _internal_mutable_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_data_param(::opencv_caffe::DataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DataParameter*>(_impl_.data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.data_param)
}

// optional .opencv_caffe.DetectionOutputParameter detection_output_param = 147;
inline bool LayerParameter::has_detection_output_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detection_output_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_detection_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.detection_output_param_ != nullptr) _impl_.detection_output_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline const ::opencv_caffe::DetectionOutputParameter& LayerParameter::_internal_detection_output_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DetectionOutputParameter* p = _impl_.detection_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DetectionOutputParameter&>(::opencv_caffe::_DetectionOutputParameter_default_instance_);
}
inline const ::opencv_caffe::DetectionOutputParameter& LayerParameter::detection_output_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.detection_output_param)
  return _internal_detection_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_detection_output_param(::opencv_caffe::DetectionOutputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.detection_output_param_);
  }
  _impl_.detection_output_param_ = reinterpret_cast<::opencv_caffe::DetectionOutputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.detection_output_param)
}
inline ::opencv_caffe::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00020000u;
  ::opencv_caffe::DetectionOutputParameter* released = _impl_.detection_output_param_;
  _impl_.detection_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DetectionOutputParameter* LayerParameter::unsafe_arena_release_detection_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.detection_output_param)

  _impl_._has_bits_[1] &= ~0x00020000u;
  ::opencv_caffe::DetectionOutputParameter* temp = _impl_.detection_output_param_;
  _impl_.detection_output_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DetectionOutputParameter* LayerParameter::_internal_mutable_detection_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00020000u;
  if (_impl_.detection_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DetectionOutputParameter>(GetArena());
    _impl_.detection_output_param_ = reinterpret_cast<::opencv_caffe::DetectionOutputParameter*>(p);
  }
  return _impl_.detection_output_param_;
}
inline ::opencv_caffe::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DetectionOutputParameter* _msg = _internal_mutable_detection_output_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.detection_output_param)
  return _msg;
}
inline void LayerParameter::set_allocated_detection_output_param(::opencv_caffe::DetectionOutputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DetectionOutputParameter*>(_impl_.detection_output_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DetectionOutputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00020000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00020000u;
  }

  _impl_.detection_output_param_ = reinterpret_cast<::opencv_caffe::DetectionOutputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.detection_output_param)
}

// optional .opencv_caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dropout_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dropout_param_ != nullptr) _impl_.dropout_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::opencv_caffe::DropoutParameter& LayerParameter::_internal_dropout_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DropoutParameter* p = _impl_.dropout_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DropoutParameter&>(::opencv_caffe::_DropoutParameter_default_instance_);
}
inline const ::opencv_caffe::DropoutParameter& LayerParameter::dropout_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dropout_param_);
  }
  _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.dropout_param)
}
inline ::opencv_caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::opencv_caffe::DropoutParameter* released = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DropoutParameter* LayerParameter::unsafe_arena_release_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.dropout_param)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::opencv_caffe::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DropoutParameter* LayerParameter::_internal_mutable_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DropoutParameter>(GetArena());
    _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(p);
  }
  return _impl_.dropout_param_;
}
inline ::opencv_caffe::DropoutParameter* LayerParameter::mutable_dropout_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DropoutParameter* _msg = _internal_mutable_dropout_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.dropout_param)
  return _msg;
}
inline void LayerParameter::set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DropoutParameter*>(_impl_.dropout_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.dropout_param)
}

// optional .opencv_caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dummy_data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dummy_data_param_ != nullptr) _impl_.dummy_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::opencv_caffe::DummyDataParameter& LayerParameter::_internal_dummy_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DummyDataParameter* p = _impl_.dummy_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DummyDataParameter&>(::opencv_caffe::_DummyDataParameter_default_instance_);
}
inline const ::opencv_caffe::DummyDataParameter& LayerParameter::dummy_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dummy_data_param_);
  }
  _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.dummy_data_param)
}
inline ::opencv_caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::opencv_caffe::DummyDataParameter* released = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DummyDataParameter* LayerParameter::unsafe_arena_release_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.dummy_data_param)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::opencv_caffe::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DummyDataParameter* LayerParameter::_internal_mutable_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DummyDataParameter>(GetArena());
    _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(p);
  }
  return _impl_.dummy_data_param_;
}
inline ::opencv_caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DummyDataParameter* _msg = _internal_mutable_dummy_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.dummy_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DummyDataParameter*>(_impl_.dummy_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.dummy_data_param)
}

// optional .opencv_caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eltwise_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.eltwise_param_ != nullptr) _impl_.eltwise_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::opencv_caffe::EltwiseParameter& LayerParameter::_internal_eltwise_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::EltwiseParameter* p = _impl_.eltwise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::EltwiseParameter&>(::opencv_caffe::_EltwiseParameter_default_instance_);
}
inline const ::opencv_caffe::EltwiseParameter& LayerParameter::eltwise_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eltwise_param_);
  }
  _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.eltwise_param)
}
inline ::opencv_caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::opencv_caffe::EltwiseParameter* released = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::EltwiseParameter* LayerParameter::unsafe_arena_release_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.eltwise_param)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::opencv_caffe::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::EltwiseParameter* LayerParameter::_internal_mutable_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::EltwiseParameter>(GetArena());
    _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(p);
  }
  return _impl_.eltwise_param_;
}
inline ::opencv_caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::EltwiseParameter* _msg = _internal_mutable_eltwise_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.eltwise_param)
  return _msg;
}
inline void LayerParameter::set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::EltwiseParameter*>(_impl_.eltwise_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.eltwise_param)
}

// optional .opencv_caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.elu_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_elu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.elu_param_ != nullptr) _impl_.elu_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline const ::opencv_caffe::ELUParameter& LayerParameter::_internal_elu_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ELUParameter* p = _impl_.elu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ELUParameter&>(::opencv_caffe::_ELUParameter_default_instance_);
}
inline const ::opencv_caffe::ELUParameter& LayerParameter::elu_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.elu_param)
  return _internal_elu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_elu_param(::opencv_caffe::ELUParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.elu_param_);
  }
  _impl_.elu_param_ = reinterpret_cast<::opencv_caffe::ELUParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.elu_param)
}
inline ::opencv_caffe::ELUParameter* LayerParameter::release_elu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000400u;
  ::opencv_caffe::ELUParameter* released = _impl_.elu_param_;
  _impl_.elu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ELUParameter* LayerParameter::unsafe_arena_release_elu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.elu_param)

  _impl_._has_bits_[1] &= ~0x00000400u;
  ::opencv_caffe::ELUParameter* temp = _impl_.elu_param_;
  _impl_.elu_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ELUParameter* LayerParameter::_internal_mutable_elu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000400u;
  if (_impl_.elu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ELUParameter>(GetArena());
    _impl_.elu_param_ = reinterpret_cast<::opencv_caffe::ELUParameter*>(p);
  }
  return _impl_.elu_param_;
}
inline ::opencv_caffe::ELUParameter* LayerParameter::mutable_elu_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ELUParameter* _msg = _internal_mutable_elu_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.elu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_elu_param(::opencv_caffe::ELUParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ELUParameter*>(_impl_.elu_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ELUParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }

  _impl_.elu_param_ = reinterpret_cast<::opencv_caffe::ELUParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.elu_param)
}

// optional .opencv_caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.embed_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_embed_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.embed_param_ != nullptr) _impl_.embed_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline const ::opencv_caffe::EmbedParameter& LayerParameter::_internal_embed_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::EmbedParameter* p = _impl_.embed_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::EmbedParameter&>(::opencv_caffe::_EmbedParameter_default_instance_);
}
inline const ::opencv_caffe::EmbedParameter& LayerParameter::embed_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.embed_param)
  return _internal_embed_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_embed_param(::opencv_caffe::EmbedParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.embed_param_);
  }
  _impl_.embed_param_ = reinterpret_cast<::opencv_caffe::EmbedParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.embed_param)
}
inline ::opencv_caffe::EmbedParameter* LayerParameter::release_embed_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000080u;
  ::opencv_caffe::EmbedParameter* released = _impl_.embed_param_;
  _impl_.embed_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::EmbedParameter* LayerParameter::unsafe_arena_release_embed_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.embed_param)

  _impl_._has_bits_[1] &= ~0x00000080u;
  ::opencv_caffe::EmbedParameter* temp = _impl_.embed_param_;
  _impl_.embed_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::EmbedParameter* LayerParameter::_internal_mutable_embed_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000080u;
  if (_impl_.embed_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::EmbedParameter>(GetArena());
    _impl_.embed_param_ = reinterpret_cast<::opencv_caffe::EmbedParameter*>(p);
  }
  return _impl_.embed_param_;
}
inline ::opencv_caffe::EmbedParameter* LayerParameter::mutable_embed_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::EmbedParameter* _msg = _internal_mutable_embed_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.embed_param)
  return _msg;
}
inline void LayerParameter::set_allocated_embed_param(::opencv_caffe::EmbedParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::EmbedParameter*>(_impl_.embed_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::EmbedParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }

  _impl_.embed_param_ = reinterpret_cast<::opencv_caffe::EmbedParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.embed_param)
}

// optional .opencv_caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exp_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.exp_param_ != nullptr) _impl_.exp_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::opencv_caffe::ExpParameter& LayerParameter::_internal_exp_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ExpParameter* p = _impl_.exp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ExpParameter&>(::opencv_caffe::_ExpParameter_default_instance_);
}
inline const ::opencv_caffe::ExpParameter& LayerParameter::exp_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_exp_param(::opencv_caffe::ExpParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exp_param_);
  }
  _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.exp_param)
}
inline ::opencv_caffe::ExpParameter* LayerParameter::release_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::opencv_caffe::ExpParameter* released = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ExpParameter* LayerParameter::unsafe_arena_release_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.exp_param)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::opencv_caffe::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ExpParameter* LayerParameter::_internal_mutable_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ExpParameter>(GetArena());
    _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(p);
  }
  return _impl_.exp_param_;
}
inline ::opencv_caffe::ExpParameter* LayerParameter::mutable_exp_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ExpParameter* _msg = _internal_mutable_exp_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.exp_param)
  return _msg;
}
inline void LayerParameter::set_allocated_exp_param(::opencv_caffe::ExpParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ExpParameter*>(_impl_.exp_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ExpParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.exp_param)
}

// optional .opencv_caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.flatten_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_flatten_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.flatten_param_ != nullptr) _impl_.flatten_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline const ::opencv_caffe::FlattenParameter& LayerParameter::_internal_flatten_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FlattenParameter* p = _impl_.flatten_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FlattenParameter&>(::opencv_caffe::_FlattenParameter_default_instance_);
}
inline const ::opencv_caffe::FlattenParameter& LayerParameter::flatten_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.flatten_param)
  return _internal_flatten_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_flatten_param(::opencv_caffe::FlattenParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.flatten_param_);
  }
  _impl_.flatten_param_ = reinterpret_cast<::opencv_caffe::FlattenParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.flatten_param)
}
inline ::opencv_caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000020u;
  ::opencv_caffe::FlattenParameter* released = _impl_.flatten_param_;
  _impl_.flatten_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FlattenParameter* LayerParameter::unsafe_arena_release_flatten_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.flatten_param)

  _impl_._has_bits_[1] &= ~0x00000020u;
  ::opencv_caffe::FlattenParameter* temp = _impl_.flatten_param_;
  _impl_.flatten_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FlattenParameter* LayerParameter::_internal_mutable_flatten_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000020u;
  if (_impl_.flatten_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FlattenParameter>(GetArena());
    _impl_.flatten_param_ = reinterpret_cast<::opencv_caffe::FlattenParameter*>(p);
  }
  return _impl_.flatten_param_;
}
inline ::opencv_caffe::FlattenParameter* LayerParameter::mutable_flatten_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FlattenParameter* _msg = _internal_mutable_flatten_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.flatten_param)
  return _msg;
}
inline void LayerParameter::set_allocated_flatten_param(::opencv_caffe::FlattenParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FlattenParameter*>(_impl_.flatten_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FlattenParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }

  _impl_.flatten_param_ = reinterpret_cast<::opencv_caffe::FlattenParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.flatten_param)
}

// optional .opencv_caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hdf5_data_param_ != nullptr) _impl_.hdf5_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::opencv_caffe::HDF5DataParameter& LayerParameter::_internal_hdf5_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HDF5DataParameter* p = _impl_.hdf5_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HDF5DataParameter&>(::opencv_caffe::_HDF5DataParameter_default_instance_);
}
inline const ::opencv_caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hdf5_data_param_);
  }
  _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.hdf5_data_param)
}
inline ::opencv_caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::opencv_caffe::HDF5DataParameter* released = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HDF5DataParameter* LayerParameter::unsafe_arena_release_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.hdf5_data_param)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::opencv_caffe::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HDF5DataParameter* LayerParameter::_internal_mutable_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HDF5DataParameter>(GetArena());
    _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(p);
  }
  return _impl_.hdf5_data_param_;
}
inline ::opencv_caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HDF5DataParameter* _msg = _internal_mutable_hdf5_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.hdf5_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(_impl_.hdf5_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.hdf5_data_param)
}

// optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::opencv_caffe::HDF5OutputParameter& LayerParameter::_internal_hdf5_output_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HDF5OutputParameter&>(::opencv_caffe::_HDF5OutputParameter_default_instance_);
}
inline const ::opencv_caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.hdf5_output_param)
}
inline ::opencv_caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::opencv_caffe::HDF5OutputParameter* released = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HDF5OutputParameter* LayerParameter::unsafe_arena_release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.hdf5_output_param)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::opencv_caffe::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HDF5OutputParameter* LayerParameter::_internal_mutable_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HDF5OutputParameter>(GetArena());
    _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(p);
  }
  return _impl_.hdf5_output_param_;
}
inline ::opencv_caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.hdf5_output_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(_impl_.hdf5_output_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.hdf5_output_param)
}

// optional .opencv_caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hinge_loss_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hinge_loss_param_ != nullptr) _impl_.hinge_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::opencv_caffe::HingeLossParameter& LayerParameter::_internal_hinge_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HingeLossParameter* p = _impl_.hinge_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HingeLossParameter&>(::opencv_caffe::_HingeLossParameter_default_instance_);
}
inline const ::opencv_caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hinge_loss_param_);
  }
  _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.hinge_loss_param)
}
inline ::opencv_caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::opencv_caffe::HingeLossParameter* released = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HingeLossParameter* LayerParameter::unsafe_arena_release_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.hinge_loss_param)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::opencv_caffe::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HingeLossParameter* LayerParameter::_internal_mutable_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HingeLossParameter>(GetArena());
    _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(p);
  }
  return _impl_.hinge_loss_param_;
}
inline ::opencv_caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HingeLossParameter* _msg = _internal_mutable_hinge_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.hinge_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HingeLossParameter*>(_impl_.hinge_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.hinge_loss_param)
}

// optional .opencv_caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.image_data_param_ != nullptr) _impl_.image_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::opencv_caffe::ImageDataParameter& LayerParameter::_internal_image_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ImageDataParameter* p = _impl_.image_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ImageDataParameter&>(::opencv_caffe::_ImageDataParameter_default_instance_);
}
inline const ::opencv_caffe::ImageDataParameter& LayerParameter::image_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_data_param_);
  }
  _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.image_data_param)
}
inline ::opencv_caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::opencv_caffe::ImageDataParameter* released = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ImageDataParameter* LayerParameter::unsafe_arena_release_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.image_data_param)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::opencv_caffe::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ImageDataParameter* LayerParameter::_internal_mutable_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ImageDataParameter>(GetArena());
    _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(p);
  }
  return _impl_.image_data_param_;
}
inline ::opencv_caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ImageDataParameter* _msg = _internal_mutable_image_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.image_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ImageDataParameter*>(_impl_.image_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.image_data_param)
}

// optional .opencv_caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.infogain_loss_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.infogain_loss_param_ != nullptr) _impl_.infogain_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::opencv_caffe::InfogainLossParameter& LayerParameter::_internal_infogain_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::InfogainLossParameter* p = _impl_.infogain_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::InfogainLossParameter&>(::opencv_caffe::_InfogainLossParameter_default_instance_);
}
inline const ::opencv_caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.infogain_loss_param_);
  }
  _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.infogain_loss_param)
}
inline ::opencv_caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::opencv_caffe::InfogainLossParameter* released = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::InfogainLossParameter* LayerParameter::unsafe_arena_release_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.infogain_loss_param)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::opencv_caffe::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::InfogainLossParameter* LayerParameter::_internal_mutable_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::InfogainLossParameter>(GetArena());
    _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(p);
  }
  return _impl_.infogain_loss_param_;
}
inline ::opencv_caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::InfogainLossParameter* _msg = _internal_mutable_infogain_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.infogain_loss_param)
  return _msg;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(_impl_.infogain_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.infogain_loss_param)
}

// optional .opencv_caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inner_product_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.inner_product_param_ != nullptr) _impl_.inner_product_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::opencv_caffe::InnerProductParameter& LayerParameter::_internal_inner_product_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::InnerProductParameter* p = _impl_.inner_product_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::InnerProductParameter&>(::opencv_caffe::_InnerProductParameter_default_instance_);
}
inline const ::opencv_caffe::InnerProductParameter& LayerParameter::inner_product_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.inner_product_param_);
  }
  _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.inner_product_param)
}
inline ::opencv_caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::opencv_caffe::InnerProductParameter* released = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::InnerProductParameter* LayerParameter::unsafe_arena_release_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.inner_product_param)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::opencv_caffe::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::InnerProductParameter* LayerParameter::_internal_mutable_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::InnerProductParameter>(GetArena());
    _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(p);
  }
  return _impl_.inner_product_param_;
}
inline ::opencv_caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::InnerProductParameter* _msg = _internal_mutable_inner_product_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.inner_product_param)
  return _msg;
}
inline void LayerParameter::set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::InnerProductParameter*>(_impl_.inner_product_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.inner_product_param)
}

// optional .opencv_caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_input_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.input_param_ != nullptr) _impl_.input_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline const ::opencv_caffe::InputParameter& LayerParameter::_internal_input_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::InputParameter* p = _impl_.input_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::InputParameter&>(::opencv_caffe::_InputParameter_default_instance_);
}
inline const ::opencv_caffe::InputParameter& LayerParameter::input_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.input_param)
  return _internal_input_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_input_param(::opencv_caffe::InputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.input_param_);
  }
  _impl_.input_param_ = reinterpret_cast<::opencv_caffe::InputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.input_param)
}
inline ::opencv_caffe::InputParameter* LayerParameter::release_input_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00002000u;
  ::opencv_caffe::InputParameter* released = _impl_.input_param_;
  _impl_.input_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::InputParameter* LayerParameter::unsafe_arena_release_input_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.input_param)

  _impl_._has_bits_[1] &= ~0x00002000u;
  ::opencv_caffe::InputParameter* temp = _impl_.input_param_;
  _impl_.input_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::InputParameter* LayerParameter::_internal_mutable_input_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00002000u;
  if (_impl_.input_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::InputParameter>(GetArena());
    _impl_.input_param_ = reinterpret_cast<::opencv_caffe::InputParameter*>(p);
  }
  return _impl_.input_param_;
}
inline ::opencv_caffe::InputParameter* LayerParameter::mutable_input_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::InputParameter* _msg = _internal_mutable_input_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.input_param)
  return _msg;
}
inline void LayerParameter::set_allocated_input_param(::opencv_caffe::InputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::InputParameter*>(_impl_.input_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::InputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00002000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00002000u;
  }

  _impl_.input_param_ = reinterpret_cast<::opencv_caffe::InputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.input_param)
}

// optional .opencv_caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.log_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_log_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.log_param_ != nullptr) _impl_.log_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline const ::opencv_caffe::LogParameter& LayerParameter::_internal_log_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::LogParameter* p = _impl_.log_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::LogParameter&>(::opencv_caffe::_LogParameter_default_instance_);
}
inline const ::opencv_caffe::LogParameter& LayerParameter::log_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.log_param)
  return _internal_log_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_log_param(::opencv_caffe::LogParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.log_param_);
  }
  _impl_.log_param_ = reinterpret_cast<::opencv_caffe::LogParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.log_param)
}
inline ::opencv_caffe::LogParameter* LayerParameter::release_log_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000010u;
  ::opencv_caffe::LogParameter* released = _impl_.log_param_;
  _impl_.log_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::LogParameter* LayerParameter::unsafe_arena_release_log_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.log_param)

  _impl_._has_bits_[1] &= ~0x00000010u;
  ::opencv_caffe::LogParameter* temp = _impl_.log_param_;
  _impl_.log_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::LogParameter* LayerParameter::_internal_mutable_log_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000010u;
  if (_impl_.log_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::LogParameter>(GetArena());
    _impl_.log_param_ = reinterpret_cast<::opencv_caffe::LogParameter*>(p);
  }
  return _impl_.log_param_;
}
inline ::opencv_caffe::LogParameter* LayerParameter::mutable_log_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::LogParameter* _msg = _internal_mutable_log_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.log_param)
  return _msg;
}
inline void LayerParameter::set_allocated_log_param(::opencv_caffe::LogParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::LogParameter*>(_impl_.log_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::LogParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }

  _impl_.log_param_ = reinterpret_cast<::opencv_caffe::LogParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.log_param)
}

// optional .opencv_caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lrn_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lrn_param_ != nullptr) _impl_.lrn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::opencv_caffe::LRNParameter& LayerParameter::_internal_lrn_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::LRNParameter* p = _impl_.lrn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::LRNParameter&>(::opencv_caffe::_LRNParameter_default_instance_);
}
inline const ::opencv_caffe::LRNParameter& LayerParameter::lrn_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_lrn_param(::opencv_caffe::LRNParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lrn_param_);
  }
  _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.lrn_param)
}
inline ::opencv_caffe::LRNParameter* LayerParameter::release_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::opencv_caffe::LRNParameter* released = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::LRNParameter* LayerParameter::unsafe_arena_release_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.lrn_param)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::opencv_caffe::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::LRNParameter* LayerParameter::_internal_mutable_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::LRNParameter>(GetArena());
    _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(p);
  }
  return _impl_.lrn_param_;
}
inline ::opencv_caffe::LRNParameter* LayerParameter::mutable_lrn_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::LRNParameter* _msg = _internal_mutable_lrn_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.lrn_param)
  return _msg;
}
inline void LayerParameter::set_allocated_lrn_param(::opencv_caffe::LRNParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::LRNParameter*>(_impl_.lrn_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::LRNParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.lrn_param)
}

// optional .opencv_caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.memory_data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.memory_data_param_ != nullptr) _impl_.memory_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::opencv_caffe::MemoryDataParameter& LayerParameter::_internal_memory_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::MemoryDataParameter* p = _impl_.memory_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::MemoryDataParameter&>(::opencv_caffe::_MemoryDataParameter_default_instance_);
}
inline const ::opencv_caffe::MemoryDataParameter& LayerParameter::memory_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.memory_data_param_);
  }
  _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.memory_data_param)
}
inline ::opencv_caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::opencv_caffe::MemoryDataParameter* released = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::MemoryDataParameter* LayerParameter::unsafe_arena_release_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.memory_data_param)

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::opencv_caffe::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::MemoryDataParameter* LayerParameter::_internal_mutable_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::MemoryDataParameter>(GetArena());
    _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(p);
  }
  return _impl_.memory_data_param_;
}
inline ::opencv_caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::MemoryDataParameter* _msg = _internal_mutable_memory_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.memory_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(_impl_.memory_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }

  _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.memory_data_param)
}

// optional .opencv_caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mvn_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mvn_param_ != nullptr) _impl_.mvn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::opencv_caffe::MVNParameter& LayerParameter::_internal_mvn_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::MVNParameter* p = _impl_.mvn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::MVNParameter&>(::opencv_caffe::_MVNParameter_default_instance_);
}
inline const ::opencv_caffe::MVNParameter& LayerParameter::mvn_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_mvn_param(::opencv_caffe::MVNParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mvn_param_);
  }
  _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.mvn_param)
}
inline ::opencv_caffe::MVNParameter* LayerParameter::release_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::opencv_caffe::MVNParameter* released = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::MVNParameter* LayerParameter::unsafe_arena_release_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.mvn_param)

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::opencv_caffe::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::MVNParameter* LayerParameter::_internal_mutable_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::MVNParameter>(GetArena());
    _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(p);
  }
  return _impl_.mvn_param_;
}
inline ::opencv_caffe::MVNParameter* LayerParameter::mutable_mvn_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::MVNParameter* _msg = _internal_mutable_mvn_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.mvn_param)
  return _msg;
}
inline void LayerParameter::set_allocated_mvn_param(::opencv_caffe::MVNParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::MVNParameter*>(_impl_.mvn_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::MVNParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }

  _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.mvn_param)
}

// optional .opencv_caffe.NormalizeBBoxParameter norm_param = 149;
inline bool LayerParameter::has_norm_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.norm_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.norm_param_ != nullptr) _impl_.norm_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline const ::opencv_caffe::NormalizeBBoxParameter& LayerParameter::_internal_norm_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::NormalizeBBoxParameter* p = _impl_.norm_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::NormalizeBBoxParameter&>(::opencv_caffe::_NormalizeBBoxParameter_default_instance_);
}
inline const ::opencv_caffe::NormalizeBBoxParameter& LayerParameter::norm_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.norm_param)
  return _internal_norm_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_norm_param(::opencv_caffe::NormalizeBBoxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.norm_param_);
  }
  _impl_.norm_param_ = reinterpret_cast<::opencv_caffe::NormalizeBBoxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.norm_param)
}
inline ::opencv_caffe::NormalizeBBoxParameter* LayerParameter::release_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00080000u;
  ::opencv_caffe::NormalizeBBoxParameter* released = _impl_.norm_param_;
  _impl_.norm_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::NormalizeBBoxParameter* LayerParameter::unsafe_arena_release_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.norm_param)

  _impl_._has_bits_[1] &= ~0x00080000u;
  ::opencv_caffe::NormalizeBBoxParameter* temp = _impl_.norm_param_;
  _impl_.norm_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::NormalizeBBoxParameter* LayerParameter::_internal_mutable_norm_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00080000u;
  if (_impl_.norm_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::NormalizeBBoxParameter>(GetArena());
    _impl_.norm_param_ = reinterpret_cast<::opencv_caffe::NormalizeBBoxParameter*>(p);
  }
  return _impl_.norm_param_;
}
inline ::opencv_caffe::NormalizeBBoxParameter* LayerParameter::mutable_norm_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::NormalizeBBoxParameter* _msg = _internal_mutable_norm_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.norm_param)
  return _msg;
}
inline void LayerParameter::set_allocated_norm_param(::opencv_caffe::NormalizeBBoxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::NormalizeBBoxParameter*>(_impl_.norm_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::NormalizeBBoxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00080000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00080000u;
  }

  _impl_.norm_param_ = reinterpret_cast<::opencv_caffe::NormalizeBBoxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.norm_param)
}

// optional .opencv_caffe.PermuteParameter permute_param = 148;
inline bool LayerParameter::has_permute_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permute_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_permute_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.permute_param_ != nullptr) _impl_.permute_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline const ::opencv_caffe::PermuteParameter& LayerParameter::_internal_permute_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PermuteParameter* p = _impl_.permute_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PermuteParameter&>(::opencv_caffe::_PermuteParameter_default_instance_);
}
inline const ::opencv_caffe::PermuteParameter& LayerParameter::permute_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.permute_param)
  return _internal_permute_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_permute_param(::opencv_caffe::PermuteParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permute_param_);
  }
  _impl_.permute_param_ = reinterpret_cast<::opencv_caffe::PermuteParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.permute_param)
}
inline ::opencv_caffe::PermuteParameter* LayerParameter::release_permute_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00040000u;
  ::opencv_caffe::PermuteParameter* released = _impl_.permute_param_;
  _impl_.permute_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PermuteParameter* LayerParameter::unsafe_arena_release_permute_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.permute_param)

  _impl_._has_bits_[1] &= ~0x00040000u;
  ::opencv_caffe::PermuteParameter* temp = _impl_.permute_param_;
  _impl_.permute_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PermuteParameter* LayerParameter::_internal_mutable_permute_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00040000u;
  if (_impl_.permute_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PermuteParameter>(GetArena());
    _impl_.permute_param_ = reinterpret_cast<::opencv_caffe::PermuteParameter*>(p);
  }
  return _impl_.permute_param_;
}
inline ::opencv_caffe::PermuteParameter* LayerParameter::mutable_permute_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PermuteParameter* _msg = _internal_mutable_permute_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.permute_param)
  return _msg;
}
inline void LayerParameter::set_allocated_permute_param(::opencv_caffe::PermuteParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PermuteParameter*>(_impl_.permute_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PermuteParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00040000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00040000u;
  }

  _impl_.permute_param_ = reinterpret_cast<::opencv_caffe::PermuteParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.permute_param)
}

// optional .opencv_caffe.ParameterParameter parameter_param = 145;
inline bool LayerParameter::has_parameter_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parameter_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_parameter_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.parameter_param_ != nullptr) _impl_.parameter_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline const ::opencv_caffe::ParameterParameter& LayerParameter::_internal_parameter_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ParameterParameter* p = _impl_.parameter_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ParameterParameter&>(::opencv_caffe::_ParameterParameter_default_instance_);
}
inline const ::opencv_caffe::ParameterParameter& LayerParameter::parameter_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.parameter_param)
  return _internal_parameter_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_parameter_param(::opencv_caffe::ParameterParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.parameter_param_);
  }
  _impl_.parameter_param_ = reinterpret_cast<::opencv_caffe::ParameterParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.parameter_param)
}
inline ::opencv_caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00008000u;
  ::opencv_caffe::ParameterParameter* released = _impl_.parameter_param_;
  _impl_.parameter_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ParameterParameter* LayerParameter::unsafe_arena_release_parameter_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.parameter_param)

  _impl_._has_bits_[1] &= ~0x00008000u;
  ::opencv_caffe::ParameterParameter* temp = _impl_.parameter_param_;
  _impl_.parameter_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ParameterParameter* LayerParameter::_internal_mutable_parameter_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00008000u;
  if (_impl_.parameter_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ParameterParameter>(GetArena());
    _impl_.parameter_param_ = reinterpret_cast<::opencv_caffe::ParameterParameter*>(p);
  }
  return _impl_.parameter_param_;
}
inline ::opencv_caffe::ParameterParameter* LayerParameter::mutable_parameter_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ParameterParameter* _msg = _internal_mutable_parameter_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.parameter_param)
  return _msg;
}
inline void LayerParameter::set_allocated_parameter_param(::opencv_caffe::ParameterParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ParameterParameter*>(_impl_.parameter_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ParameterParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00008000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00008000u;
  }

  _impl_.parameter_param_ = reinterpret_cast<::opencv_caffe::ParameterParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.parameter_param)
}

// optional .opencv_caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pooling_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pooling_param_ != nullptr) _impl_.pooling_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::opencv_caffe::PoolingParameter& LayerParameter::_internal_pooling_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PoolingParameter* p = _impl_.pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PoolingParameter&>(::opencv_caffe::_PoolingParameter_default_instance_);
}
inline const ::opencv_caffe::PoolingParameter& LayerParameter::pooling_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pooling_param_);
  }
  _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.pooling_param)
}
inline ::opencv_caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::opencv_caffe::PoolingParameter* released = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PoolingParameter* LayerParameter::unsafe_arena_release_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.pooling_param)

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::opencv_caffe::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PoolingParameter* LayerParameter::_internal_mutable_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PoolingParameter>(GetArena());
    _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(p);
  }
  return _impl_.pooling_param_;
}
inline ::opencv_caffe::PoolingParameter* LayerParameter::mutable_pooling_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PoolingParameter* _msg = _internal_mutable_pooling_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PoolingParameter*>(_impl_.pooling_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }

  _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.pooling_param)
}

// optional .opencv_caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.power_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.power_param_ != nullptr) _impl_.power_param_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::opencv_caffe::PowerParameter& LayerParameter::_internal_power_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PowerParameter* p = _impl_.power_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PowerParameter&>(::opencv_caffe::_PowerParameter_default_instance_);
}
inline const ::opencv_caffe::PowerParameter& LayerParameter::power_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.power_param)
  return _internal_power_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_power_param(::opencv_caffe::PowerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.power_param_);
  }
  _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.power_param)
}
inline ::opencv_caffe::PowerParameter* LayerParameter::release_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::opencv_caffe::PowerParameter* released = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PowerParameter* LayerParameter::unsafe_arena_release_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.power_param)

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::opencv_caffe::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PowerParameter* LayerParameter::_internal_mutable_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PowerParameter>(GetArena());
    _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(p);
  }
  return _impl_.power_param_;
}
inline ::opencv_caffe::PowerParameter* LayerParameter::mutable_power_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PowerParameter* _msg = _internal_mutable_power_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.power_param)
  return _msg;
}
inline void LayerParameter::set_allocated_power_param(::opencv_caffe::PowerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PowerParameter*>(_impl_.power_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PowerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }

  _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.power_param)
}

// optional .opencv_caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prelu_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_prelu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.prelu_param_ != nullptr) _impl_.prelu_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const ::opencv_caffe::PReLUParameter& LayerParameter::_internal_prelu_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PReLUParameter* p = _impl_.prelu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PReLUParameter&>(::opencv_caffe::_PReLUParameter_default_instance_);
}
inline const ::opencv_caffe::PReLUParameter& LayerParameter::prelu_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.prelu_param)
  return _internal_prelu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prelu_param(::opencv_caffe::PReLUParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prelu_param_);
  }
  _impl_.prelu_param_ = reinterpret_cast<::opencv_caffe::PReLUParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.prelu_param)
}
inline ::opencv_caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000002u;
  ::opencv_caffe::PReLUParameter* released = _impl_.prelu_param_;
  _impl_.prelu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PReLUParameter* LayerParameter::unsafe_arena_release_prelu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.prelu_param)

  _impl_._has_bits_[1] &= ~0x00000002u;
  ::opencv_caffe::PReLUParameter* temp = _impl_.prelu_param_;
  _impl_.prelu_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PReLUParameter* LayerParameter::_internal_mutable_prelu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000002u;
  if (_impl_.prelu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PReLUParameter>(GetArena());
    _impl_.prelu_param_ = reinterpret_cast<::opencv_caffe::PReLUParameter*>(p);
  }
  return _impl_.prelu_param_;
}
inline ::opencv_caffe::PReLUParameter* LayerParameter::mutable_prelu_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PReLUParameter* _msg = _internal_mutable_prelu_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.prelu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_prelu_param(::opencv_caffe::PReLUParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PReLUParameter*>(_impl_.prelu_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PReLUParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }

  _impl_.prelu_param_ = reinterpret_cast<::opencv_caffe::PReLUParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.prelu_param)
}

// optional .opencv_caffe.PriorBoxParameter prior_box_param = 150;
inline bool LayerParameter::has_prior_box_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prior_box_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_prior_box_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.prior_box_param_ != nullptr) _impl_.prior_box_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline const ::opencv_caffe::PriorBoxParameter& LayerParameter::_internal_prior_box_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PriorBoxParameter* p = _impl_.prior_box_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PriorBoxParameter&>(::opencv_caffe::_PriorBoxParameter_default_instance_);
}
inline const ::opencv_caffe::PriorBoxParameter& LayerParameter::prior_box_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.prior_box_param)
  return _internal_prior_box_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_prior_box_param(::opencv_caffe::PriorBoxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prior_box_param_);
  }
  _impl_.prior_box_param_ = reinterpret_cast<::opencv_caffe::PriorBoxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.prior_box_param)
}
inline ::opencv_caffe::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00100000u;
  ::opencv_caffe::PriorBoxParameter* released = _impl_.prior_box_param_;
  _impl_.prior_box_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PriorBoxParameter* LayerParameter::unsafe_arena_release_prior_box_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.prior_box_param)

  _impl_._has_bits_[1] &= ~0x00100000u;
  ::opencv_caffe::PriorBoxParameter* temp = _impl_.prior_box_param_;
  _impl_.prior_box_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PriorBoxParameter* LayerParameter::_internal_mutable_prior_box_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00100000u;
  if (_impl_.prior_box_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PriorBoxParameter>(GetArena());
    _impl_.prior_box_param_ = reinterpret_cast<::opencv_caffe::PriorBoxParameter*>(p);
  }
  return _impl_.prior_box_param_;
}
inline ::opencv_caffe::PriorBoxParameter* LayerParameter::mutable_prior_box_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PriorBoxParameter* _msg = _internal_mutable_prior_box_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.prior_box_param)
  return _msg;
}
inline void LayerParameter::set_allocated_prior_box_param(::opencv_caffe::PriorBoxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PriorBoxParameter*>(_impl_.prior_box_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PriorBoxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00100000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00100000u;
  }

  _impl_.prior_box_param_ = reinterpret_cast<::opencv_caffe::PriorBoxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.prior_box_param)
}

// optional .opencv_caffe.ProposalParameter proposal_param = 201;
inline bool LayerParameter::has_proposal_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposal_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_proposal_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.proposal_param_ != nullptr) _impl_.proposal_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline const ::opencv_caffe::ProposalParameter& LayerParameter::_internal_proposal_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ProposalParameter* p = _impl_.proposal_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ProposalParameter&>(::opencv_caffe::_ProposalParameter_default_instance_);
}
inline const ::opencv_caffe::ProposalParameter& LayerParameter::proposal_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.proposal_param)
  return _internal_proposal_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_proposal_param(::opencv_caffe::ProposalParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.proposal_param_);
  }
  _impl_.proposal_param_ = reinterpret_cast<::opencv_caffe::ProposalParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.proposal_param)
}
inline ::opencv_caffe::ProposalParameter* LayerParameter::release_proposal_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00200000u;
  ::opencv_caffe::ProposalParameter* released = _impl_.proposal_param_;
  _impl_.proposal_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ProposalParameter* LayerParameter::unsafe_arena_release_proposal_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.proposal_param)

  _impl_._has_bits_[1] &= ~0x00200000u;
  ::opencv_caffe::ProposalParameter* temp = _impl_.proposal_param_;
  _impl_.proposal_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ProposalParameter* LayerParameter::_internal_mutable_proposal_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00200000u;
  if (_impl_.proposal_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ProposalParameter>(GetArena());
    _impl_.proposal_param_ = reinterpret_cast<::opencv_caffe::ProposalParameter*>(p);
  }
  return _impl_.proposal_param_;
}
inline ::opencv_caffe::ProposalParameter* LayerParameter::mutable_proposal_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ProposalParameter* _msg = _internal_mutable_proposal_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.proposal_param)
  return _msg;
}
inline void LayerParameter::set_allocated_proposal_param(::opencv_caffe::ProposalParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ProposalParameter*>(_impl_.proposal_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ProposalParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00200000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00200000u;
  }

  _impl_.proposal_param_ = reinterpret_cast<::opencv_caffe::ProposalParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.proposal_param)
}

// optional .opencv_caffe.PSROIPoolingParameter psroi_pooling_param = 10002;
inline bool LayerParameter::has_psroi_pooling_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.psroi_pooling_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_psroi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.psroi_pooling_param_ != nullptr) _impl_.psroi_pooling_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline const ::opencv_caffe::PSROIPoolingParameter& LayerParameter::_internal_psroi_pooling_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PSROIPoolingParameter* p = _impl_.psroi_pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PSROIPoolingParameter&>(::opencv_caffe::_PSROIPoolingParameter_default_instance_);
}
inline const ::opencv_caffe::PSROIPoolingParameter& LayerParameter::psroi_pooling_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.psroi_pooling_param)
  return _internal_psroi_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_psroi_pooling_param(::opencv_caffe::PSROIPoolingParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.psroi_pooling_param_);
  }
  _impl_.psroi_pooling_param_ = reinterpret_cast<::opencv_caffe::PSROIPoolingParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.psroi_pooling_param)
}
inline ::opencv_caffe::PSROIPoolingParameter* LayerParameter::release_psroi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00400000u;
  ::opencv_caffe::PSROIPoolingParameter* released = _impl_.psroi_pooling_param_;
  _impl_.psroi_pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PSROIPoolingParameter* LayerParameter::unsafe_arena_release_psroi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.psroi_pooling_param)

  _impl_._has_bits_[1] &= ~0x00400000u;
  ::opencv_caffe::PSROIPoolingParameter* temp = _impl_.psroi_pooling_param_;
  _impl_.psroi_pooling_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PSROIPoolingParameter* LayerParameter::_internal_mutable_psroi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00400000u;
  if (_impl_.psroi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PSROIPoolingParameter>(GetArena());
    _impl_.psroi_pooling_param_ = reinterpret_cast<::opencv_caffe::PSROIPoolingParameter*>(p);
  }
  return _impl_.psroi_pooling_param_;
}
inline ::opencv_caffe::PSROIPoolingParameter* LayerParameter::mutable_psroi_pooling_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PSROIPoolingParameter* _msg = _internal_mutable_psroi_pooling_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.psroi_pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_psroi_pooling_param(::opencv_caffe::PSROIPoolingParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PSROIPoolingParameter*>(_impl_.psroi_pooling_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PSROIPoolingParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00400000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00400000u;
  }

  _impl_.psroi_pooling_param_ = reinterpret_cast<::opencv_caffe::PSROIPoolingParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.psroi_pooling_param)
}

// optional .opencv_caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.python_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_python_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.python_param_ != nullptr) _impl_.python_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const ::opencv_caffe::PythonParameter& LayerParameter::_internal_python_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PythonParameter* p = _impl_.python_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PythonParameter&>(::opencv_caffe::_PythonParameter_default_instance_);
}
inline const ::opencv_caffe::PythonParameter& LayerParameter::python_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.python_param)
  return _internal_python_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_python_param(::opencv_caffe::PythonParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.python_param_);
  }
  _impl_.python_param_ = reinterpret_cast<::opencv_caffe::PythonParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.python_param)
}
inline ::opencv_caffe::PythonParameter* LayerParameter::release_python_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000001u;
  ::opencv_caffe::PythonParameter* released = _impl_.python_param_;
  _impl_.python_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PythonParameter* LayerParameter::unsafe_arena_release_python_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.python_param)

  _impl_._has_bits_[1] &= ~0x00000001u;
  ::opencv_caffe::PythonParameter* temp = _impl_.python_param_;
  _impl_.python_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PythonParameter* LayerParameter::_internal_mutable_python_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000001u;
  if (_impl_.python_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PythonParameter>(GetArena());
    _impl_.python_param_ = reinterpret_cast<::opencv_caffe::PythonParameter*>(p);
  }
  return _impl_.python_param_;
}
inline ::opencv_caffe::PythonParameter* LayerParameter::mutable_python_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PythonParameter* _msg = _internal_mutable_python_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.python_param)
  return _msg;
}
inline void LayerParameter::set_allocated_python_param(::opencv_caffe::PythonParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PythonParameter*>(_impl_.python_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PythonParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }

  _impl_.python_param_ = reinterpret_cast<::opencv_caffe::PythonParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.python_param)
}

// optional .opencv_caffe.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::has_recurrent_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recurrent_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_recurrent_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.recurrent_param_ != nullptr) _impl_.recurrent_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline const ::opencv_caffe::RecurrentParameter& LayerParameter::_internal_recurrent_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::RecurrentParameter* p = _impl_.recurrent_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::RecurrentParameter&>(::opencv_caffe::_RecurrentParameter_default_instance_);
}
inline const ::opencv_caffe::RecurrentParameter& LayerParameter::recurrent_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.recurrent_param)
  return _internal_recurrent_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_recurrent_param(::opencv_caffe::RecurrentParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.recurrent_param_);
  }
  _impl_.recurrent_param_ = reinterpret_cast<::opencv_caffe::RecurrentParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.recurrent_param)
}
inline ::opencv_caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00010000u;
  ::opencv_caffe::RecurrentParameter* released = _impl_.recurrent_param_;
  _impl_.recurrent_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::RecurrentParameter* LayerParameter::unsafe_arena_release_recurrent_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.recurrent_param)

  _impl_._has_bits_[1] &= ~0x00010000u;
  ::opencv_caffe::RecurrentParameter* temp = _impl_.recurrent_param_;
  _impl_.recurrent_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::RecurrentParameter* LayerParameter::_internal_mutable_recurrent_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00010000u;
  if (_impl_.recurrent_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::RecurrentParameter>(GetArena());
    _impl_.recurrent_param_ = reinterpret_cast<::opencv_caffe::RecurrentParameter*>(p);
  }
  return _impl_.recurrent_param_;
}
inline ::opencv_caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::RecurrentParameter* _msg = _internal_mutable_recurrent_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.recurrent_param)
  return _msg;
}
inline void LayerParameter::set_allocated_recurrent_param(::opencv_caffe::RecurrentParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::RecurrentParameter*>(_impl_.recurrent_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::RecurrentParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00010000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00010000u;
  }

  _impl_.recurrent_param_ = reinterpret_cast<::opencv_caffe::RecurrentParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.recurrent_param)
}

// optional .opencv_caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reduction_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_reduction_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.reduction_param_ != nullptr) _impl_.reduction_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline const ::opencv_caffe::ReductionParameter& LayerParameter::_internal_reduction_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ReductionParameter* p = _impl_.reduction_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ReductionParameter&>(::opencv_caffe::_ReductionParameter_default_instance_);
}
inline const ::opencv_caffe::ReductionParameter& LayerParameter::reduction_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.reduction_param)
  return _internal_reduction_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reduction_param(::opencv_caffe::ReductionParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reduction_param_);
  }
  _impl_.reduction_param_ = reinterpret_cast<::opencv_caffe::ReductionParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.reduction_param)
}
inline ::opencv_caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000040u;
  ::opencv_caffe::ReductionParameter* released = _impl_.reduction_param_;
  _impl_.reduction_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ReductionParameter* LayerParameter::unsafe_arena_release_reduction_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.reduction_param)

  _impl_._has_bits_[1] &= ~0x00000040u;
  ::opencv_caffe::ReductionParameter* temp = _impl_.reduction_param_;
  _impl_.reduction_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ReductionParameter* LayerParameter::_internal_mutable_reduction_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000040u;
  if (_impl_.reduction_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ReductionParameter>(GetArena());
    _impl_.reduction_param_ = reinterpret_cast<::opencv_caffe::ReductionParameter*>(p);
  }
  return _impl_.reduction_param_;
}
inline ::opencv_caffe::ReductionParameter* LayerParameter::mutable_reduction_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ReductionParameter* _msg = _internal_mutable_reduction_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.reduction_param)
  return _msg;
}
inline void LayerParameter::set_allocated_reduction_param(::opencv_caffe::ReductionParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ReductionParameter*>(_impl_.reduction_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ReductionParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }

  _impl_.reduction_param_ = reinterpret_cast<::opencv_caffe::ReductionParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.reduction_param)
}

// optional .opencv_caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relu_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.relu_param_ != nullptr) _impl_.relu_param_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::opencv_caffe::ReLUParameter& LayerParameter::_internal_relu_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ReLUParameter* p = _impl_.relu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ReLUParameter&>(::opencv_caffe::_ReLUParameter_default_instance_);
}
inline const ::opencv_caffe::ReLUParameter& LayerParameter::relu_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_relu_param(::opencv_caffe::ReLUParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relu_param_);
  }
  _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.relu_param)
}
inline ::opencv_caffe::ReLUParameter* LayerParameter::release_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x02000000u;
  ::opencv_caffe::ReLUParameter* released = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ReLUParameter* LayerParameter::unsafe_arena_release_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.relu_param)

  _impl_._has_bits_[0] &= ~0x02000000u;
  ::opencv_caffe::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ReLUParameter* LayerParameter::_internal_mutable_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ReLUParameter>(GetArena());
    _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(p);
  }
  return _impl_.relu_param_;
}
inline ::opencv_caffe::ReLUParameter* LayerParameter::mutable_relu_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ReLUParameter* _msg = _internal_mutable_relu_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.relu_param)
  return _msg;
}
inline void LayerParameter::set_allocated_relu_param(::opencv_caffe::ReLUParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ReLUParameter*>(_impl_.relu_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }

  _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.relu_param)
}

// optional .opencv_caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reshape_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_reshape_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.reshape_param_ != nullptr) _impl_.reshape_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline const ::opencv_caffe::ReshapeParameter& LayerParameter::_internal_reshape_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ReshapeParameter* p = _impl_.reshape_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ReshapeParameter&>(::opencv_caffe::_ReshapeParameter_default_instance_);
}
inline const ::opencv_caffe::ReshapeParameter& LayerParameter::reshape_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.reshape_param)
  return _internal_reshape_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_reshape_param(::opencv_caffe::ReshapeParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reshape_param_);
  }
  _impl_.reshape_param_ = reinterpret_cast<::opencv_caffe::ReshapeParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.reshape_param)
}
inline ::opencv_caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000008u;
  ::opencv_caffe::ReshapeParameter* released = _impl_.reshape_param_;
  _impl_.reshape_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ReshapeParameter* LayerParameter::unsafe_arena_release_reshape_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.reshape_param)

  _impl_._has_bits_[1] &= ~0x00000008u;
  ::opencv_caffe::ReshapeParameter* temp = _impl_.reshape_param_;
  _impl_.reshape_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ReshapeParameter* LayerParameter::_internal_mutable_reshape_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000008u;
  if (_impl_.reshape_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ReshapeParameter>(GetArena());
    _impl_.reshape_param_ = reinterpret_cast<::opencv_caffe::ReshapeParameter*>(p);
  }
  return _impl_.reshape_param_;
}
inline ::opencv_caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ReshapeParameter* _msg = _internal_mutable_reshape_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.reshape_param)
  return _msg;
}
inline void LayerParameter::set_allocated_reshape_param(::opencv_caffe::ReshapeParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ReshapeParameter*>(_impl_.reshape_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ReshapeParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }

  _impl_.reshape_param_ = reinterpret_cast<::opencv_caffe::ReshapeParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.reshape_param)
}

// optional .opencv_caffe.ROIPoolingParameter roi_pooling_param = 8266711;
inline bool LayerParameter::has_roi_pooling_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roi_pooling_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_roi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.roi_pooling_param_ != nullptr) _impl_.roi_pooling_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline const ::opencv_caffe::ROIPoolingParameter& LayerParameter::_internal_roi_pooling_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ROIPoolingParameter* p = _impl_.roi_pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ROIPoolingParameter&>(::opencv_caffe::_ROIPoolingParameter_default_instance_);
}
inline const ::opencv_caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.roi_pooling_param)
  return _internal_roi_pooling_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_roi_pooling_param(::opencv_caffe::ROIPoolingParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.roi_pooling_param_);
  }
  _impl_.roi_pooling_param_ = reinterpret_cast<::opencv_caffe::ROIPoolingParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00800000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.roi_pooling_param)
}
inline ::opencv_caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00800000u;
  ::opencv_caffe::ROIPoolingParameter* released = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ROIPoolingParameter* LayerParameter::unsafe_arena_release_roi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.roi_pooling_param)

  _impl_._has_bits_[1] &= ~0x00800000u;
  ::opencv_caffe::ROIPoolingParameter* temp = _impl_.roi_pooling_param_;
  _impl_.roi_pooling_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ROIPoolingParameter* LayerParameter::_internal_mutable_roi_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00800000u;
  if (_impl_.roi_pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ROIPoolingParameter>(GetArena());
    _impl_.roi_pooling_param_ = reinterpret_cast<::opencv_caffe::ROIPoolingParameter*>(p);
  }
  return _impl_.roi_pooling_param_;
}
inline ::opencv_caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ROIPoolingParameter* _msg = _internal_mutable_roi_pooling_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.roi_pooling_param)
  return _msg;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::opencv_caffe::ROIPoolingParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ROIPoolingParameter*>(_impl_.roi_pooling_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ROIPoolingParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00800000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00800000u;
  }

  _impl_.roi_pooling_param_ = reinterpret_cast<::opencv_caffe::ROIPoolingParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.roi_pooling_param)
}

// optional .opencv_caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_scale_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.scale_param_ != nullptr) _impl_.scale_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline const ::opencv_caffe::ScaleParameter& LayerParameter::_internal_scale_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ScaleParameter* p = _impl_.scale_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ScaleParameter&>(::opencv_caffe::_ScaleParameter_default_instance_);
}
inline const ::opencv_caffe::ScaleParameter& LayerParameter::scale_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.scale_param)
  return _internal_scale_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_scale_param(::opencv_caffe::ScaleParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.scale_param_);
  }
  _impl_.scale_param_ = reinterpret_cast<::opencv_caffe::ScaleParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.scale_param)
}
inline ::opencv_caffe::ScaleParameter* LayerParameter::release_scale_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00001000u;
  ::opencv_caffe::ScaleParameter* released = _impl_.scale_param_;
  _impl_.scale_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ScaleParameter* LayerParameter::unsafe_arena_release_scale_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.scale_param)

  _impl_._has_bits_[1] &= ~0x00001000u;
  ::opencv_caffe::ScaleParameter* temp = _impl_.scale_param_;
  _impl_.scale_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ScaleParameter* LayerParameter::_internal_mutable_scale_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00001000u;
  if (_impl_.scale_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ScaleParameter>(GetArena());
    _impl_.scale_param_ = reinterpret_cast<::opencv_caffe::ScaleParameter*>(p);
  }
  return _impl_.scale_param_;
}
inline ::opencv_caffe::ScaleParameter* LayerParameter::mutable_scale_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ScaleParameter* _msg = _internal_mutable_scale_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.scale_param)
  return _msg;
}
inline void LayerParameter::set_allocated_scale_param(::opencv_caffe::ScaleParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ScaleParameter*>(_impl_.scale_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ScaleParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00001000u;
  } else {
    _impl_._has_bits_[1] &= ~0x00001000u;
  }

  _impl_.scale_param_ = reinterpret_cast<::opencv_caffe::ScaleParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.scale_param)
}

// optional .opencv_caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sigmoid_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sigmoid_param_ != nullptr) _impl_.sigmoid_param_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::opencv_caffe::SigmoidParameter& LayerParameter::_internal_sigmoid_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SigmoidParameter* p = _impl_.sigmoid_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SigmoidParameter&>(::opencv_caffe::_SigmoidParameter_default_instance_);
}
inline const ::opencv_caffe::SigmoidParameter& LayerParameter::sigmoid_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sigmoid_param_);
  }
  _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.sigmoid_param)
}
inline ::opencv_caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x04000000u;
  ::opencv_caffe::SigmoidParameter* released = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SigmoidParameter* LayerParameter::unsafe_arena_release_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.sigmoid_param)

  _impl_._has_bits_[0] &= ~0x04000000u;
  ::opencv_caffe::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SigmoidParameter* LayerParameter::_internal_mutable_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SigmoidParameter>(GetArena());
    _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(p);
  }
  return _impl_.sigmoid_param_;
}
inline ::opencv_caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SigmoidParameter* _msg = _internal_mutable_sigmoid_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.sigmoid_param)
  return _msg;
}
inline void LayerParameter::set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SigmoidParameter*>(_impl_.sigmoid_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }

  _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.sigmoid_param)
}

// optional .opencv_caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.softmax_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.softmax_param_ != nullptr) _impl_.softmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const ::opencv_caffe::SoftmaxParameter& LayerParameter::_internal_softmax_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SoftmaxParameter* p = _impl_.softmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SoftmaxParameter&>(::opencv_caffe::_SoftmaxParameter_default_instance_);
}
inline const ::opencv_caffe::SoftmaxParameter& LayerParameter::softmax_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.softmax_param_);
  }
  _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.softmax_param)
}
inline ::opencv_caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x08000000u;
  ::opencv_caffe::SoftmaxParameter* released = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SoftmaxParameter* LayerParameter::unsafe_arena_release_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.softmax_param)

  _impl_._has_bits_[0] &= ~0x08000000u;
  ::opencv_caffe::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SoftmaxParameter* LayerParameter::_internal_mutable_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SoftmaxParameter>(GetArena());
    _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(p);
  }
  return _impl_.softmax_param_;
}
inline ::opencv_caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SoftmaxParameter* _msg = _internal_mutable_softmax_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.softmax_param)
  return _msg;
}
inline void LayerParameter::set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(_impl_.softmax_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }

  _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.softmax_param)
}

// optional .opencv_caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spp_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_spp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.spp_param_ != nullptr) _impl_.spp_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline const ::opencv_caffe::SPPParameter& LayerParameter::_internal_spp_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SPPParameter* p = _impl_.spp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SPPParameter&>(::opencv_caffe::_SPPParameter_default_instance_);
}
inline const ::opencv_caffe::SPPParameter& LayerParameter::spp_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.spp_param)
  return _internal_spp_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_spp_param(::opencv_caffe::SPPParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.spp_param_);
  }
  _impl_.spp_param_ = reinterpret_cast<::opencv_caffe::SPPParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.spp_param)
}
inline ::opencv_caffe::SPPParameter* LayerParameter::release_spp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000004u;
  ::opencv_caffe::SPPParameter* released = _impl_.spp_param_;
  _impl_.spp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SPPParameter* LayerParameter::unsafe_arena_release_spp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.spp_param)

  _impl_._has_bits_[1] &= ~0x00000004u;
  ::opencv_caffe::SPPParameter* temp = _impl_.spp_param_;
  _impl_.spp_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SPPParameter* LayerParameter::_internal_mutable_spp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000004u;
  if (_impl_.spp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SPPParameter>(GetArena());
    _impl_.spp_param_ = reinterpret_cast<::opencv_caffe::SPPParameter*>(p);
  }
  return _impl_.spp_param_;
}
inline ::opencv_caffe::SPPParameter* LayerParameter::mutable_spp_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SPPParameter* _msg = _internal_mutable_spp_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.spp_param)
  return _msg;
}
inline void LayerParameter::set_allocated_spp_param(::opencv_caffe::SPPParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SPPParameter*>(_impl_.spp_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SPPParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }

  _impl_.spp_param_ = reinterpret_cast<::opencv_caffe::SPPParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.spp_param)
}

// optional .opencv_caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slice_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.slice_param_ != nullptr) _impl_.slice_param_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const ::opencv_caffe::SliceParameter& LayerParameter::_internal_slice_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SliceParameter* p = _impl_.slice_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SliceParameter&>(::opencv_caffe::_SliceParameter_default_instance_);
}
inline const ::opencv_caffe::SliceParameter& LayerParameter::slice_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_slice_param(::opencv_caffe::SliceParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slice_param_);
  }
  _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.slice_param)
}
inline ::opencv_caffe::SliceParameter* LayerParameter::release_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x10000000u;
  ::opencv_caffe::SliceParameter* released = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SliceParameter* LayerParameter::unsafe_arena_release_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.slice_param)

  _impl_._has_bits_[0] &= ~0x10000000u;
  ::opencv_caffe::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SliceParameter* LayerParameter::_internal_mutable_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SliceParameter>(GetArena());
    _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(p);
  }
  return _impl_.slice_param_;
}
inline ::opencv_caffe::SliceParameter* LayerParameter::mutable_slice_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SliceParameter* _msg = _internal_mutable_slice_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.slice_param)
  return _msg;
}
inline void LayerParameter::set_allocated_slice_param(::opencv_caffe::SliceParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SliceParameter*>(_impl_.slice_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SliceParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }

  _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.slice_param)
}

// optional .opencv_caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tanh_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tanh_param_ != nullptr) _impl_.tanh_param_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::opencv_caffe::TanHParameter& LayerParameter::_internal_tanh_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::TanHParameter* p = _impl_.tanh_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::TanHParameter&>(::opencv_caffe::_TanHParameter_default_instance_);
}
inline const ::opencv_caffe::TanHParameter& LayerParameter::tanh_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tanh_param(::opencv_caffe::TanHParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tanh_param_);
  }
  _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.tanh_param)
}
inline ::opencv_caffe::TanHParameter* LayerParameter::release_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::opencv_caffe::TanHParameter* released = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::TanHParameter* LayerParameter::unsafe_arena_release_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.tanh_param)

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::opencv_caffe::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::TanHParameter* LayerParameter::_internal_mutable_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::TanHParameter>(GetArena());
    _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(p);
  }
  return _impl_.tanh_param_;
}
inline ::opencv_caffe::TanHParameter* LayerParameter::mutable_tanh_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::TanHParameter* _msg = _internal_mutable_tanh_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.tanh_param)
  return _msg;
}
inline void LayerParameter::set_allocated_tanh_param(::opencv_caffe::TanHParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::TanHParameter*>(_impl_.tanh_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::TanHParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }

  _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.tanh_param)
}

// optional .opencv_caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.threshold_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.threshold_param_ != nullptr) _impl_.threshold_param_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::opencv_caffe::ThresholdParameter& LayerParameter::_internal_threshold_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ThresholdParameter* p = _impl_.threshold_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ThresholdParameter&>(::opencv_caffe::_ThresholdParameter_default_instance_);
}
inline const ::opencv_caffe::ThresholdParameter& LayerParameter::threshold_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.threshold_param_);
  }
  _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.threshold_param)
}
inline ::opencv_caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::opencv_caffe::ThresholdParameter* released = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ThresholdParameter* LayerParameter::unsafe_arena_release_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.threshold_param)

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::opencv_caffe::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ThresholdParameter* LayerParameter::_internal_mutable_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ThresholdParameter>(GetArena());
    _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(p);
  }
  return _impl_.threshold_param_;
}
inline ::opencv_caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ThresholdParameter* _msg = _internal_mutable_threshold_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.threshold_param)
  return _msg;
}
inline void LayerParameter::set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ThresholdParameter*>(_impl_.threshold_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }

  _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.threshold_param)
}

// optional .opencv_caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tile_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_tile_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tile_param_ != nullptr) _impl_.tile_param_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline const ::opencv_caffe::TileParameter& LayerParameter::_internal_tile_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::TileParameter* p = _impl_.tile_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::TileParameter&>(::opencv_caffe::_TileParameter_default_instance_);
}
inline const ::opencv_caffe::TileParameter& LayerParameter::tile_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.tile_param)
  return _internal_tile_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_tile_param(::opencv_caffe::TileParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tile_param_);
  }
  _impl_.tile_param_ = reinterpret_cast<::opencv_caffe::TileParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.tile_param)
}
inline ::opencv_caffe::TileParameter* LayerParameter::release_tile_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[1] &= ~0x00000100u;
  ::opencv_caffe::TileParameter* released = _impl_.tile_param_;
  _impl_.tile_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::TileParameter* LayerParameter::unsafe_arena_release_tile_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.tile_param)

  _impl_._has_bits_[1] &= ~0x00000100u;
  ::opencv_caffe::TileParameter* temp = _impl_.tile_param_;
  _impl_.tile_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::TileParameter* LayerParameter::_internal_mutable_tile_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000100u;
  if (_impl_.tile_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::TileParameter>(GetArena());
    _impl_.tile_param_ = reinterpret_cast<::opencv_caffe::TileParameter*>(p);
  }
  return _impl_.tile_param_;
}
inline ::opencv_caffe::TileParameter* LayerParameter::mutable_tile_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::TileParameter* _msg = _internal_mutable_tile_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.tile_param)
  return _msg;
}
inline void LayerParameter::set_allocated_tile_param(::opencv_caffe::TileParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::TileParameter*>(_impl_.tile_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::TileParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }

  _impl_.tile_param_ = reinterpret_cast<::opencv_caffe::TileParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.tile_param)
}

// optional .opencv_caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_data_param_ != nullptr);
  return value;
}
inline void LayerParameter::clear_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.window_data_param_ != nullptr) _impl_.window_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const ::opencv_caffe::WindowDataParameter& LayerParameter::_internal_window_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::WindowDataParameter* p = _impl_.window_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::WindowDataParameter&>(::opencv_caffe::_WindowDataParameter_default_instance_);
}
inline const ::opencv_caffe::WindowDataParameter& LayerParameter::window_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void LayerParameter::unsafe_arena_set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.window_data_param_);
  }
  _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.LayerParameter.window_data_param)
}
inline ::opencv_caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x80000000u;
  ::opencv_caffe::WindowDataParameter* released = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::WindowDataParameter* LayerParameter::unsafe_arena_release_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.LayerParameter.window_data_param)

  _impl_._has_bits_[0] &= ~0x80000000u;
  ::opencv_caffe::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::WindowDataParameter* LayerParameter::_internal_mutable_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::WindowDataParameter>(GetArena());
    _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(p);
  }
  return _impl_.window_data_param_;
}
inline ::opencv_caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::WindowDataParameter* _msg = _internal_mutable_window_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.LayerParameter.window_data_param)
  return _msg;
}
inline void LayerParameter::set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::WindowDataParameter*>(_impl_.window_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }

  _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.LayerParameter.window_data_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void TransformationParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.scale)
  return _internal_scale();
}
inline void TransformationParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.scale)
}
inline float TransformationParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void TransformationParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scale_ = value;
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void TransformationParameter::clear_mirror() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.mirror)
  return _internal_mirror();
}
inline void TransformationParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.mirror)
}
inline bool TransformationParameter::_internal_mirror() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mirror_;
}
inline void TransformationParameter::_internal_set_mirror(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mirror_ = value;
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TransformationParameter::clear_crop_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.crop_size)
  return _internal_crop_size();
}
inline void TransformationParameter::set_crop_size(::uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.crop_size)
}
inline ::uint32_t TransformationParameter::_internal_crop_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crop_size_;
}
inline void TransformationParameter::_internal_set_crop_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.crop_size_ = value;
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TransformationParameter::clear_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransformationParameter::mean_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.mean_file)
  return _internal_mean_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransformationParameter::set_mean_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.mean_file)
}
inline std::string* TransformationParameter::mutable_mean_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.TransformationParameter.mean_file)
  return _s;
}
inline const std::string& TransformationParameter::_internal_mean_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_file_.Get();
}
inline void TransformationParameter::_internal_set_mean_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mean_file_.Set(value, GetArena());
}
inline std::string* TransformationParameter::_internal_mutable_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.mean_file_.Mutable( GetArena());
}
inline std::string* TransformationParameter::release_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.TransformationParameter.mean_file)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.mean_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void TransformationParameter::set_allocated_mean_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mean_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mean_file_.IsDefault()) {
          _impl_.mean_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::_internal_mean_value_size() const {
  return _internal_mean_value().size();
}
inline int TransformationParameter::mean_value_size() const {
  return _internal_mean_value_size();
}
inline void TransformationParameter::clear_mean_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.mean_value)
  return _internal_mean_value().Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  _internal_mutable_mean_value()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mean_value()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField<float>& TransformationParameter::mean_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.TransformationParameter.mean_value)
  return _internal_mean_value();
}
inline ::google::protobuf::RepeatedField<float>* TransformationParameter::mutable_mean_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.TransformationParameter.mean_value)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mean_value();
}
inline const ::google::protobuf::RepeatedField<float>& TransformationParameter::_internal_mean_value()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_value_;
}
inline ::google::protobuf::RepeatedField<float>* TransformationParameter::_internal_mutable_mean_value() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void TransformationParameter::clear_force_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_color_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.force_color)
  return _internal_force_color();
}
inline void TransformationParameter::set_force_color(bool value) {
  _internal_set_force_color(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.force_color)
}
inline bool TransformationParameter::_internal_force_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_color_;
}
inline void TransformationParameter::_internal_set_force_color(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.force_color_ = value;
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void TransformationParameter::clear_force_gray() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_gray_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TransformationParameter.force_gray)
  return _internal_force_gray();
}
inline void TransformationParameter::set_force_gray(bool value) {
  _internal_set_force_gray(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TransformationParameter.force_gray)
}
inline bool TransformationParameter::_internal_force_gray() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_gray_;
}
inline void TransformationParameter::_internal_set_force_gray(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.force_gray_ = value;
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LossParameter::clear_ignore_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ignore_label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LossParameter.ignore_label)
  return _internal_ignore_label();
}
inline void LossParameter::set_ignore_label(::int32_t value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LossParameter.ignore_label)
}
inline ::int32_t LossParameter::_internal_ignore_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ignore_label_;
}
inline void LossParameter::_internal_set_ignore_label(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ignore_label_ = value;
}

// optional .opencv_caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LossParameter::clear_normalization() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.normalization_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::opencv_caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LossParameter.normalization)
  return _internal_normalization();
}
inline void LossParameter::set_normalization(::opencv_caffe::LossParameter_NormalizationMode value) {
  _internal_set_normalization(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LossParameter.normalization)
}
inline ::opencv_caffe::LossParameter_NormalizationMode LossParameter::_internal_normalization() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::LossParameter_NormalizationMode>(_impl_.normalization_);
}
inline void LossParameter::_internal_set_normalization(::opencv_caffe::LossParameter_NormalizationMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::LossParameter_NormalizationMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.normalization_ = value;
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LossParameter::clear_normalize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.normalize_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LossParameter.normalize)
  return _internal_normalize();
}
inline void LossParameter::set_normalize(bool value) {
  _internal_set_normalize(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LossParameter.normalize)
}
inline bool LossParameter::_internal_normalize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.normalize_;
}
inline void LossParameter::_internal_set_normalize(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.normalize_ = value;
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AccuracyParameter::clear_top_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_k_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.AccuracyParameter.top_k)
  return _internal_top_k();
}
inline void AccuracyParameter::set_top_k(::uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.AccuracyParameter.top_k)
}
inline ::uint32_t AccuracyParameter::_internal_top_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_k_;
}
inline void AccuracyParameter::_internal_set_top_k(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_k_ = value;
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AccuracyParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.AccuracyParameter.axis)
  return _internal_axis();
}
inline void AccuracyParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.AccuracyParameter.axis)
}
inline ::int32_t AccuracyParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void AccuracyParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.axis_ = value;
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AccuracyParameter::clear_ignore_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ignore_label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.AccuracyParameter.ignore_label)
  return _internal_ignore_label();
}
inline void AccuracyParameter::set_ignore_label(::int32_t value) {
  _internal_set_ignore_label(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.AccuracyParameter.ignore_label)
}
inline ::int32_t AccuracyParameter::_internal_ignore_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ignore_label_;
}
inline void AccuracyParameter::_internal_set_ignore_label(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ignore_label_ = value;
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ArgMaxParameter::clear_out_max_val() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.out_max_val_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ArgMaxParameter.out_max_val)
  return _internal_out_max_val();
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  _internal_set_out_max_val(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ArgMaxParameter.out_max_val)
}
inline bool ArgMaxParameter::_internal_out_max_val() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_max_val_;
}
inline void ArgMaxParameter::_internal_set_out_max_val(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.out_max_val_ = value;
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ArgMaxParameter::clear_top_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_k_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ArgMaxParameter.top_k)
  return _internal_top_k();
}
inline void ArgMaxParameter::set_top_k(::uint32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ArgMaxParameter.top_k)
}
inline ::uint32_t ArgMaxParameter::_internal_top_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_k_;
}
inline void ArgMaxParameter::_internal_set_top_k(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_k_ = value;
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ArgMaxParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ArgMaxParameter.axis)
  return _internal_axis();
}
inline void ArgMaxParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ArgMaxParameter.axis)
}
inline ::int32_t ArgMaxParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ArgMaxParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConcatParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConcatParameter.axis)
  return _internal_axis();
}
inline void ConcatParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConcatParameter.axis)
}
inline ::int32_t ConcatParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ConcatParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConcatParameter::clear_concat_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.concat_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConcatParameter.concat_dim)
  return _internal_concat_dim();
}
inline void ConcatParameter::set_concat_dim(::uint32_t value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConcatParameter.concat_dim)
}
inline ::uint32_t ConcatParameter::_internal_concat_dim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.concat_dim_;
}
inline void ConcatParameter::_internal_set_concat_dim(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.concat_dim_ = value;
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BatchNormParameter::clear_use_global_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_global_stats_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BatchNormParameter.use_global_stats)
  return _internal_use_global_stats();
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  _internal_set_use_global_stats(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BatchNormParameter.use_global_stats)
}
inline bool BatchNormParameter::_internal_use_global_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_global_stats_;
}
inline void BatchNormParameter::_internal_set_use_global_stats(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.use_global_stats_ = value;
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.moving_average_fraction_ = 0.999f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BatchNormParameter.moving_average_fraction)
  return _internal_moving_average_fraction();
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  _internal_set_moving_average_fraction(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BatchNormParameter.moving_average_fraction)
}
inline float BatchNormParameter::_internal_moving_average_fraction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.moving_average_fraction_;
}
inline void BatchNormParameter::_internal_set_moving_average_fraction(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.moving_average_fraction_ = value;
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BatchNormParameter::clear_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ = 1e-05f;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BatchNormParameter.eps)
  return _internal_eps();
}
inline void BatchNormParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BatchNormParameter.eps)
}
inline float BatchNormParameter::_internal_eps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_;
}
inline void BatchNormParameter::_internal_set_eps(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.eps_ = value;
}

// optional bool scale_bias = 7 [default = false];
inline bool BatchNormParameter::has_scale_bias() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BatchNormParameter::clear_scale_bias() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_bias_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool BatchNormParameter::scale_bias() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BatchNormParameter.scale_bias)
  return _internal_scale_bias();
}
inline void BatchNormParameter::set_scale_bias(bool value) {
  _internal_set_scale_bias(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BatchNormParameter.scale_bias)
}
inline bool BatchNormParameter::_internal_scale_bias() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_bias_;
}
inline void BatchNormParameter::_internal_set_scale_bias(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scale_bias_ = value;
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BiasParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BiasParameter.axis)
  return _internal_axis();
}
inline void BiasParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BiasParameter.axis)
}
inline ::int32_t BiasParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void BiasParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BiasParameter::clear_num_axes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_axes_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.BiasParameter.num_axes)
  return _internal_num_axes();
}
inline void BiasParameter::set_num_axes(::int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.BiasParameter.num_axes)
}
inline ::int32_t BiasParameter::_internal_num_axes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_axes_;
}
inline void BiasParameter::_internal_set_num_axes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_axes_ = value;
}

// optional .opencv_caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline void BiasParameter::clear_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& BiasParameter::_internal_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& BiasParameter::filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.BiasParameter.filler)
  return _internal_filler();
}
inline void BiasParameter::unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.BiasParameter.filler)
}
inline ::opencv_caffe::FillerParameter* BiasParameter::release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* BiasParameter::unsafe_arena_release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.BiasParameter.filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* BiasParameter::_internal_mutable_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.filler_;
}
inline ::opencv_caffe::FillerParameter* BiasParameter::mutable_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.BiasParameter.filler)
  return _msg;
}
inline void BiasParameter::set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ContrastiveLossParameter::clear_margin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.margin_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ContrastiveLossParameter.margin)
  return _internal_margin();
}
inline void ContrastiveLossParameter::set_margin(float value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ContrastiveLossParameter.margin)
}
inline float ContrastiveLossParameter::_internal_margin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.margin_;
}
inline void ContrastiveLossParameter::_internal_set_margin(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.margin_ = value;
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.legacy_version_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ContrastiveLossParameter.legacy_version)
  return _internal_legacy_version();
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  _internal_set_legacy_version(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ContrastiveLossParameter.legacy_version)
}
inline bool ContrastiveLossParameter::_internal_legacy_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.legacy_version_;
}
inline void ContrastiveLossParameter::_internal_set_legacy_version(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.legacy_version_ = value;
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_num_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.num_output)
  return _internal_num_output();
}
inline void ConvolutionParameter::set_num_output(::uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.num_output)
}
inline ::uint32_t ConvolutionParameter::_internal_num_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_;
}
inline void ConvolutionParameter::_internal_set_num_output(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_bias_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.bias_term)
  return _internal_bias_term();
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.bias_term)
}
inline bool ConvolutionParameter::_internal_bias_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bias_term_;
}
inline void ConvolutionParameter::_internal_set_bias_term(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.bias_term_ = value;
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::_internal_pad_size() const {
  return _internal_pad().size();
}
inline int ConvolutionParameter::pad_size() const {
  return _internal_pad_size();
}
inline void ConvolutionParameter::clear_pad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_.Clear();
}
inline ::uint32_t ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.pad)
  return _internal_pad().Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::uint32_t value) {
  _internal_mutable_pad()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_pad()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::pad() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ConvolutionParameter.pad)
  return _internal_pad();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::mutable_pad()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ConvolutionParameter.pad)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pad();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::_internal_pad()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::_internal_mutable_pad() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::_internal_kernel_size_size() const {
  return _internal_kernel_size().size();
}
inline int ConvolutionParameter::kernel_size_size() const {
  return _internal_kernel_size_size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_size_.Clear();
}
inline ::uint32_t ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.kernel_size)
  return _internal_kernel_size().Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::uint32_t value) {
  _internal_mutable_kernel_size()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_kernel_size()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::kernel_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ConvolutionParameter.kernel_size)
  return _internal_kernel_size();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::mutable_kernel_size()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ConvolutionParameter.kernel_size)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_kernel_size();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::_internal_kernel_size()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_size_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::_internal_mutable_kernel_size() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::_internal_stride_size() const {
  return _internal_stride().size();
}
inline int ConvolutionParameter::stride_size() const {
  return _internal_stride_size();
}
inline void ConvolutionParameter::clear_stride() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_.Clear();
}
inline ::uint32_t ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.stride)
  return _internal_stride().Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::uint32_t value) {
  _internal_mutable_stride()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_stride()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::stride() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ConvolutionParameter.stride)
  return _internal_stride();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::mutable_stride()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ConvolutionParameter.stride)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stride();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::_internal_stride()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::_internal_mutable_stride() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::_internal_dilation_size() const {
  return _internal_dilation().size();
}
inline int ConvolutionParameter::dilation_size() const {
  return _internal_dilation_size();
}
inline void ConvolutionParameter::clear_dilation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dilation_.Clear();
}
inline ::uint32_t ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.dilation)
  return _internal_dilation().Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::uint32_t value) {
  _internal_mutable_dilation()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_dilation()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::dilation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ConvolutionParameter.dilation)
  return _internal_dilation();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::mutable_dilation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ConvolutionParameter.dilation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_dilation();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConvolutionParameter::_internal_dilation()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dilation_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConvolutionParameter::_internal_mutable_dilation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_pad_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.pad_h)
  return _internal_pad_h();
}
inline void ConvolutionParameter::set_pad_h(::uint32_t value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.pad_h)
}
inline ::uint32_t ConvolutionParameter::_internal_pad_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_h_;
}
inline void ConvolutionParameter::_internal_set_pad_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_pad_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.pad_w)
  return _internal_pad_w();
}
inline void ConvolutionParameter::set_pad_w(::uint32_t value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.pad_w)
}
inline ::uint32_t ConvolutionParameter::_internal_pad_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_w_;
}
inline void ConvolutionParameter::_internal_set_pad_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pad_w_ = value;
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_kernel_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.kernel_h)
  return _internal_kernel_h();
}
inline void ConvolutionParameter::set_kernel_h(::uint32_t value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.kernel_h)
}
inline ::uint32_t ConvolutionParameter::_internal_kernel_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_h_;
}
inline void ConvolutionParameter::_internal_set_kernel_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kernel_h_ = value;
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_kernel_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.kernel_w)
  return _internal_kernel_w();
}
inline void ConvolutionParameter::set_kernel_w(::uint32_t value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.kernel_w)
}
inline ::uint32_t ConvolutionParameter::_internal_kernel_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_w_;
}
inline void ConvolutionParameter::_internal_set_kernel_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.kernel_w_ = value;
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_stride_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.stride_h)
  return _internal_stride_h();
}
inline void ConvolutionParameter::set_stride_h(::uint32_t value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.stride_h)
}
inline ::uint32_t ConvolutionParameter::_internal_stride_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_h_;
}
inline void ConvolutionParameter::_internal_set_stride_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.stride_h_ = value;
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_stride_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.stride_w)
  return _internal_stride_w();
}
inline void ConvolutionParameter::set_stride_w(::uint32_t value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.stride_w)
}
inline ::uint32_t ConvolutionParameter::_internal_stride_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_w_;
}
inline void ConvolutionParameter::_internal_set_stride_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.stride_w_ = value;
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.group_ = 1u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.group)
  return _internal_group();
}
inline void ConvolutionParameter::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.group)
}
inline ::uint32_t ConvolutionParameter::_internal_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_;
}
inline void ConvolutionParameter::_internal_set_group(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.group_ = value;
}

// optional .opencv_caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline void ConvolutionParameter::clear_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& ConvolutionParameter::_internal_weight_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& ConvolutionParameter::weight_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.weight_filler)
  return _internal_weight_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ConvolutionParameter.weight_filler)
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::unsafe_arena_release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ConvolutionParameter.weight_filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::_internal_mutable_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.weight_filler_;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ConvolutionParameter.weight_filler)
  return _msg;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.weight_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ConvolutionParameter.weight_filler)
}

// optional .opencv_caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void ConvolutionParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::FillerParameter& ConvolutionParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& ConvolutionParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ConvolutionParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ConvolutionParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ConvolutionParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ConvolutionParameter.bias_filler)
  return _msg;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ConvolutionParameter.bias_filler)
}

// optional .opencv_caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::opencv_caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.engine)
  return _internal_engine();
}
inline void ConvolutionParameter::set_engine(::opencv_caffe::ConvolutionParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.engine)
}
inline ::opencv_caffe::ConvolutionParameter_Engine ConvolutionParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::ConvolutionParameter_Engine>(_impl_.engine_);
}
inline void ConvolutionParameter::_internal_set_engine(::opencv_caffe::ConvolutionParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::ConvolutionParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.engine_ = value;
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.axis)
  return _internal_axis();
}
inline void ConvolutionParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.axis)
}
inline ::int32_t ConvolutionParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ConvolutionParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.axis_ = value;
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_nd_im2col_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ConvolutionParameter.force_nd_im2col)
  return _internal_force_nd_im2col();
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  _internal_set_force_nd_im2col(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ConvolutionParameter.force_nd_im2col)
}
inline bool ConvolutionParameter::_internal_force_nd_im2col() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_nd_im2col_;
}
inline void ConvolutionParameter::_internal_set_force_nd_im2col(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.force_nd_im2col_ = value;
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CropParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.CropParameter.axis)
  return _internal_axis();
}
inline void CropParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.CropParameter.axis)
}
inline ::int32_t CropParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void CropParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}

// repeated uint32 offset = 2;
inline int CropParameter::_internal_offset_size() const {
  return _internal_offset().size();
}
inline int CropParameter::offset_size() const {
  return _internal_offset_size();
}
inline void CropParameter::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_.Clear();
}
inline ::uint32_t CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.CropParameter.offset)
  return _internal_offset().Get(index);
}
inline void CropParameter::set_offset(int index, ::uint32_t value) {
  _internal_mutable_offset()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.CropParameter.offset)
}
inline void CropParameter::add_offset(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_offset()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& CropParameter::offset() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.CropParameter.offset)
  return _internal_offset();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* CropParameter::mutable_offset()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.CropParameter.offset)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_offset();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& CropParameter::_internal_offset()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* CropParameter::_internal_mutable_offset() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DataParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.source)
}
inline std::string* DataParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DataParameter.source)
  return _s;
}
inline const std::string& DataParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void DataParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* DataParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* DataParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.DataParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DataParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void DataParameter::clear_batch_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.batch_size)
  return _internal_batch_size();
}
inline void DataParameter::set_batch_size(::uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.batch_size)
}
inline ::uint32_t DataParameter::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void DataParameter::_internal_set_batch_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void DataParameter::clear_rand_skip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void DataParameter::set_rand_skip(::uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.rand_skip)
}
inline ::uint32_t DataParameter::_internal_rand_skip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rand_skip_;
}
inline void DataParameter::_internal_set_rand_skip(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rand_skip_ = value;
}

// optional .opencv_caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void DataParameter::clear_backend() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.backend_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::opencv_caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.backend)
  return _internal_backend();
}
inline void DataParameter::set_backend(::opencv_caffe::DataParameter_DB value) {
  _internal_set_backend(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.backend)
}
inline ::opencv_caffe::DataParameter_DB DataParameter::_internal_backend() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::DataParameter_DB>(_impl_.backend_);
}
inline void DataParameter::_internal_set_backend(::opencv_caffe::DataParameter_DB value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::DataParameter_DB_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.backend_ = value;
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void DataParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.scale)
  return _internal_scale();
}
inline void DataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.scale)
}
inline float DataParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void DataParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scale_ = value;
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DataParameter::clear_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataParameter::mean_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.mean_file)
  return _internal_mean_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataParameter::set_mean_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.mean_file)
}
inline std::string* DataParameter::mutable_mean_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DataParameter.mean_file)
  return _s;
}
inline const std::string& DataParameter::_internal_mean_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_file_.Get();
}
inline void DataParameter::_internal_set_mean_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArena());
}
inline std::string* DataParameter::_internal_mutable_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable( GetArena());
}
inline std::string* DataParameter::release_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.DataParameter.mean_file)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mean_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DataParameter::set_allocated_mean_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mean_file_.IsDefault()) {
          _impl_.mean_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void DataParameter::clear_crop_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.crop_size)
  return _internal_crop_size();
}
inline void DataParameter::set_crop_size(::uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.crop_size)
}
inline ::uint32_t DataParameter::_internal_crop_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crop_size_;
}
inline void DataParameter::_internal_set_crop_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void DataParameter::clear_mirror() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.mirror)
  return _internal_mirror();
}
inline void DataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.mirror)
}
inline bool DataParameter::_internal_mirror() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mirror_;
}
inline void DataParameter::_internal_set_mirror(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mirror_ = value;
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void DataParameter::clear_force_encoded_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.force_encoded_color_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.force_encoded_color)
  return _internal_force_encoded_color();
}
inline void DataParameter::set_force_encoded_color(bool value) {
  _internal_set_force_encoded_color(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.force_encoded_color)
}
inline bool DataParameter::_internal_force_encoded_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.force_encoded_color_;
}
inline void DataParameter::_internal_set_force_encoded_color(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.force_encoded_color_ = value;
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void DataParameter::clear_prefetch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prefetch_ = 4u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DataParameter.prefetch)
  return _internal_prefetch();
}
inline void DataParameter::set_prefetch(::uint32_t value) {
  _internal_set_prefetch(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DataParameter.prefetch)
}
inline ::uint32_t DataParameter::_internal_prefetch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prefetch_;
}
inline void DataParameter::_internal_set_prefetch(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.prefetch_ = value;
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nms_threshold_ = 0.3f;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NonMaximumSuppressionParameter.nms_threshold)
  return _internal_nms_threshold();
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  _internal_set_nms_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NonMaximumSuppressionParameter.nms_threshold)
}
inline float NonMaximumSuppressionParameter::_internal_nms_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nms_threshold_;
}
inline void NonMaximumSuppressionParameter::_internal_set_nms_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.nms_threshold_ = value;
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NonMaximumSuppressionParameter.top_k)
  return _internal_top_k();
}
inline void NonMaximumSuppressionParameter::set_top_k(::int32_t value) {
  _internal_set_top_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NonMaximumSuppressionParameter.top_k)
}
inline ::int32_t NonMaximumSuppressionParameter::_internal_top_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_k_;
}
inline void NonMaximumSuppressionParameter::_internal_set_top_k(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.top_k_ = value;
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::has_eta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eta_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NonMaximumSuppressionParameter.eta)
  return _internal_eta();
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NonMaximumSuppressionParameter.eta)
}
inline float NonMaximumSuppressionParameter::_internal_eta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eta_;
}
inline void NonMaximumSuppressionParameter::_internal_set_eta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eta_ = value;
}

// -------------------------------------------------------------------

// SaveOutputParameter

// optional string output_directory = 1;
inline bool SaveOutputParameter::has_output_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_output_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SaveOutputParameter::output_directory() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.output_directory)
  return _internal_output_directory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveOutputParameter::set_output_directory(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_directory_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_directory)
}
inline std::string* SaveOutputParameter::mutable_output_directory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_directory();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SaveOutputParameter.output_directory)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_directory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_directory_.Get();
}
inline void SaveOutputParameter::_internal_set_output_directory(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.output_directory_.Set(value, GetArena());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.output_directory_.Mutable( GetArena());
}
inline std::string* SaveOutputParameter::release_output_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SaveOutputParameter.output_directory)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.output_directory_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_directory_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveOutputParameter::set_allocated_output_directory(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_directory_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_directory_.IsDefault()) {
          _impl_.output_directory_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SaveOutputParameter.output_directory)
}

// optional string output_name_prefix = 2;
inline bool SaveOutputParameter::has_output_name_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_output_name_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_name_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SaveOutputParameter::output_name_prefix() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.output_name_prefix)
  return _internal_output_name_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveOutputParameter::set_output_name_prefix(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_name_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_name_prefix)
}
inline std::string* SaveOutputParameter::mutable_output_name_prefix() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_name_prefix();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SaveOutputParameter.output_name_prefix)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_name_prefix() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_name_prefix_.Get();
}
inline void SaveOutputParameter::_internal_set_output_name_prefix(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_name_prefix_.Set(value, GetArena());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_name_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.output_name_prefix_.Mutable( GetArena());
}
inline std::string* SaveOutputParameter::release_output_name_prefix() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SaveOutputParameter.output_name_prefix)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.output_name_prefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_name_prefix_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveOutputParameter::set_allocated_output_name_prefix(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.output_name_prefix_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_name_prefix_.IsDefault()) {
          _impl_.output_name_prefix_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SaveOutputParameter.output_name_prefix)
}

// optional string output_format = 3;
inline bool SaveOutputParameter::has_output_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_output_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_format_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SaveOutputParameter::output_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.output_format)
  return _internal_output_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveOutputParameter::set_output_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.output_format)
}
inline std::string* SaveOutputParameter::mutable_output_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_output_format();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SaveOutputParameter.output_format)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_output_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_format_.Get();
}
inline void SaveOutputParameter::_internal_set_output_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.output_format_.Set(value, GetArena());
}
inline std::string* SaveOutputParameter::_internal_mutable_output_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.output_format_.Mutable( GetArena());
}
inline std::string* SaveOutputParameter::release_output_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SaveOutputParameter.output_format)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.output_format_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_format_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveOutputParameter::set_allocated_output_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.output_format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.output_format_.IsDefault()) {
          _impl_.output_format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SaveOutputParameter.output_format)
}

// optional string label_map_file = 4;
inline bool SaveOutputParameter::has_label_map_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_label_map_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_map_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SaveOutputParameter::label_map_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.label_map_file)
  return _internal_label_map_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveOutputParameter::set_label_map_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.label_map_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.label_map_file)
}
inline std::string* SaveOutputParameter::mutable_label_map_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_map_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SaveOutputParameter.label_map_file)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_label_map_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_map_file_.Get();
}
inline void SaveOutputParameter::_internal_set_label_map_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.label_map_file_.Set(value, GetArena());
}
inline std::string* SaveOutputParameter::_internal_mutable_label_map_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.label_map_file_.Mutable( GetArena());
}
inline std::string* SaveOutputParameter::release_label_map_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SaveOutputParameter.label_map_file)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.label_map_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_map_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveOutputParameter::set_allocated_label_map_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.label_map_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_map_file_.IsDefault()) {
          _impl_.label_map_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SaveOutputParameter.label_map_file)
}

// optional string name_size_file = 5;
inline bool SaveOutputParameter::has_name_size_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_name_size_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_size_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SaveOutputParameter::name_size_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.name_size_file)
  return _internal_name_size_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SaveOutputParameter::set_name_size_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.name_size_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.name_size_file)
}
inline std::string* SaveOutputParameter::mutable_name_size_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name_size_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.SaveOutputParameter.name_size_file)
  return _s;
}
inline const std::string& SaveOutputParameter::_internal_name_size_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_size_file_.Get();
}
inline void SaveOutputParameter::_internal_set_name_size_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.name_size_file_.Set(value, GetArena());
}
inline std::string* SaveOutputParameter::_internal_mutable_name_size_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.name_size_file_.Mutable( GetArena());
}
inline std::string* SaveOutputParameter::release_name_size_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.SaveOutputParameter.name_size_file)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.name_size_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_size_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SaveOutputParameter::set_allocated_name_size_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.name_size_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_size_file_.IsDefault()) {
          _impl_.name_size_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.SaveOutputParameter.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool SaveOutputParameter::has_num_test_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void SaveOutputParameter::clear_num_test_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_test_image_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t SaveOutputParameter::num_test_image() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SaveOutputParameter.num_test_image)
  return _internal_num_test_image();
}
inline void SaveOutputParameter::set_num_test_image(::uint32_t value) {
  _internal_set_num_test_image(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SaveOutputParameter.num_test_image)
}
inline ::uint32_t SaveOutputParameter::_internal_num_test_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_test_image_;
}
inline void SaveOutputParameter::_internal_set_num_test_image(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_test_image_ = value;
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DropoutParameter::clear_dropout_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropout_ratio_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DropoutParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DropoutParameter.dropout_ratio)
}
inline float DropoutParameter::_internal_dropout_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dropout_ratio_;
}
inline void DropoutParameter::_internal_set_dropout_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dropout_ratio_ = value;
}

// optional bool scale_train = 2 [default = true];
inline bool DropoutParameter::has_scale_train() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DropoutParameter::clear_scale_train() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_train_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool DropoutParameter::scale_train() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DropoutParameter.scale_train)
  return _internal_scale_train();
}
inline void DropoutParameter::set_scale_train(bool value) {
  _internal_set_scale_train(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DropoutParameter.scale_train)
}
inline bool DropoutParameter::_internal_scale_train() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_train_;
}
inline void DropoutParameter::_internal_set_scale_train(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scale_train_ = value;
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .opencv_caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::_internal_data_filler_size() const {
  return _internal_data_filler().size();
}
inline int DummyDataParameter::data_filler_size() const {
  return _internal_data_filler_size();
}
inline void DummyDataParameter::clear_data_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_filler_.Clear();
}
inline ::opencv_caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DummyDataParameter.data_filler)
  return _internal_mutable_data_filler()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>* DummyDataParameter::mutable_data_filler()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.data_filler)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data_filler();
}
inline const ::opencv_caffe::FillerParameter& DummyDataParameter::data_filler(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.data_filler)
  return _internal_data_filler().Get(index);
}
inline ::opencv_caffe::FillerParameter* DummyDataParameter::add_data_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::FillerParameter* _add = _internal_mutable_data_filler()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.data_filler)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>& DummyDataParameter::data_filler() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.data_filler)
  return _internal_data_filler();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>&
DummyDataParameter::_internal_data_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_filler_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::FillerParameter>*
DummyDataParameter::_internal_mutable_data_filler() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_filler_;
}

// repeated .opencv_caffe.BlobShape shape = 6;
inline int DummyDataParameter::_internal_shape_size() const {
  return _internal_shape().size();
}
inline int DummyDataParameter::shape_size() const {
  return _internal_shape_size();
}
inline void DummyDataParameter::clear_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shape_.Clear();
}
inline ::opencv_caffe::BlobShape* DummyDataParameter::mutable_shape(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.DummyDataParameter.shape)
  return _internal_mutable_shape()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* DummyDataParameter::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.shape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shape();
}
inline const ::opencv_caffe::BlobShape& DummyDataParameter::shape(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.shape)
  return _internal_shape().Get(index);
}
inline ::opencv_caffe::BlobShape* DummyDataParameter::add_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobShape* _add = _internal_mutable_shape()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.shape)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& DummyDataParameter::shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.shape)
  return _internal_shape();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>&
DummyDataParameter::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shape_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>*
DummyDataParameter::_internal_mutable_shape() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::_internal_num_size() const {
  return _internal_num().size();
}
inline int DummyDataParameter::num_size() const {
  return _internal_num_size();
}
inline void DummyDataParameter::clear_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_.Clear();
}
inline ::uint32_t DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.num)
  return _internal_num().Get(index);
}
inline void DummyDataParameter::set_num(int index, ::uint32_t value) {
  _internal_mutable_num()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_num()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::num() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.num)
  return _internal_num();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::mutable_num()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.num)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_num();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::_internal_num()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::_internal_mutable_num() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::_internal_channels_size() const {
  return _internal_channels().size();
}
inline int DummyDataParameter::channels_size() const {
  return _internal_channels_size();
}
inline void DummyDataParameter::clear_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channels_.Clear();
}
inline ::uint32_t DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.channels)
  return _internal_channels().Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::uint32_t value) {
  _internal_mutable_channels()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channels()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::channels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.channels)
  return _internal_channels();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::mutable_channels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.channels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channels();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::_internal_channels()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::_internal_mutable_channels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::_internal_height_size() const {
  return _internal_height().size();
}
inline int DummyDataParameter::height_size() const {
  return _internal_height_size();
}
inline void DummyDataParameter::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_.Clear();
}
inline ::uint32_t DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.height)
  return _internal_height().Get(index);
}
inline void DummyDataParameter::set_height(int index, ::uint32_t value) {
  _internal_mutable_height()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_height()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::height() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.height)
  return _internal_height();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::mutable_height()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.height)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_height();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::_internal_height()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::_internal_mutable_height() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::_internal_width_size() const {
  return _internal_width().size();
}
inline int DummyDataParameter::width_size() const {
  return _internal_width_size();
}
inline void DummyDataParameter::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_.Clear();
}
inline ::uint32_t DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.DummyDataParameter.width)
  return _internal_width().Get(index);
}
inline void DummyDataParameter::set_width(int index, ::uint32_t value) {
  _internal_mutable_width()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_width()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::width() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.DummyDataParameter.width)
  return _internal_width();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::mutable_width()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.DummyDataParameter.width)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_width();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& DummyDataParameter::_internal_width()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* DummyDataParameter::_internal_mutable_width() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .opencv_caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EltwiseParameter::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EltwiseParameter.operation)
  return _internal_operation();
}
inline void EltwiseParameter::set_operation(::opencv_caffe::EltwiseParameter_EltwiseOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EltwiseParameter.operation)
}
inline ::opencv_caffe::EltwiseParameter_EltwiseOp EltwiseParameter::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::EltwiseParameter_EltwiseOp>(_impl_.operation_);
}
inline void EltwiseParameter::_internal_set_operation(::opencv_caffe::EltwiseParameter_EltwiseOp value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operation_ = value;
}

// repeated float coeff = 2;
inline int EltwiseParameter::_internal_coeff_size() const {
  return _internal_coeff().size();
}
inline int EltwiseParameter::coeff_size() const {
  return _internal_coeff_size();
}
inline void EltwiseParameter::clear_coeff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EltwiseParameter.coeff)
  return _internal_coeff().Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  _internal_mutable_coeff()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coeff()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField<float>& EltwiseParameter::coeff() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.EltwiseParameter.coeff)
  return _internal_coeff();
}
inline ::google::protobuf::RepeatedField<float>* EltwiseParameter::mutable_coeff()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.EltwiseParameter.coeff)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coeff();
}
inline const ::google::protobuf::RepeatedField<float>& EltwiseParameter::_internal_coeff()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeff_;
}
inline ::google::protobuf::RepeatedField<float>* EltwiseParameter::_internal_mutable_coeff() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stable_prod_grad_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EltwiseParameter.stable_prod_grad)
  return _internal_stable_prod_grad();
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  _internal_set_stable_prod_grad(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EltwiseParameter.stable_prod_grad)
}
inline bool EltwiseParameter::_internal_stable_prod_grad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stable_prod_grad_;
}
inline void EltwiseParameter::_internal_set_stable_prod_grad(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stable_prod_grad_ = value;
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ELUParameter::clear_alpha() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ELUParameter.alpha)
  return _internal_alpha();
}
inline void ELUParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ELUParameter.alpha)
}
inline float ELUParameter::_internal_alpha() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alpha_;
}
inline void ELUParameter::_internal_set_alpha(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alpha_ = value;
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EmbedParameter::clear_num_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EmbedParameter.num_output)
  return _internal_num_output();
}
inline void EmbedParameter::set_num_output(::uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EmbedParameter.num_output)
}
inline ::uint32_t EmbedParameter::_internal_num_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_;
}
inline void EmbedParameter::_internal_set_num_output(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EmbedParameter::clear_input_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.input_dim_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EmbedParameter.input_dim)
  return _internal_input_dim();
}
inline void EmbedParameter::set_input_dim(::uint32_t value) {
  _internal_set_input_dim(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EmbedParameter.input_dim)
}
inline ::uint32_t EmbedParameter::_internal_input_dim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.input_dim_;
}
inline void EmbedParameter::_internal_set_input_dim(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.input_dim_ = value;
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EmbedParameter::clear_bias_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.EmbedParameter.bias_term)
  return _internal_bias_term();
}
inline void EmbedParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.EmbedParameter.bias_term)
}
inline bool EmbedParameter::_internal_bias_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bias_term_;
}
inline void EmbedParameter::_internal_set_bias_term(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bias_term_ = value;
}

// optional .opencv_caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline void EmbedParameter::clear_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& EmbedParameter::_internal_weight_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& EmbedParameter::weight_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.EmbedParameter.weight_filler)
  return _internal_weight_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.EmbedParameter.weight_filler)
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::unsafe_arena_release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.EmbedParameter.weight_filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::_internal_mutable_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.weight_filler_;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::mutable_weight_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.EmbedParameter.weight_filler)
  return _msg;
}
inline void EmbedParameter::set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.weight_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.EmbedParameter.weight_filler)
}

// optional .opencv_caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void EmbedParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::FillerParameter& EmbedParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& EmbedParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.EmbedParameter.bias_filler)
  return _internal_bias_filler();
}
inline void EmbedParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.EmbedParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.EmbedParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* EmbedParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.EmbedParameter.bias_filler)
  return _msg;
}
inline void EmbedParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ExpParameter::clear_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ExpParameter.base)
  return _internal_base();
}
inline void ExpParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ExpParameter.base)
}
inline float ExpParameter::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_;
}
inline void ExpParameter::_internal_set_base(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ExpParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ExpParameter.scale)
  return _internal_scale();
}
inline void ExpParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ExpParameter.scale)
}
inline float ExpParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void ExpParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ExpParameter::clear_shift() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ExpParameter.shift)
  return _internal_shift();
}
inline void ExpParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ExpParameter.shift)
}
inline float ExpParameter::_internal_shift() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shift_;
}
inline void ExpParameter::_internal_set_shift(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FlattenParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FlattenParameter.axis)
  return _internal_axis();
}
inline void FlattenParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FlattenParameter.axis)
}
inline ::int32_t FlattenParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void FlattenParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FlattenParameter::clear_end_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_axis_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.FlattenParameter.end_axis)
  return _internal_end_axis();
}
inline void FlattenParameter::set_end_axis(::int32_t value) {
  _internal_set_end_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.FlattenParameter.end_axis)
}
inline ::int32_t FlattenParameter::_internal_end_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_axis_;
}
inline void FlattenParameter::_internal_set_end_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_axis_ = value;
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HDF5DataParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5DataParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.HDF5DataParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HDF5DataParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5DataParameter.source)
}
inline std::string* HDF5DataParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.HDF5DataParameter.source)
  return _s;
}
inline const std::string& HDF5DataParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void HDF5DataParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* HDF5DataParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* HDF5DataParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.HDF5DataParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HDF5DataParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HDF5DataParameter::clear_batch_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.HDF5DataParameter.batch_size)
  return _internal_batch_size();
}
inline void HDF5DataParameter::set_batch_size(::uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5DataParameter.batch_size)
}
inline ::uint32_t HDF5DataParameter::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void HDF5DataParameter::_internal_set_batch_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.batch_size_ = value;
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void HDF5DataParameter::clear_shuffle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shuffle_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.HDF5DataParameter.shuffle)
  return _internal_shuffle();
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5DataParameter.shuffle)
}
inline bool HDF5DataParameter::_internal_shuffle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shuffle_;
}
inline void HDF5DataParameter::_internal_set_shuffle(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shuffle_ = value;
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HDF5OutputParameter::clear_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HDF5OutputParameter::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.HDF5OutputParameter.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HDF5OutputParameter::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.HDF5OutputParameter.file_name)
}
inline std::string* HDF5OutputParameter::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.HDF5OutputParameter.file_name)
  return _s;
}
inline const std::string& HDF5OutputParameter::_internal_file_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_name_.Get();
}
inline void HDF5OutputParameter::_internal_set_file_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* HDF5OutputParameter::_internal_mutable_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* HDF5OutputParameter::release_file_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.HDF5OutputParameter.file_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.file_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HDF5OutputParameter::set_allocated_file_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .opencv_caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HingeLossParameter::clear_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.norm_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.HingeLossParameter.norm)
  return _internal_norm();
}
inline void HingeLossParameter::set_norm(::opencv_caffe::HingeLossParameter_Norm value) {
  _internal_set_norm(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.HingeLossParameter.norm)
}
inline ::opencv_caffe::HingeLossParameter_Norm HingeLossParameter::_internal_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::HingeLossParameter_Norm>(_impl_.norm_);
}
inline void HingeLossParameter::_internal_set_norm(::opencv_caffe::HingeLossParameter_Norm value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::HingeLossParameter_Norm_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.norm_ = value;
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ImageDataParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageDataParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.source)
}
inline std::string* ImageDataParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ImageDataParameter.source)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void ImageDataParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* ImageDataParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* ImageDataParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ImageDataParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ImageDataParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ImageDataParameter::clear_batch_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_size_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.batch_size)
  return _internal_batch_size();
}
inline void ImageDataParameter::set_batch_size(::uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.batch_size)
}
inline ::uint32_t ImageDataParameter::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void ImageDataParameter::_internal_set_batch_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.batch_size_ = value;
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ImageDataParameter::clear_rand_skip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.rand_skip)
  return _internal_rand_skip();
}
inline void ImageDataParameter::set_rand_skip(::uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.rand_skip)
}
inline ::uint32_t ImageDataParameter::_internal_rand_skip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rand_skip_;
}
inline void ImageDataParameter::_internal_set_rand_skip(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rand_skip_ = value;
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ImageDataParameter::clear_shuffle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shuffle_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.shuffle)
  return _internal_shuffle();
}
inline void ImageDataParameter::set_shuffle(bool value) {
  _internal_set_shuffle(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.shuffle)
}
inline bool ImageDataParameter::_internal_shuffle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shuffle_;
}
inline void ImageDataParameter::_internal_set_shuffle(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.shuffle_ = value;
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ImageDataParameter::clear_new_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.new_height)
  return _internal_new_height();
}
inline void ImageDataParameter::set_new_height(::uint32_t value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.new_height)
}
inline ::uint32_t ImageDataParameter::_internal_new_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_height_;
}
inline void ImageDataParameter::_internal_set_new_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.new_height_ = value;
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ImageDataParameter::clear_new_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.new_width)
  return _internal_new_width();
}
inline void ImageDataParameter::set_new_width(::uint32_t value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.new_width)
}
inline ::uint32_t ImageDataParameter::_internal_new_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_width_;
}
inline void ImageDataParameter::_internal_set_new_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.new_width_ = value;
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ImageDataParameter::clear_is_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_color_ = true;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.is_color)
  return _internal_is_color();
}
inline void ImageDataParameter::set_is_color(bool value) {
  _internal_set_is_color(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.is_color)
}
inline bool ImageDataParameter::_internal_is_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_color_;
}
inline void ImageDataParameter::_internal_set_is_color(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_color_ = value;
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ImageDataParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.scale)
  return _internal_scale();
}
inline void ImageDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.scale)
}
inline float ImageDataParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void ImageDataParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.scale_ = value;
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ImageDataParameter::clear_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageDataParameter::mean_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.mean_file)
  return _internal_mean_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataParameter::set_mean_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.mean_file)
}
inline std::string* ImageDataParameter::mutable_mean_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ImageDataParameter.mean_file)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_mean_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_file_.Get();
}
inline void ImageDataParameter::_internal_set_mean_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArena());
}
inline std::string* ImageDataParameter::_internal_mutable_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable( GetArena());
}
inline std::string* ImageDataParameter::release_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ImageDataParameter.mean_file)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mean_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ImageDataParameter::set_allocated_mean_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mean_file_.IsDefault()) {
          _impl_.mean_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ImageDataParameter::clear_crop_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.crop_size)
  return _internal_crop_size();
}
inline void ImageDataParameter::set_crop_size(::uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.crop_size)
}
inline ::uint32_t ImageDataParameter::_internal_crop_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crop_size_;
}
inline void ImageDataParameter::_internal_set_crop_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ImageDataParameter::clear_mirror() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.mirror)
  return _internal_mirror();
}
inline void ImageDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.mirror)
}
inline bool ImageDataParameter::_internal_mirror() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mirror_;
}
inline void ImageDataParameter::_internal_set_mirror(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mirror_ = value;
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ImageDataParameter::clear_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.root_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ImageDataParameter::root_folder() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ImageDataParameter.root_folder)
  return _internal_root_folder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageDataParameter::set_root_folder(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_folder_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.ImageDataParameter.root_folder)
}
inline std::string* ImageDataParameter::mutable_root_folder() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_folder();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ImageDataParameter.root_folder)
  return _s;
}
inline const std::string& ImageDataParameter::_internal_root_folder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.root_folder_.Get();
}
inline void ImageDataParameter::_internal_set_root_folder(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.root_folder_.Set(value, GetArena());
}
inline std::string* ImageDataParameter::_internal_mutable_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.root_folder_.Mutable( GetArena());
}
inline std::string* ImageDataParameter::release_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ImageDataParameter.root_folder)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.root_folder_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_folder_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ImageDataParameter::set_allocated_root_folder(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.root_folder_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.root_folder_.IsDefault()) {
          _impl_.root_folder_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ImageDataParameter.root_folder)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InfogainLossParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InfogainLossParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.InfogainLossParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfogainLossParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.InfogainLossParameter.source)
}
inline std::string* InfogainLossParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.InfogainLossParameter.source)
  return _s;
}
inline const std::string& InfogainLossParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void InfogainLossParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* InfogainLossParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* InfogainLossParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.InfogainLossParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InfogainLossParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InnerProductParameter::clear_num_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.num_output)
  return _internal_num_output();
}
inline void InnerProductParameter::set_num_output(::uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.InnerProductParameter.num_output)
}
inline ::uint32_t InnerProductParameter::_internal_num_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_;
}
inline void InnerProductParameter::_internal_set_num_output(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void InnerProductParameter::clear_bias_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bias_term_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.bias_term)
  return _internal_bias_term();
}
inline void InnerProductParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.InnerProductParameter.bias_term)
}
inline bool InnerProductParameter::_internal_bias_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bias_term_;
}
inline void InnerProductParameter::_internal_set_bias_term(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bias_term_ = value;
}

// optional .opencv_caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline void InnerProductParameter::clear_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& InnerProductParameter::_internal_weight_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& InnerProductParameter::weight_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.weight_filler)
  return _internal_weight_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.InnerProductParameter.weight_filler)
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::unsafe_arena_release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.InnerProductParameter.weight_filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::_internal_mutable_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.weight_filler_;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.InnerProductParameter.weight_filler)
  return _msg;
}
inline void InnerProductParameter::set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.weight_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.InnerProductParameter.weight_filler)
}

// optional .opencv_caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void InnerProductParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::FillerParameter& InnerProductParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& InnerProductParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.bias_filler)
  return _internal_bias_filler();
}
inline void InnerProductParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.InnerProductParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.InnerProductParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.InnerProductParameter.bias_filler)
  return _msg;
}
inline void InnerProductParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void InnerProductParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.axis)
  return _internal_axis();
}
inline void InnerProductParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.InnerProductParameter.axis)
}
inline ::int32_t InnerProductParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void InnerProductParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.axis_ = value;
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InnerProductParameter::clear_transpose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transpose_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.InnerProductParameter.transpose)
  return _internal_transpose();
}
inline void InnerProductParameter::set_transpose(bool value) {
  _internal_set_transpose(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.InnerProductParameter.transpose)
}
inline bool InnerProductParameter::_internal_transpose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transpose_;
}
inline void InnerProductParameter::_internal_set_transpose(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.transpose_ = value;
}

// -------------------------------------------------------------------

// InputParameter

// repeated .opencv_caffe.BlobShape shape = 1;
inline int InputParameter::_internal_shape_size() const {
  return _internal_shape().size();
}
inline int InputParameter::shape_size() const {
  return _internal_shape_size();
}
inline void InputParameter::clear_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shape_.Clear();
}
inline ::opencv_caffe::BlobShape* InputParameter::mutable_shape(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.InputParameter.shape)
  return _internal_mutable_shape()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>* InputParameter::mutable_shape()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.InputParameter.shape)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_shape();
}
inline const ::opencv_caffe::BlobShape& InputParameter::shape(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.InputParameter.shape)
  return _internal_shape().Get(index);
}
inline ::opencv_caffe::BlobShape* InputParameter::add_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobShape* _add = _internal_mutable_shape()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.InputParameter.shape)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>& InputParameter::shape() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.InputParameter.shape)
  return _internal_shape();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>&
InputParameter::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shape_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobShape>*
InputParameter::_internal_mutable_shape() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LogParameter::clear_base() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LogParameter.base)
  return _internal_base();
}
inline void LogParameter::set_base(float value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LogParameter.base)
}
inline float LogParameter::_internal_base() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_;
}
inline void LogParameter::_internal_set_base(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_ = value;
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LogParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LogParameter.scale)
  return _internal_scale();
}
inline void LogParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LogParameter.scale)
}
inline float LogParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void LogParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LogParameter::clear_shift() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LogParameter.shift)
  return _internal_shift();
}
inline void LogParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LogParameter.shift)
}
inline float LogParameter::_internal_shift() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shift_;
}
inline void LogParameter::_internal_set_shift(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LRNParameter::clear_local_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_size_ = 5u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.local_size)
  return _internal_local_size();
}
inline void LRNParameter::set_local_size(::uint32_t value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.local_size)
}
inline ::uint32_t LRNParameter::_internal_local_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_size_;
}
inline void LRNParameter::_internal_set_local_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.local_size_ = value;
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LRNParameter::clear_alpha() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.alpha)
  return _internal_alpha();
}
inline void LRNParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.alpha)
}
inline float LRNParameter::_internal_alpha() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alpha_;
}
inline void LRNParameter::_internal_set_alpha(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alpha_ = value;
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LRNParameter::clear_beta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beta_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.beta)
  return _internal_beta();
}
inline void LRNParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.beta)
}
inline float LRNParameter::_internal_beta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beta_;
}
inline void LRNParameter::_internal_set_beta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.beta_ = value;
}

// optional .opencv_caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LRNParameter::clear_norm_region() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.norm_region_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.norm_region)
  return _internal_norm_region();
}
inline void LRNParameter::set_norm_region(::opencv_caffe::LRNParameter_NormRegion value) {
  _internal_set_norm_region(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.norm_region)
}
inline ::opencv_caffe::LRNParameter_NormRegion LRNParameter::_internal_norm_region() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::LRNParameter_NormRegion>(_impl_.norm_region_);
}
inline void LRNParameter::_internal_set_norm_region(::opencv_caffe::LRNParameter_NormRegion value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::LRNParameter_NormRegion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.norm_region_ = value;
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void LRNParameter::clear_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.k)
  return _internal_k();
}
inline void LRNParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.k)
}
inline float LRNParameter::_internal_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k_;
}
inline void LRNParameter::_internal_set_k(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.k_ = value;
}

// optional .opencv_caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LRNParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.LRNParameter.engine)
  return _internal_engine();
}
inline void LRNParameter::set_engine(::opencv_caffe::LRNParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.LRNParameter.engine)
}
inline ::opencv_caffe::LRNParameter_Engine LRNParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::LRNParameter_Engine>(_impl_.engine_);
}
inline void LRNParameter::_internal_set_engine(::opencv_caffe::LRNParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::LRNParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.engine_ = value;
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MemoryDataParameter::clear_batch_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MemoryDataParameter.batch_size)
  return _internal_batch_size();
}
inline void MemoryDataParameter::set_batch_size(::uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MemoryDataParameter.batch_size)
}
inline ::uint32_t MemoryDataParameter::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void MemoryDataParameter::_internal_set_batch_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.batch_size_ = value;
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MemoryDataParameter::clear_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MemoryDataParameter.channels)
  return _internal_channels();
}
inline void MemoryDataParameter::set_channels(::uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MemoryDataParameter.channels)
}
inline ::uint32_t MemoryDataParameter::_internal_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channels_;
}
inline void MemoryDataParameter::_internal_set_channels(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channels_ = value;
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MemoryDataParameter::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MemoryDataParameter.height)
  return _internal_height();
}
inline void MemoryDataParameter::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MemoryDataParameter.height)
}
inline ::uint32_t MemoryDataParameter::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void MemoryDataParameter::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MemoryDataParameter::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MemoryDataParameter.width)
  return _internal_width();
}
inline void MemoryDataParameter::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MemoryDataParameter.width)
}
inline ::uint32_t MemoryDataParameter::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void MemoryDataParameter::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.width_ = value;
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MVNParameter::clear_normalize_variance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.normalize_variance_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MVNParameter.normalize_variance)
  return _internal_normalize_variance();
}
inline void MVNParameter::set_normalize_variance(bool value) {
  _internal_set_normalize_variance(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MVNParameter.normalize_variance)
}
inline bool MVNParameter::_internal_normalize_variance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.normalize_variance_;
}
inline void MVNParameter::_internal_set_normalize_variance(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.normalize_variance_ = value;
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MVNParameter::clear_across_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.across_channels_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MVNParameter.across_channels)
  return _internal_across_channels();
}
inline void MVNParameter::set_across_channels(bool value) {
  _internal_set_across_channels(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MVNParameter.across_channels)
}
inline bool MVNParameter::_internal_across_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.across_channels_;
}
inline void MVNParameter::_internal_set_across_channels(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.across_channels_ = value;
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MVNParameter::clear_eps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eps_ = 1e-09f;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.MVNParameter.eps)
  return _internal_eps();
}
inline void MVNParameter::set_eps(float value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.MVNParameter.eps)
}
inline float MVNParameter::_internal_eps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eps_;
}
inline void MVNParameter::_internal_set_eps(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.eps_ = value;
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .opencv_caffe.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline void ParameterParameter::clear_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::BlobShape& ParameterParameter::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::BlobShape&>(::opencv_caffe::_BlobShape_default_instance_);
}
inline const ::opencv_caffe::BlobShape& ParameterParameter::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ParameterParameter.shape)
  return _internal_shape();
}
inline void ParameterParameter::unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ParameterParameter.shape)
}
inline ::opencv_caffe::BlobShape* ParameterParameter::release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::BlobShape* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::BlobShape* ParameterParameter::unsafe_arena_release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ParameterParameter.shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::opencv_caffe::BlobShape* ParameterParameter::_internal_mutable_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::BlobShape>(GetArena());
    _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(p);
  }
  return _impl_.shape_;
}
inline ::opencv_caffe::BlobShape* ParameterParameter::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ParameterParameter.shape)
  return _msg;
}
inline void ParameterParameter::set_allocated_shape(::opencv_caffe::BlobShape* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::BlobShape*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::BlobShape*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ParameterParameter.shape)
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .opencv_caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PoolingParameter::clear_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.pool)
  return _internal_pool();
}
inline void PoolingParameter::set_pool(::opencv_caffe::PoolingParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.pool)
}
inline ::opencv_caffe::PoolingParameter_PoolMethod PoolingParameter::_internal_pool() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::PoolingParameter_PoolMethod>(_impl_.pool_);
}
inline void PoolingParameter::_internal_set_pool(::opencv_caffe::PoolingParameter_PoolMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::PoolingParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pool_ = value;
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PoolingParameter::clear_pad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.pad)
  return _internal_pad();
}
inline void PoolingParameter::set_pad(::uint32_t value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.pad)
}
inline ::uint32_t PoolingParameter::_internal_pad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_;
}
inline void PoolingParameter::_internal_set_pad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pad_ = value;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void PoolingParameter::clear_pad_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.pad_h)
  return _internal_pad_h();
}
inline void PoolingParameter::set_pad_h(::uint32_t value) {
  _internal_set_pad_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.pad_h)
}
inline ::uint32_t PoolingParameter::_internal_pad_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_h_;
}
inline void PoolingParameter::_internal_set_pad_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pad_h_ = value;
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void PoolingParameter::clear_pad_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.pad_w)
  return _internal_pad_w();
}
inline void PoolingParameter::set_pad_w(::uint32_t value) {
  _internal_set_pad_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.pad_w)
}
inline ::uint32_t PoolingParameter::_internal_pad_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_w_;
}
inline void PoolingParameter::_internal_set_pad_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pad_w_ = value;
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PoolingParameter::clear_kernel_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.kernel_size)
  return _internal_kernel_size();
}
inline void PoolingParameter::set_kernel_size(::uint32_t value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.kernel_size)
}
inline ::uint32_t PoolingParameter::_internal_kernel_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_size_;
}
inline void PoolingParameter::_internal_set_kernel_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kernel_size_ = value;
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PoolingParameter::clear_kernel_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.kernel_h)
  return _internal_kernel_h();
}
inline void PoolingParameter::set_kernel_h(::uint32_t value) {
  _internal_set_kernel_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.kernel_h)
}
inline ::uint32_t PoolingParameter::_internal_kernel_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_h_;
}
inline void PoolingParameter::_internal_set_kernel_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kernel_h_ = value;
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PoolingParameter::clear_kernel_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernel_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.kernel_w)
  return _internal_kernel_w();
}
inline void PoolingParameter::set_kernel_w(::uint32_t value) {
  _internal_set_kernel_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.kernel_w)
}
inline ::uint32_t PoolingParameter::_internal_kernel_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernel_w_;
}
inline void PoolingParameter::_internal_set_kernel_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.kernel_w_ = value;
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void PoolingParameter::clear_stride() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.stride)
  return _internal_stride();
}
inline void PoolingParameter::set_stride(::uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.stride)
}
inline ::uint32_t PoolingParameter::_internal_stride() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_;
}
inline void PoolingParameter::_internal_set_stride(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.stride_ = value;
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void PoolingParameter::clear_stride_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.stride_h)
  return _internal_stride_h();
}
inline void PoolingParameter::set_stride_h(::uint32_t value) {
  _internal_set_stride_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.stride_h)
}
inline ::uint32_t PoolingParameter::_internal_stride_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_h_;
}
inline void PoolingParameter::_internal_set_stride_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stride_h_ = value;
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void PoolingParameter::clear_stride_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.stride_w)
  return _internal_stride_w();
}
inline void PoolingParameter::set_stride_w(::uint32_t value) {
  _internal_set_stride_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.stride_w)
}
inline ::uint32_t PoolingParameter::_internal_stride_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_w_;
}
inline void PoolingParameter::_internal_set_stride_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.stride_w_ = value;
}

// optional .opencv_caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void PoolingParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::opencv_caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.engine)
  return _internal_engine();
}
inline void PoolingParameter::set_engine(::opencv_caffe::PoolingParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.engine)
}
inline ::opencv_caffe::PoolingParameter_Engine PoolingParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::PoolingParameter_Engine>(_impl_.engine_);
}
inline void PoolingParameter::_internal_set_engine(::opencv_caffe::PoolingParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::PoolingParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.engine_ = value;
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void PoolingParameter::clear_global_pooling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.global_pooling_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.global_pooling)
  return _internal_global_pooling();
}
inline void PoolingParameter::set_global_pooling(bool value) {
  _internal_set_global_pooling(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.global_pooling)
}
inline bool PoolingParameter::_internal_global_pooling() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.global_pooling_;
}
inline void PoolingParameter::_internal_set_global_pooling(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.global_pooling_ = value;
}

// optional bool ceil_mode = 13 [default = true];
inline bool PoolingParameter::has_ceil_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void PoolingParameter::clear_ceil_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ceil_mode_ = true;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool PoolingParameter::ceil_mode() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PoolingParameter.ceil_mode)
  return _internal_ceil_mode();
}
inline void PoolingParameter::set_ceil_mode(bool value) {
  _internal_set_ceil_mode(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PoolingParameter.ceil_mode)
}
inline bool PoolingParameter::_internal_ceil_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ceil_mode_;
}
inline void PoolingParameter::_internal_set_ceil_mode(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ceil_mode_ = value;
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PowerParameter::clear_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.power_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PowerParameter.power)
  return _internal_power();
}
inline void PowerParameter::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PowerParameter.power)
}
inline float PowerParameter::_internal_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.power_;
}
inline void PowerParameter::_internal_set_power(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.power_ = value;
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PowerParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PowerParameter.scale)
  return _internal_scale();
}
inline void PowerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PowerParameter.scale)
}
inline float PowerParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void PowerParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scale_ = value;
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PowerParameter::clear_shift() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shift_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PowerParameter.shift)
  return _internal_shift();
}
inline void PowerParameter::set_shift(float value) {
  _internal_set_shift(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PowerParameter.shift)
}
inline float PowerParameter::_internal_shift() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shift_;
}
inline void PowerParameter::_internal_set_shift(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shift_ = value;
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PythonParameter::clear_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.module_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PythonParameter::module() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.PythonParameter.module)
  return _internal_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PythonParameter::set_module(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.module_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.module)
}
inline std::string* PythonParameter::mutable_module() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.PythonParameter.module)
  return _s;
}
inline const std::string& PythonParameter::_internal_module() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.module_.Get();
}
inline void PythonParameter::_internal_set_module(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.module_.Set(value, GetArena());
}
inline std::string* PythonParameter::_internal_mutable_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.module_.Mutable( GetArena());
}
inline std::string* PythonParameter::release_module() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.PythonParameter.module)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.module_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PythonParameter::set_allocated_module(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.module_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_.IsDefault()) {
          _impl_.module_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PythonParameter::clear_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.layer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PythonParameter::layer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.PythonParameter.layer)
  return _internal_layer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PythonParameter::set_layer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.layer)
}
inline std::string* PythonParameter::mutable_layer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.PythonParameter.layer)
  return _s;
}
inline const std::string& PythonParameter::_internal_layer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.layer_.Get();
}
inline void PythonParameter::_internal_set_layer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layer_.Set(value, GetArena());
}
inline std::string* PythonParameter::_internal_mutable_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.layer_.Mutable( GetArena());
}
inline std::string* PythonParameter::release_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.PythonParameter.layer)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.layer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.layer_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PythonParameter::set_allocated_layer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.layer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.layer_.IsDefault()) {
          _impl_.layer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PythonParameter::clear_param_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.param_str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PythonParameter::param_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.PythonParameter.param_str)
  return _internal_param_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PythonParameter::set_param_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.param_str)
}
inline std::string* PythonParameter::mutable_param_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_param_str();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.PythonParameter.param_str)
  return _s;
}
inline const std::string& PythonParameter::_internal_param_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_str_.Get();
}
inline void PythonParameter::_internal_set_param_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.param_str_.Set(value, GetArena());
}
inline std::string* PythonParameter::_internal_mutable_param_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.param_str_.Mutable( GetArena());
}
inline std::string* PythonParameter::release_param_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.PythonParameter.param_str)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.param_str_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.param_str_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PythonParameter::set_allocated_param_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.param_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.param_str_.IsDefault()) {
          _impl_.param_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PythonParameter::clear_share_in_parallel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.share_in_parallel_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PythonParameter.share_in_parallel)
  return _internal_share_in_parallel();
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  _internal_set_share_in_parallel(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PythonParameter.share_in_parallel)
}
inline bool PythonParameter::_internal_share_in_parallel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.share_in_parallel_;
}
inline void PythonParameter::_internal_set_share_in_parallel(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.share_in_parallel_ = value;
}

// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RecurrentParameter::clear_num_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.RecurrentParameter.num_output)
  return _internal_num_output();
}
inline void RecurrentParameter::set_num_output(::uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.RecurrentParameter.num_output)
}
inline ::uint32_t RecurrentParameter::_internal_num_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_;
}
inline void RecurrentParameter::_internal_set_num_output(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_output_ = value;
}

// optional .opencv_caffe.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline void RecurrentParameter::clear_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& RecurrentParameter::_internal_weight_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& RecurrentParameter::weight_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.RecurrentParameter.weight_filler)
  return _internal_weight_filler();
}
inline void RecurrentParameter::unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.RecurrentParameter.weight_filler)
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::unsafe_arena_release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.RecurrentParameter.weight_filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::_internal_mutable_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.weight_filler_;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.RecurrentParameter.weight_filler)
  return _msg;
}
inline void RecurrentParameter::set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.weight_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.RecurrentParameter.weight_filler)
}

// optional .opencv_caffe.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void RecurrentParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::FillerParameter& RecurrentParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& RecurrentParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.RecurrentParameter.bias_filler)
  return _internal_bias_filler();
}
inline void RecurrentParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.RecurrentParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.RecurrentParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.RecurrentParameter.bias_filler)
  return _msg;
}
inline void RecurrentParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::has_debug_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void RecurrentParameter::clear_debug_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.debug_info_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.RecurrentParameter.debug_info)
  return _internal_debug_info();
}
inline void RecurrentParameter::set_debug_info(bool value) {
  _internal_set_debug_info(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.RecurrentParameter.debug_info)
}
inline bool RecurrentParameter::_internal_debug_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.debug_info_;
}
inline void RecurrentParameter::_internal_set_debug_info(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.debug_info_ = value;
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::has_expose_hidden() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RecurrentParameter::clear_expose_hidden() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.expose_hidden_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.RecurrentParameter.expose_hidden)
  return _internal_expose_hidden();
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  _internal_set_expose_hidden(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.RecurrentParameter.expose_hidden)
}
inline bool RecurrentParameter::_internal_expose_hidden() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expose_hidden_;
}
inline void RecurrentParameter::_internal_set_expose_hidden(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.expose_hidden_ = value;
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .opencv_caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReductionParameter::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReductionParameter.operation)
  return _internal_operation();
}
inline void ReductionParameter::set_operation(::opencv_caffe::ReductionParameter_ReductionOp value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReductionParameter.operation)
}
inline ::opencv_caffe::ReductionParameter_ReductionOp ReductionParameter::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::ReductionParameter_ReductionOp>(_impl_.operation_);
}
inline void ReductionParameter::_internal_set_operation(::opencv_caffe::ReductionParameter_ReductionOp value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::ReductionParameter_ReductionOp_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operation_ = value;
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReductionParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReductionParameter.axis)
  return _internal_axis();
}
inline void ReductionParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReductionParameter.axis)
}
inline ::int32_t ReductionParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ReductionParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_ = value;
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ReductionParameter::clear_coeff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeff_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReductionParameter.coeff)
  return _internal_coeff();
}
inline void ReductionParameter::set_coeff(float value) {
  _internal_set_coeff(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReductionParameter.coeff)
}
inline float ReductionParameter::_internal_coeff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeff_;
}
inline void ReductionParameter::_internal_set_coeff(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.coeff_ = value;
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReLUParameter::clear_negative_slope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.negative_slope_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReLUParameter.negative_slope)
  return _internal_negative_slope();
}
inline void ReLUParameter::set_negative_slope(float value) {
  _internal_set_negative_slope(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReLUParameter.negative_slope)
}
inline float ReLUParameter::_internal_negative_slope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.negative_slope_;
}
inline void ReLUParameter::_internal_set_negative_slope(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.negative_slope_ = value;
}

// optional .opencv_caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReLUParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReLUParameter.engine)
  return _internal_engine();
}
inline void ReLUParameter::set_engine(::opencv_caffe::ReLUParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReLUParameter.engine)
}
inline ::opencv_caffe::ReLUParameter_Engine ReLUParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::ReLUParameter_Engine>(_impl_.engine_);
}
inline void ReLUParameter::_internal_set_engine(::opencv_caffe::ReLUParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::ReLUParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.engine_ = value;
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .opencv_caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_ != nullptr);
  return value;
}
inline void ReshapeParameter::clear_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.shape_ != nullptr) _impl_.shape_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::BlobShape& ReshapeParameter::_internal_shape() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::BlobShape* p = _impl_.shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::BlobShape&>(::opencv_caffe::_BlobShape_default_instance_);
}
inline const ::opencv_caffe::BlobShape& ReshapeParameter::shape() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReshapeParameter.shape)
  return _internal_shape();
}
inline void ReshapeParameter::unsafe_arena_set_allocated_shape(::opencv_caffe::BlobShape* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_);
  }
  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ReshapeParameter.shape)
}
inline ::opencv_caffe::BlobShape* ReshapeParameter::release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::BlobShape* released = _impl_.shape_;
  _impl_.shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::BlobShape* ReshapeParameter::unsafe_arena_release_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ReshapeParameter.shape)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::BlobShape* temp = _impl_.shape_;
  _impl_.shape_ = nullptr;
  return temp;
}
inline ::opencv_caffe::BlobShape* ReshapeParameter::_internal_mutable_shape() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::BlobShape>(GetArena());
    _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(p);
  }
  return _impl_.shape_;
}
inline ::opencv_caffe::BlobShape* ReshapeParameter::mutable_shape() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::BlobShape* _msg = _internal_mutable_shape();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ReshapeParameter.shape)
  return _msg;
}
inline void ReshapeParameter::set_allocated_shape(::opencv_caffe::BlobShape* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::BlobShape*>(_impl_.shape_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::BlobShape*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_ = reinterpret_cast<::opencv_caffe::BlobShape*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReshapeParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReshapeParameter.axis)
  return _internal_axis();
}
inline void ReshapeParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReshapeParameter.axis)
}
inline ::int32_t ReshapeParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ReshapeParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ReshapeParameter::clear_num_axes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_axes_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ReshapeParameter.num_axes)
  return _internal_num_axes();
}
inline void ReshapeParameter::set_num_axes(::int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ReshapeParameter.num_axes)
}
inline ::int32_t ReshapeParameter::_internal_num_axes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_axes_;
}
inline void ReshapeParameter::_internal_set_num_axes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_axes_ = value;
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ScaleParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ScaleParameter.axis)
  return _internal_axis();
}
inline void ScaleParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ScaleParameter.axis)
}
inline ::int32_t ScaleParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void ScaleParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.axis_ = value;
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ScaleParameter::clear_num_axes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_axes_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ScaleParameter.num_axes)
  return _internal_num_axes();
}
inline void ScaleParameter::set_num_axes(::int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ScaleParameter.num_axes)
}
inline ::int32_t ScaleParameter::_internal_num_axes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_axes_;
}
inline void ScaleParameter::_internal_set_num_axes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_axes_ = value;
}

// optional .opencv_caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline void ScaleParameter::clear_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& ScaleParameter::_internal_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& ScaleParameter::filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ScaleParameter.filler)
  return _internal_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ScaleParameter.filler)
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::unsafe_arena_release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ScaleParameter.filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::_internal_mutable_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.filler_;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::mutable_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ScaleParameter.filler)
  return _msg;
}
inline void ScaleParameter::set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ScaleParameter::clear_bias_term() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bias_term_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ScaleParameter.bias_term)
  return _internal_bias_term();
}
inline void ScaleParameter::set_bias_term(bool value) {
  _internal_set_bias_term(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ScaleParameter.bias_term)
}
inline bool ScaleParameter::_internal_bias_term() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bias_term_;
}
inline void ScaleParameter::_internal_set_bias_term(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.bias_term_ = value;
}

// optional .opencv_caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void ScaleParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::FillerParameter& ScaleParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& ScaleParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.ScaleParameter.bias_filler)
  return _internal_bias_filler();
}
inline void ScaleParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.ScaleParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.ScaleParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* ScaleParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.ScaleParameter.bias_filler)
  return _msg;
}
inline void ScaleParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .opencv_caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SigmoidParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SigmoidParameter.engine)
  return _internal_engine();
}
inline void SigmoidParameter::set_engine(::opencv_caffe::SigmoidParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SigmoidParameter.engine)
}
inline ::opencv_caffe::SigmoidParameter_Engine SigmoidParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SigmoidParameter_Engine>(_impl_.engine_);
}
inline void SigmoidParameter::_internal_set_engine(::opencv_caffe::SigmoidParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SigmoidParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SliceParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SliceParameter.axis)
  return _internal_axis();
}
inline void SliceParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SliceParameter.axis)
}
inline ::int32_t SliceParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void SliceParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::_internal_slice_point_size() const {
  return _internal_slice_point().size();
}
inline int SliceParameter::slice_point_size() const {
  return _internal_slice_point_size();
}
inline void SliceParameter::clear_slice_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slice_point_.Clear();
}
inline ::uint32_t SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SliceParameter.slice_point)
  return _internal_slice_point().Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::uint32_t value) {
  _internal_mutable_slice_point()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_slice_point()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& SliceParameter::slice_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.SliceParameter.slice_point)
  return _internal_slice_point();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* SliceParameter::mutable_slice_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.SliceParameter.slice_point)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_slice_point();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& SliceParameter::_internal_slice_point()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slice_point_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* SliceParameter::_internal_mutable_slice_point() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SliceParameter::clear_slice_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slice_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SliceParameter.slice_dim)
  return _internal_slice_dim();
}
inline void SliceParameter::set_slice_dim(::uint32_t value) {
  _internal_set_slice_dim(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SliceParameter.slice_dim)
}
inline ::uint32_t SliceParameter::_internal_slice_dim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slice_dim_;
}
inline void SliceParameter::_internal_set_slice_dim(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slice_dim_ = value;
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .opencv_caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SoftmaxParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SoftmaxParameter.engine)
  return _internal_engine();
}
inline void SoftmaxParameter::set_engine(::opencv_caffe::SoftmaxParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SoftmaxParameter.engine)
}
inline ::opencv_caffe::SoftmaxParameter_Engine SoftmaxParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SoftmaxParameter_Engine>(_impl_.engine_);
}
inline void SoftmaxParameter::_internal_set_engine(::opencv_caffe::SoftmaxParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SoftmaxParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SoftmaxParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SoftmaxParameter.axis)
  return _internal_axis();
}
inline void SoftmaxParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SoftmaxParameter.axis)
}
inline ::int32_t SoftmaxParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void SoftmaxParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// -------------------------------------------------------------------

// TanHParameter

// optional .opencv_caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TanHParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::opencv_caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TanHParameter.engine)
  return _internal_engine();
}
inline void TanHParameter::set_engine(::opencv_caffe::TanHParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TanHParameter.engine)
}
inline ::opencv_caffe::TanHParameter_Engine TanHParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::TanHParameter_Engine>(_impl_.engine_);
}
inline void TanHParameter::_internal_set_engine(::opencv_caffe::TanHParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::TanHParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.engine_ = value;
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void TileParameter::clear_axis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.axis_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TileParameter.axis)
  return _internal_axis();
}
inline void TileParameter::set_axis(::int32_t value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TileParameter.axis)
}
inline ::int32_t TileParameter::_internal_axis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.axis_;
}
inline void TileParameter::_internal_set_axis(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.axis_ = value;
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TileParameter::clear_tiles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tiles_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.TileParameter.tiles)
  return _internal_tiles();
}
inline void TileParameter::set_tiles(::int32_t value) {
  _internal_set_tiles(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.TileParameter.tiles)
}
inline ::int32_t TileParameter::_internal_tiles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tiles_;
}
inline void TileParameter::_internal_set_tiles(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tiles_ = value;
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ThresholdParameter::clear_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ThresholdParameter.threshold)
  return _internal_threshold();
}
inline void ThresholdParameter::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ThresholdParameter.threshold)
}
inline float ThresholdParameter::_internal_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.threshold_;
}
inline void ThresholdParameter::_internal_set_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.threshold_ = value;
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void WindowDataParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WindowDataParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowDataParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.source)
}
inline std::string* WindowDataParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.WindowDataParameter.source)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void WindowDataParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* WindowDataParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* WindowDataParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.WindowDataParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WindowDataParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void WindowDataParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.scale)
  return _internal_scale();
}
inline void WindowDataParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.scale)
}
inline float WindowDataParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void WindowDataParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.scale_ = value;
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void WindowDataParameter::clear_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mean_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WindowDataParameter::mean_file() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.mean_file)
  return _internal_mean_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowDataParameter::set_mean_file(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.mean_file)
}
inline std::string* WindowDataParameter::mutable_mean_file() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mean_file();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.WindowDataParameter.mean_file)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_mean_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mean_file_.Get();
}
inline void WindowDataParameter::_internal_set_mean_file(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mean_file_.Set(value, GetArena());
}
inline std::string* WindowDataParameter::_internal_mutable_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mean_file_.Mutable( GetArena());
}
inline std::string* WindowDataParameter::release_mean_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.WindowDataParameter.mean_file)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mean_file_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mean_file_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WindowDataParameter::set_allocated_mean_file(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mean_file_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mean_file_.IsDefault()) {
          _impl_.mean_file_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void WindowDataParameter::clear_batch_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.batch_size)
  return _internal_batch_size();
}
inline void WindowDataParameter::set_batch_size(::uint32_t value) {
  _internal_set_batch_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.batch_size)
}
inline ::uint32_t WindowDataParameter::_internal_batch_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_size_;
}
inline void WindowDataParameter::_internal_set_batch_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.batch_size_ = value;
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void WindowDataParameter::clear_crop_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crop_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.crop_size)
  return _internal_crop_size();
}
inline void WindowDataParameter::set_crop_size(::uint32_t value) {
  _internal_set_crop_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.crop_size)
}
inline ::uint32_t WindowDataParameter::_internal_crop_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crop_size_;
}
inline void WindowDataParameter::_internal_set_crop_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.crop_size_ = value;
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void WindowDataParameter::clear_mirror() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.mirror)
  return _internal_mirror();
}
inline void WindowDataParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.mirror)
}
inline bool WindowDataParameter::_internal_mirror() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mirror_;
}
inline void WindowDataParameter::_internal_set_mirror(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mirror_ = value;
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void WindowDataParameter::clear_fg_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fg_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.fg_threshold)
  return _internal_fg_threshold();
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  _internal_set_fg_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.fg_threshold)
}
inline float WindowDataParameter::_internal_fg_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fg_threshold_;
}
inline void WindowDataParameter::_internal_set_fg_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.fg_threshold_ = value;
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void WindowDataParameter::clear_bg_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bg_threshold_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.bg_threshold)
  return _internal_bg_threshold();
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  _internal_set_bg_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.bg_threshold)
}
inline float WindowDataParameter::_internal_bg_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bg_threshold_;
}
inline void WindowDataParameter::_internal_set_bg_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bg_threshold_ = value;
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void WindowDataParameter::clear_fg_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fg_fraction_ = 0.25f;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.fg_fraction)
  return _internal_fg_fraction();
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  _internal_set_fg_fraction(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.fg_fraction)
}
inline float WindowDataParameter::_internal_fg_fraction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fg_fraction_;
}
inline void WindowDataParameter::_internal_set_fg_fraction(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fg_fraction_ = value;
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void WindowDataParameter::clear_context_pad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.context_pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.context_pad)
  return _internal_context_pad();
}
inline void WindowDataParameter::set_context_pad(::uint32_t value) {
  _internal_set_context_pad(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.context_pad)
}
inline ::uint32_t WindowDataParameter::_internal_context_pad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.context_pad_;
}
inline void WindowDataParameter::_internal_set_context_pad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.context_pad_ = value;
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void WindowDataParameter::clear_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.crop_mode_.ClearToDefault(::opencv_caffe::WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WindowDataParameter::crop_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.crop_mode)
  if (_impl_.crop_mode_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_crop_mode_.get();
  }
  return _internal_crop_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowDataParameter::set_crop_mode(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crop_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.crop_mode)
}
inline std::string* WindowDataParameter::mutable_crop_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crop_mode();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.WindowDataParameter.crop_mode)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_crop_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.crop_mode_.Get();
}
inline void WindowDataParameter::_internal_set_crop_mode(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.crop_mode_.Set(value, GetArena());
}
inline std::string* WindowDataParameter::_internal_mutable_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.crop_mode_.Mutable(::opencv_caffe::WindowDataParameter::Impl_::_i_give_permission_to_break_this_code_default_crop_mode_, GetArena());
}
inline std::string* WindowDataParameter::release_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.WindowDataParameter.crop_mode)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  return _impl_.crop_mode_.Release();
}
inline void WindowDataParameter::set_allocated_crop_mode(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.crop_mode_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void WindowDataParameter::clear_cache_images() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cache_images_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.cache_images)
  return _internal_cache_images();
}
inline void WindowDataParameter::set_cache_images(bool value) {
  _internal_set_cache_images(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.cache_images)
}
inline bool WindowDataParameter::_internal_cache_images() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cache_images_;
}
inline void WindowDataParameter::_internal_set_cache_images(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cache_images_ = value;
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void WindowDataParameter::clear_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.root_folder_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& WindowDataParameter::root_folder() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.WindowDataParameter.root_folder)
  return _internal_root_folder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WindowDataParameter::set_root_folder(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.root_folder_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.WindowDataParameter.root_folder)
}
inline std::string* WindowDataParameter::mutable_root_folder() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_root_folder();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.WindowDataParameter.root_folder)
  return _s;
}
inline const std::string& WindowDataParameter::_internal_root_folder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.root_folder_.Get();
}
inline void WindowDataParameter::_internal_set_root_folder(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.root_folder_.Set(value, GetArena());
}
inline std::string* WindowDataParameter::_internal_mutable_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.root_folder_.Mutable( GetArena());
}
inline std::string* WindowDataParameter::release_root_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.WindowDataParameter.root_folder)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.root_folder_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.root_folder_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void WindowDataParameter::set_allocated_root_folder(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.root_folder_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.root_folder_.IsDefault()) {
          _impl_.root_folder_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SPPParameter::clear_pyramid_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pyramid_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SPPParameter.pyramid_height)
  return _internal_pyramid_height();
}
inline void SPPParameter::set_pyramid_height(::uint32_t value) {
  _internal_set_pyramid_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SPPParameter.pyramid_height)
}
inline ::uint32_t SPPParameter::_internal_pyramid_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pyramid_height_;
}
inline void SPPParameter::_internal_set_pyramid_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pyramid_height_ = value;
}

// optional .opencv_caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SPPParameter::clear_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::opencv_caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SPPParameter.pool)
  return _internal_pool();
}
inline void SPPParameter::set_pool(::opencv_caffe::SPPParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SPPParameter.pool)
}
inline ::opencv_caffe::SPPParameter_PoolMethod SPPParameter::_internal_pool() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SPPParameter_PoolMethod>(_impl_.pool_);
}
inline void SPPParameter::_internal_set_pool(::opencv_caffe::SPPParameter_PoolMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SPPParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pool_ = value;
}

// optional .opencv_caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SPPParameter::clear_engine() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.engine_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::opencv_caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.SPPParameter.engine)
  return _internal_engine();
}
inline void SPPParameter::set_engine(::opencv_caffe::SPPParameter_Engine value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.SPPParameter.engine)
}
inline ::opencv_caffe::SPPParameter_Engine SPPParameter::_internal_engine() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::SPPParameter_Engine>(_impl_.engine_);
}
inline void SPPParameter::_internal_set_engine(::opencv_caffe::SPPParameter_Engine value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::SPPParameter_Engine_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.engine_ = value;
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::_internal_bottom_size() const {
  return _internal_bottom().size();
}
inline int V1LayerParameter::bottom_size() const {
  return _internal_bottom_size();
}
inline void V1LayerParameter::clear_bottom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bottom_.Clear();
}
inline std::string* V1LayerParameter::add_bottom()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_bottom()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.V1LayerParameter.bottom)
  return _s;
}
inline const std::string& V1LayerParameter::bottom(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.bottom)
  return _internal_bottom().Get(index);
}
inline std::string* V1LayerParameter::mutable_bottom(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.bottom)
  return _internal_mutable_bottom()->Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const std::string& value) {
  _internal_mutable_bottom()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, std::string&& value) {
  _internal_mutable_bottom()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_bottom()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_bottom()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, absl::string_view value) {
  _internal_mutable_bottom()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_bottom()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::bottom() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.bottom)
  return _internal_bottom();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_bottom() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.bottom)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bottom();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::_internal_bottom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bottom_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::_internal_mutable_bottom() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::_internal_top_size() const {
  return _internal_top().size();
}
inline int V1LayerParameter::top_size() const {
  return _internal_top_size();
}
inline void V1LayerParameter::clear_top() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.top_.Clear();
}
inline std::string* V1LayerParameter::add_top()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_top()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.V1LayerParameter.top)
  return _s;
}
inline const std::string& V1LayerParameter::top(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.top)
  return _internal_top().Get(index);
}
inline std::string* V1LayerParameter::mutable_top(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.top)
  return _internal_mutable_top()->Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const std::string& value) {
  _internal_mutable_top()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, std::string&& value) {
  _internal_mutable_top()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_top()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_top()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, absl::string_view value) {
  _internal_mutable_top()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_top()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::top() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.top)
  return _internal_top();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_top() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.top)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_top();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::_internal_top() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.top_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::_internal_mutable_top() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void V1LayerParameter::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V1LayerParameter::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V1LayerParameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.name)
}
inline std::string* V1LayerParameter::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.name)
  return _s;
}
inline const std::string& V1LayerParameter::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void V1LayerParameter::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* V1LayerParameter::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* V1LayerParameter::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void V1LayerParameter::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.name)
}

// repeated .opencv_caffe.NetStateRule include = 32;
inline int V1LayerParameter::_internal_include_size() const {
  return _internal_include().size();
}
inline int V1LayerParameter::include_size() const {
  return _internal_include_size();
}
inline void V1LayerParameter::clear_include() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_.Clear();
}
inline ::opencv_caffe::NetStateRule* V1LayerParameter::mutable_include(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.include)
  return _internal_mutable_include()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* V1LayerParameter::mutable_include()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.include)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_include();
}
inline const ::opencv_caffe::NetStateRule& V1LayerParameter::include(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.include)
  return _internal_include().Get(index);
}
inline ::opencv_caffe::NetStateRule* V1LayerParameter::add_include() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetStateRule* _add = _internal_mutable_include()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.include)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& V1LayerParameter::include() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.include)
  return _internal_include();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>&
V1LayerParameter::_internal_include() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>*
V1LayerParameter::_internal_mutable_include() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.include_;
}

// repeated .opencv_caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::_internal_exclude_size() const {
  return _internal_exclude().size();
}
inline int V1LayerParameter::exclude_size() const {
  return _internal_exclude_size();
}
inline void V1LayerParameter::clear_exclude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exclude_.Clear();
}
inline ::opencv_caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.exclude)
  return _internal_mutable_exclude()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>* V1LayerParameter::mutable_exclude()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.exclude)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exclude();
}
inline const ::opencv_caffe::NetStateRule& V1LayerParameter::exclude(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.exclude)
  return _internal_exclude().Get(index);
}
inline ::opencv_caffe::NetStateRule* V1LayerParameter::add_exclude() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::NetStateRule* _add = _internal_mutable_exclude()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.exclude)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>& V1LayerParameter::exclude() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.exclude)
  return _internal_exclude();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>&
V1LayerParameter::_internal_exclude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exclude_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::NetStateRule>*
V1LayerParameter::_internal_mutable_exclude() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exclude_;
}

// optional .opencv_caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void V1LayerParameter::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::opencv_caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.type)
  return _internal_type();
}
inline void V1LayerParameter::set_type(::opencv_caffe::V1LayerParameter_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.type)
}
inline ::opencv_caffe::V1LayerParameter_LayerType V1LayerParameter::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::V1LayerParameter_LayerType>(_impl_.type_);
}
inline void V1LayerParameter::_internal_set_type(::opencv_caffe::V1LayerParameter_LayerType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::V1LayerParameter_LayerType_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.type_ = value;
}

// repeated .opencv_caffe.BlobProto blobs = 6;
inline int V1LayerParameter::_internal_blobs_size() const {
  return _internal_blobs().size();
}
inline int V1LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V1LayerParameter::clear_blobs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_.Clear();
}
inline ::opencv_caffe::BlobProto* V1LayerParameter::mutable_blobs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.blobs)
  return _internal_mutable_blobs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* V1LayerParameter::mutable_blobs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.blobs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs();
}
inline const ::opencv_caffe::BlobProto& V1LayerParameter::blobs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.blobs)
  return _internal_blobs().Get(index);
}
inline ::opencv_caffe::BlobProto* V1LayerParameter::add_blobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobProto* _add = _internal_mutable_blobs()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.blobs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& V1LayerParameter::blobs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.blobs)
  return _internal_blobs();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>&
V1LayerParameter::_internal_blobs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>*
V1LayerParameter::_internal_mutable_blobs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::_internal_param_size() const {
  return _internal_param().size();
}
inline int V1LayerParameter::param_size() const {
  return _internal_param_size();
}
inline void V1LayerParameter::clear_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.param_.Clear();
}
inline std::string* V1LayerParameter::add_param()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_param()->Add();
  // @@protoc_insertion_point(field_add_mutable:opencv_caffe.V1LayerParameter.param)
  return _s;
}
inline const std::string& V1LayerParameter::param(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.param)
  return _internal_param().Get(index);
}
inline std::string* V1LayerParameter::mutable_param(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.param)
  return _internal_mutable_param()->Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const std::string& value) {
  _internal_mutable_param()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, std::string&& value) {
  _internal_mutable_param()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_param()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_param()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, absl::string_view value) {
  _internal_mutable_param()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_param()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_param()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_param()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_param()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:opencv_caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_param()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:opencv_caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.param)
  return _internal_param();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::mutable_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.param)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_param();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
V1LayerParameter::_internal_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.param_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
V1LayerParameter::_internal_mutable_param() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.param_;
}

// repeated .opencv_caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::_internal_blob_share_mode_size() const {
  return _internal_blob_share_mode().size();
}
inline int V1LayerParameter::blob_share_mode_size() const {
  return _internal_blob_share_mode_size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blob_share_mode_.Clear();
}
inline ::opencv_caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.blob_share_mode)
  return static_cast<::opencv_caffe::V1LayerParameter_DimCheckMode>(_internal_blob_share_mode().Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::opencv_caffe::V1LayerParameter_DimCheckMode value) {
  assert(::opencv_caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  _internal_mutable_blob_share_mode()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::opencv_caffe::V1LayerParameter_DimCheckMode value) {
  assert(::opencv_caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blob_share_mode()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>& V1LayerParameter::blob_share_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.blob_share_mode)
  return _internal_blob_share_mode();
}
inline ::google::protobuf::RepeatedField<int>* V1LayerParameter::mutable_blob_share_mode()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.blob_share_mode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blob_share_mode();
}
inline const ::google::protobuf::RepeatedField<int>& V1LayerParameter::_internal_blob_share_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>* V1LayerParameter::_internal_mutable_blob_share_mode() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::_internal_blobs_lr_size() const {
  return _internal_blobs_lr().size();
}
inline int V1LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr().Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  _internal_mutable_blobs_lr()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blobs_lr()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::blobs_lr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::mutable_blobs_lr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.blobs_lr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs_lr();
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::_internal_blobs_lr()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_lr_;
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::_internal_mutable_blobs_lr() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::_internal_weight_decay_size() const {
  return _internal_weight_decay().size();
}
inline int V1LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V1LayerParameter::clear_weight_decay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.weight_decay)
  return _internal_weight_decay().Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  _internal_mutable_weight_decay()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_weight_decay()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::weight_decay() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::mutable_weight_decay()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.weight_decay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_weight_decay();
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::_internal_weight_decay()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weight_decay_;
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::_internal_mutable_weight_decay() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::_internal_loss_weight_size() const {
  return _internal_loss_weight().size();
}
inline int V1LayerParameter::loss_weight_size() const {
  return _internal_loss_weight_size();
}
inline void V1LayerParameter::clear_loss_weight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.loss_weight)
  return _internal_loss_weight().Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  _internal_mutable_loss_weight()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_loss_weight()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::loss_weight() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V1LayerParameter.loss_weight)
  return _internal_loss_weight();
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::mutable_loss_weight()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V1LayerParameter.loss_weight)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_loss_weight();
}
inline const ::google::protobuf::RepeatedField<float>& V1LayerParameter::_internal_loss_weight()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.loss_weight_;
}
inline ::google::protobuf::RepeatedField<float>* V1LayerParameter::_internal_mutable_loss_weight() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.loss_weight_;
}

// optional .opencv_caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accuracy_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.accuracy_param_ != nullptr) _impl_.accuracy_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::opencv_caffe::AccuracyParameter& V1LayerParameter::_internal_accuracy_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::AccuracyParameter* p = _impl_.accuracy_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::AccuracyParameter&>(::opencv_caffe::_AccuracyParameter_default_instance_);
}
inline const ::opencv_caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.accuracy_param)
  return _internal_accuracy_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.accuracy_param_);
  }
  _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.accuracy_param)
}
inline ::opencv_caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::opencv_caffe::AccuracyParameter* released = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::AccuracyParameter* V1LayerParameter::unsafe_arena_release_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.accuracy_param)

  _impl_._has_bits_[0] &= ~0x00100000u;
  ::opencv_caffe::AccuracyParameter* temp = _impl_.accuracy_param_;
  _impl_.accuracy_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::AccuracyParameter* V1LayerParameter::_internal_mutable_accuracy_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.accuracy_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::AccuracyParameter>(GetArena());
    _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(p);
  }
  return _impl_.accuracy_param_;
}
inline ::opencv_caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::AccuracyParameter* _msg = _internal_mutable_accuracy_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.accuracy_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::opencv_caffe::AccuracyParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::AccuracyParameter*>(_impl_.accuracy_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }

  _impl_.accuracy_param_ = reinterpret_cast<::opencv_caffe::AccuracyParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.accuracy_param)
}

// optional .opencv_caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.argmax_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.argmax_param_ != nullptr) _impl_.argmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::opencv_caffe::ArgMaxParameter& V1LayerParameter::_internal_argmax_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ArgMaxParameter* p = _impl_.argmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ArgMaxParameter&>(::opencv_caffe::_ArgMaxParameter_default_instance_);
}
inline const ::opencv_caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.argmax_param)
  return _internal_argmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.argmax_param_);
  }
  _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.argmax_param)
}
inline ::opencv_caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::opencv_caffe::ArgMaxParameter* released = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ArgMaxParameter* V1LayerParameter::unsafe_arena_release_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.argmax_param)

  _impl_._has_bits_[0] &= ~0x00010000u;
  ::opencv_caffe::ArgMaxParameter* temp = _impl_.argmax_param_;
  _impl_.argmax_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ArgMaxParameter* V1LayerParameter::_internal_mutable_argmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.argmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ArgMaxParameter>(GetArena());
    _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(p);
  }
  return _impl_.argmax_param_;
}
inline ::opencv_caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ArgMaxParameter* _msg = _internal_mutable_argmax_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.argmax_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_argmax_param(::opencv_caffe::ArgMaxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(_impl_.argmax_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }

  _impl_.argmax_param_ = reinterpret_cast<::opencv_caffe::ArgMaxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.argmax_param)
}

// optional .opencv_caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.concat_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.concat_param_ != nullptr) _impl_.concat_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::opencv_caffe::ConcatParameter& V1LayerParameter::_internal_concat_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ConcatParameter* p = _impl_.concat_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ConcatParameter&>(::opencv_caffe::_ConcatParameter_default_instance_);
}
inline const ::opencv_caffe::ConcatParameter& V1LayerParameter::concat_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.concat_param)
  return _internal_concat_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_concat_param(::opencv_caffe::ConcatParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.concat_param_);
  }
  _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.concat_param)
}
inline ::opencv_caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::opencv_caffe::ConcatParameter* released = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ConcatParameter* V1LayerParameter::unsafe_arena_release_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.concat_param)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::opencv_caffe::ConcatParameter* temp = _impl_.concat_param_;
  _impl_.concat_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ConcatParameter* V1LayerParameter::_internal_mutable_concat_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.concat_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ConcatParameter>(GetArena());
    _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(p);
  }
  return _impl_.concat_param_;
}
inline ::opencv_caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ConcatParameter* _msg = _internal_mutable_concat_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.concat_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_concat_param(::opencv_caffe::ConcatParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ConcatParameter*>(_impl_.concat_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.concat_param_ = reinterpret_cast<::opencv_caffe::ConcatParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.concat_param)
}

// optional .opencv_caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contrastive_loss_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.contrastive_loss_param_ != nullptr) _impl_.contrastive_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::opencv_caffe::ContrastiveLossParameter& V1LayerParameter::_internal_contrastive_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ContrastiveLossParameter* p = _impl_.contrastive_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ContrastiveLossParameter&>(::opencv_caffe::_ContrastiveLossParameter_default_instance_);
}
inline const ::opencv_caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.contrastive_loss_param)
  return _internal_contrastive_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.contrastive_loss_param_);
  }
  _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.contrastive_loss_param)
}
inline ::opencv_caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::opencv_caffe::ContrastiveLossParameter* released = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ContrastiveLossParameter* V1LayerParameter::unsafe_arena_release_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.contrastive_loss_param)

  _impl_._has_bits_[0] &= ~0x20000000u;
  ::opencv_caffe::ContrastiveLossParameter* temp = _impl_.contrastive_loss_param_;
  _impl_.contrastive_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ContrastiveLossParameter* V1LayerParameter::_internal_mutable_contrastive_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.contrastive_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ContrastiveLossParameter>(GetArena());
    _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(p);
  }
  return _impl_.contrastive_loss_param_;
}
inline ::opencv_caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ContrastiveLossParameter* _msg = _internal_mutable_contrastive_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.contrastive_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::opencv_caffe::ContrastiveLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(_impl_.contrastive_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }

  _impl_.contrastive_loss_param_ = reinterpret_cast<::opencv_caffe::ContrastiveLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .opencv_caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convolution_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.convolution_param_ != nullptr) _impl_.convolution_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::opencv_caffe::ConvolutionParameter& V1LayerParameter::_internal_convolution_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ConvolutionParameter* p = _impl_.convolution_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ConvolutionParameter&>(::opencv_caffe::_ConvolutionParameter_default_instance_);
}
inline const ::opencv_caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.convolution_param)
  return _internal_convolution_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convolution_param_);
  }
  _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.convolution_param)
}
inline ::opencv_caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::opencv_caffe::ConvolutionParameter* released = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ConvolutionParameter* V1LayerParameter::unsafe_arena_release_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.convolution_param)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::opencv_caffe::ConvolutionParameter* temp = _impl_.convolution_param_;
  _impl_.convolution_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ConvolutionParameter* V1LayerParameter::_internal_mutable_convolution_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.convolution_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ConvolutionParameter>(GetArena());
    _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(p);
  }
  return _impl_.convolution_param_;
}
inline ::opencv_caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ConvolutionParameter* _msg = _internal_mutable_convolution_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.convolution_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_convolution_param(::opencv_caffe::ConvolutionParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(_impl_.convolution_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.convolution_param_ = reinterpret_cast<::opencv_caffe::ConvolutionParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.convolution_param)
}

// optional .opencv_caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.data_param_ != nullptr) _impl_.data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::opencv_caffe::DataParameter& V1LayerParameter::_internal_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DataParameter* p = _impl_.data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DataParameter&>(::opencv_caffe::_DataParameter_default_instance_);
}
inline const ::opencv_caffe::DataParameter& V1LayerParameter::data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.data_param)
  return _internal_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_data_param(::opencv_caffe::DataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_param_);
  }
  _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.data_param)
}
inline ::opencv_caffe::DataParameter* V1LayerParameter::release_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::opencv_caffe::DataParameter* released = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DataParameter* V1LayerParameter::unsafe_arena_release_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.data_param)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::opencv_caffe::DataParameter* temp = _impl_.data_param_;
  _impl_.data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DataParameter* V1LayerParameter::_internal_mutable_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DataParameter>(GetArena());
    _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(p);
  }
  return _impl_.data_param_;
}
inline ::opencv_caffe::DataParameter* V1LayerParameter::mutable_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DataParameter* _msg = _internal_mutable_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_data_param(::opencv_caffe::DataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DataParameter*>(_impl_.data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.data_param_ = reinterpret_cast<::opencv_caffe::DataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.data_param)
}

// optional .opencv_caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dropout_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dropout_param_ != nullptr) _impl_.dropout_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::opencv_caffe::DropoutParameter& V1LayerParameter::_internal_dropout_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DropoutParameter* p = _impl_.dropout_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DropoutParameter&>(::opencv_caffe::_DropoutParameter_default_instance_);
}
inline const ::opencv_caffe::DropoutParameter& V1LayerParameter::dropout_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.dropout_param)
  return _internal_dropout_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dropout_param_);
  }
  _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.dropout_param)
}
inline ::opencv_caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::DropoutParameter* released = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DropoutParameter* V1LayerParameter::unsafe_arena_release_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.dropout_param)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::DropoutParameter* temp = _impl_.dropout_param_;
  _impl_.dropout_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DropoutParameter* V1LayerParameter::_internal_mutable_dropout_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dropout_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DropoutParameter>(GetArena());
    _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(p);
  }
  return _impl_.dropout_param_;
}
inline ::opencv_caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DropoutParameter* _msg = _internal_mutable_dropout_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.dropout_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_dropout_param(::opencv_caffe::DropoutParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DropoutParameter*>(_impl_.dropout_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.dropout_param_ = reinterpret_cast<::opencv_caffe::DropoutParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.dropout_param)
}

// optional .opencv_caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dummy_data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dummy_data_param_ != nullptr) _impl_.dummy_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::opencv_caffe::DummyDataParameter& V1LayerParameter::_internal_dummy_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::DummyDataParameter* p = _impl_.dummy_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::DummyDataParameter&>(::opencv_caffe::_DummyDataParameter_default_instance_);
}
inline const ::opencv_caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.dummy_data_param)
  return _internal_dummy_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dummy_data_param_);
  }
  _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.dummy_data_param)
}
inline ::opencv_caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::opencv_caffe::DummyDataParameter* released = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::DummyDataParameter* V1LayerParameter::unsafe_arena_release_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.dummy_data_param)

  _impl_._has_bits_[0] &= ~0x00080000u;
  ::opencv_caffe::DummyDataParameter* temp = _impl_.dummy_data_param_;
  _impl_.dummy_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::DummyDataParameter* V1LayerParameter::_internal_mutable_dummy_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.dummy_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::DummyDataParameter>(GetArena());
    _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(p);
  }
  return _impl_.dummy_data_param_;
}
inline ::opencv_caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::DummyDataParameter* _msg = _internal_mutable_dummy_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.dummy_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::opencv_caffe::DummyDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::DummyDataParameter*>(_impl_.dummy_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }

  _impl_.dummy_data_param_ = reinterpret_cast<::opencv_caffe::DummyDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.dummy_data_param)
}

// optional .opencv_caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eltwise_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.eltwise_param_ != nullptr) _impl_.eltwise_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::opencv_caffe::EltwiseParameter& V1LayerParameter::_internal_eltwise_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::EltwiseParameter* p = _impl_.eltwise_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::EltwiseParameter&>(::opencv_caffe::_EltwiseParameter_default_instance_);
}
inline const ::opencv_caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.eltwise_param)
  return _internal_eltwise_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.eltwise_param_);
  }
  _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.eltwise_param)
}
inline ::opencv_caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::opencv_caffe::EltwiseParameter* released = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::EltwiseParameter* V1LayerParameter::unsafe_arena_release_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.eltwise_param)

  _impl_._has_bits_[0] &= ~0x00020000u;
  ::opencv_caffe::EltwiseParameter* temp = _impl_.eltwise_param_;
  _impl_.eltwise_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::EltwiseParameter* V1LayerParameter::_internal_mutable_eltwise_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.eltwise_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::EltwiseParameter>(GetArena());
    _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(p);
  }
  return _impl_.eltwise_param_;
}
inline ::opencv_caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::EltwiseParameter* _msg = _internal_mutable_eltwise_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.eltwise_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::opencv_caffe::EltwiseParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::EltwiseParameter*>(_impl_.eltwise_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }

  _impl_.eltwise_param_ = reinterpret_cast<::opencv_caffe::EltwiseParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.eltwise_param)
}

// optional .opencv_caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.exp_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.exp_param_ != nullptr) _impl_.exp_param_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::opencv_caffe::ExpParameter& V1LayerParameter::_internal_exp_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ExpParameter* p = _impl_.exp_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ExpParameter&>(::opencv_caffe::_ExpParameter_default_instance_);
}
inline const ::opencv_caffe::ExpParameter& V1LayerParameter::exp_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.exp_param)
  return _internal_exp_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_exp_param(::opencv_caffe::ExpParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.exp_param_);
  }
  _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.exp_param)
}
inline ::opencv_caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::opencv_caffe::ExpParameter* released = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ExpParameter* V1LayerParameter::unsafe_arena_release_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.exp_param)

  _impl_._has_bits_[0] &= ~0x40000000u;
  ::opencv_caffe::ExpParameter* temp = _impl_.exp_param_;
  _impl_.exp_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ExpParameter* V1LayerParameter::_internal_mutable_exp_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.exp_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ExpParameter>(GetArena());
    _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(p);
  }
  return _impl_.exp_param_;
}
inline ::opencv_caffe::ExpParameter* V1LayerParameter::mutable_exp_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ExpParameter* _msg = _internal_mutable_exp_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.exp_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_exp_param(::opencv_caffe::ExpParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ExpParameter*>(_impl_.exp_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ExpParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }

  _impl_.exp_param_ = reinterpret_cast<::opencv_caffe::ExpParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.exp_param)
}

// optional .opencv_caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hdf5_data_param_ != nullptr) _impl_.hdf5_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::opencv_caffe::HDF5DataParameter& V1LayerParameter::_internal_hdf5_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HDF5DataParameter* p = _impl_.hdf5_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HDF5DataParameter&>(::opencv_caffe::_HDF5DataParameter_default_instance_);
}
inline const ::opencv_caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.hdf5_data_param)
  return _internal_hdf5_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hdf5_data_param_);
  }
  _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.hdf5_data_param)
}
inline ::opencv_caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::HDF5DataParameter* released = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HDF5DataParameter* V1LayerParameter::unsafe_arena_release_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.hdf5_data_param)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::HDF5DataParameter* temp = _impl_.hdf5_data_param_;
  _impl_.hdf5_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HDF5DataParameter* V1LayerParameter::_internal_mutable_hdf5_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.hdf5_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HDF5DataParameter>(GetArena());
    _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(p);
  }
  return _impl_.hdf5_data_param_;
}
inline ::opencv_caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HDF5DataParameter* _msg = _internal_mutable_hdf5_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.hdf5_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::opencv_caffe::HDF5DataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(_impl_.hdf5_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.hdf5_data_param_ = reinterpret_cast<::opencv_caffe::HDF5DataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.hdf5_data_param)
}

// optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::opencv_caffe::HDF5OutputParameter& V1LayerParameter::_internal_hdf5_output_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HDF5OutputParameter&>(::opencv_caffe::_HDF5OutputParameter_default_instance_);
}
inline const ::opencv_caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.hdf5_output_param)
}
inline ::opencv_caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::HDF5OutputParameter* released = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HDF5OutputParameter* V1LayerParameter::unsafe_arena_release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.hdf5_output_param)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HDF5OutputParameter* V1LayerParameter::_internal_mutable_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HDF5OutputParameter>(GetArena());
    _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(p);
  }
  return _impl_.hdf5_output_param_;
}
inline ::opencv_caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.hdf5_output_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(_impl_.hdf5_output_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.hdf5_output_param)
}

// optional .opencv_caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hinge_loss_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hinge_loss_param_ != nullptr) _impl_.hinge_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::opencv_caffe::HingeLossParameter& V1LayerParameter::_internal_hinge_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HingeLossParameter* p = _impl_.hinge_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HingeLossParameter&>(::opencv_caffe::_HingeLossParameter_default_instance_);
}
inline const ::opencv_caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.hinge_loss_param)
  return _internal_hinge_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hinge_loss_param_);
  }
  _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.hinge_loss_param)
}
inline ::opencv_caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::opencv_caffe::HingeLossParameter* released = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HingeLossParameter* V1LayerParameter::unsafe_arena_release_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.hinge_loss_param)

  _impl_._has_bits_[0] &= ~0x00200000u;
  ::opencv_caffe::HingeLossParameter* temp = _impl_.hinge_loss_param_;
  _impl_.hinge_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HingeLossParameter* V1LayerParameter::_internal_mutable_hinge_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.hinge_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HingeLossParameter>(GetArena());
    _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(p);
  }
  return _impl_.hinge_loss_param_;
}
inline ::opencv_caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HingeLossParameter* _msg = _internal_mutable_hinge_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.hinge_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::opencv_caffe::HingeLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HingeLossParameter*>(_impl_.hinge_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }

  _impl_.hinge_loss_param_ = reinterpret_cast<::opencv_caffe::HingeLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.hinge_loss_param)
}

// optional .opencv_caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.image_data_param_ != nullptr) _impl_.image_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::opencv_caffe::ImageDataParameter& V1LayerParameter::_internal_image_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ImageDataParameter* p = _impl_.image_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ImageDataParameter&>(::opencv_caffe::_ImageDataParameter_default_instance_);
}
inline const ::opencv_caffe::ImageDataParameter& V1LayerParameter::image_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.image_data_param)
  return _internal_image_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.image_data_param_);
  }
  _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.image_data_param)
}
inline ::opencv_caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::ImageDataParameter* released = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ImageDataParameter* V1LayerParameter::unsafe_arena_release_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.image_data_param)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::opencv_caffe::ImageDataParameter* temp = _impl_.image_data_param_;
  _impl_.image_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ImageDataParameter* V1LayerParameter::_internal_mutable_image_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.image_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ImageDataParameter>(GetArena());
    _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(p);
  }
  return _impl_.image_data_param_;
}
inline ::opencv_caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ImageDataParameter* _msg = _internal_mutable_image_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.image_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_image_data_param(::opencv_caffe::ImageDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ImageDataParameter*>(_impl_.image_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.image_data_param_ = reinterpret_cast<::opencv_caffe::ImageDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.image_data_param)
}

// optional .opencv_caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.infogain_loss_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.infogain_loss_param_ != nullptr) _impl_.infogain_loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::opencv_caffe::InfogainLossParameter& V1LayerParameter::_internal_infogain_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::InfogainLossParameter* p = _impl_.infogain_loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::InfogainLossParameter&>(::opencv_caffe::_InfogainLossParameter_default_instance_);
}
inline const ::opencv_caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.infogain_loss_param)
  return _internal_infogain_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.infogain_loss_param_);
  }
  _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.infogain_loss_param)
}
inline ::opencv_caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::opencv_caffe::InfogainLossParameter* released = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::InfogainLossParameter* V1LayerParameter::unsafe_arena_release_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.infogain_loss_param)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::opencv_caffe::InfogainLossParameter* temp = _impl_.infogain_loss_param_;
  _impl_.infogain_loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::InfogainLossParameter* V1LayerParameter::_internal_mutable_infogain_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.infogain_loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::InfogainLossParameter>(GetArena());
    _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(p);
  }
  return _impl_.infogain_loss_param_;
}
inline ::opencv_caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::InfogainLossParameter* _msg = _internal_mutable_infogain_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.infogain_loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::opencv_caffe::InfogainLossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(_impl_.infogain_loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.infogain_loss_param_ = reinterpret_cast<::opencv_caffe::InfogainLossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.infogain_loss_param)
}

// optional .opencv_caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.inner_product_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.inner_product_param_ != nullptr) _impl_.inner_product_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::opencv_caffe::InnerProductParameter& V1LayerParameter::_internal_inner_product_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::InnerProductParameter* p = _impl_.inner_product_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::InnerProductParameter&>(::opencv_caffe::_InnerProductParameter_default_instance_);
}
inline const ::opencv_caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.inner_product_param)
  return _internal_inner_product_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.inner_product_param_);
  }
  _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.inner_product_param)
}
inline ::opencv_caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::opencv_caffe::InnerProductParameter* released = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::InnerProductParameter* V1LayerParameter::unsafe_arena_release_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.inner_product_param)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::opencv_caffe::InnerProductParameter* temp = _impl_.inner_product_param_;
  _impl_.inner_product_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::InnerProductParameter* V1LayerParameter::_internal_mutable_inner_product_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.inner_product_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::InnerProductParameter>(GetArena());
    _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(p);
  }
  return _impl_.inner_product_param_;
}
inline ::opencv_caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::InnerProductParameter* _msg = _internal_mutable_inner_product_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.inner_product_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::opencv_caffe::InnerProductParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::InnerProductParameter*>(_impl_.inner_product_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.inner_product_param_ = reinterpret_cast<::opencv_caffe::InnerProductParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.inner_product_param)
}

// optional .opencv_caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lrn_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.lrn_param_ != nullptr) _impl_.lrn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::opencv_caffe::LRNParameter& V1LayerParameter::_internal_lrn_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::LRNParameter* p = _impl_.lrn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::LRNParameter&>(::opencv_caffe::_LRNParameter_default_instance_);
}
inline const ::opencv_caffe::LRNParameter& V1LayerParameter::lrn_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.lrn_param)
  return _internal_lrn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_lrn_param(::opencv_caffe::LRNParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lrn_param_);
  }
  _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.lrn_param)
}
inline ::opencv_caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::opencv_caffe::LRNParameter* released = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::LRNParameter* V1LayerParameter::unsafe_arena_release_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.lrn_param)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::opencv_caffe::LRNParameter* temp = _impl_.lrn_param_;
  _impl_.lrn_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::LRNParameter* V1LayerParameter::_internal_mutable_lrn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.lrn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::LRNParameter>(GetArena());
    _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(p);
  }
  return _impl_.lrn_param_;
}
inline ::opencv_caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::LRNParameter* _msg = _internal_mutable_lrn_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.lrn_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_lrn_param(::opencv_caffe::LRNParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::LRNParameter*>(_impl_.lrn_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::LRNParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.lrn_param_ = reinterpret_cast<::opencv_caffe::LRNParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.lrn_param)
}

// optional .opencv_caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.memory_data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.memory_data_param_ != nullptr) _impl_.memory_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::opencv_caffe::MemoryDataParameter& V1LayerParameter::_internal_memory_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::MemoryDataParameter* p = _impl_.memory_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::MemoryDataParameter&>(::opencv_caffe::_MemoryDataParameter_default_instance_);
}
inline const ::opencv_caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.memory_data_param)
  return _internal_memory_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.memory_data_param_);
  }
  _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.memory_data_param)
}
inline ::opencv_caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::opencv_caffe::MemoryDataParameter* released = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::MemoryDataParameter* V1LayerParameter::unsafe_arena_release_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.memory_data_param)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::opencv_caffe::MemoryDataParameter* temp = _impl_.memory_data_param_;
  _impl_.memory_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::MemoryDataParameter* V1LayerParameter::_internal_mutable_memory_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.memory_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::MemoryDataParameter>(GetArena());
    _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(p);
  }
  return _impl_.memory_data_param_;
}
inline ::opencv_caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::MemoryDataParameter* _msg = _internal_mutable_memory_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.memory_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::opencv_caffe::MemoryDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(_impl_.memory_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.memory_data_param_ = reinterpret_cast<::opencv_caffe::MemoryDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.memory_data_param)
}

// optional .opencv_caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mvn_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.mvn_param_ != nullptr) _impl_.mvn_param_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::opencv_caffe::MVNParameter& V1LayerParameter::_internal_mvn_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::MVNParameter* p = _impl_.mvn_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::MVNParameter&>(::opencv_caffe::_MVNParameter_default_instance_);
}
inline const ::opencv_caffe::MVNParameter& V1LayerParameter::mvn_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.mvn_param)
  return _internal_mvn_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_mvn_param(::opencv_caffe::MVNParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mvn_param_);
  }
  _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.mvn_param)
}
inline ::opencv_caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::opencv_caffe::MVNParameter* released = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::MVNParameter* V1LayerParameter::unsafe_arena_release_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.mvn_param)

  _impl_._has_bits_[0] &= ~0x01000000u;
  ::opencv_caffe::MVNParameter* temp = _impl_.mvn_param_;
  _impl_.mvn_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::MVNParameter* V1LayerParameter::_internal_mutable_mvn_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.mvn_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::MVNParameter>(GetArena());
    _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(p);
  }
  return _impl_.mvn_param_;
}
inline ::opencv_caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::MVNParameter* _msg = _internal_mutable_mvn_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.mvn_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_mvn_param(::opencv_caffe::MVNParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::MVNParameter*>(_impl_.mvn_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::MVNParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }

  _impl_.mvn_param_ = reinterpret_cast<::opencv_caffe::MVNParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.mvn_param)
}

// optional .opencv_caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pooling_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pooling_param_ != nullptr) _impl_.pooling_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::opencv_caffe::PoolingParameter& V1LayerParameter::_internal_pooling_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PoolingParameter* p = _impl_.pooling_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PoolingParameter&>(::opencv_caffe::_PoolingParameter_default_instance_);
}
inline const ::opencv_caffe::PoolingParameter& V1LayerParameter::pooling_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.pooling_param)
  return _internal_pooling_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pooling_param_);
  }
  _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.pooling_param)
}
inline ::opencv_caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::opencv_caffe::PoolingParameter* released = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PoolingParameter* V1LayerParameter::unsafe_arena_release_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.pooling_param)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::opencv_caffe::PoolingParameter* temp = _impl_.pooling_param_;
  _impl_.pooling_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PoolingParameter* V1LayerParameter::_internal_mutable_pooling_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.pooling_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PoolingParameter>(GetArena());
    _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(p);
  }
  return _impl_.pooling_param_;
}
inline ::opencv_caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PoolingParameter* _msg = _internal_mutable_pooling_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.pooling_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_pooling_param(::opencv_caffe::PoolingParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PoolingParameter*>(_impl_.pooling_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.pooling_param_ = reinterpret_cast<::opencv_caffe::PoolingParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.pooling_param)
}

// optional .opencv_caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.power_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.power_param_ != nullptr) _impl_.power_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::opencv_caffe::PowerParameter& V1LayerParameter::_internal_power_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::PowerParameter* p = _impl_.power_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::PowerParameter&>(::opencv_caffe::_PowerParameter_default_instance_);
}
inline const ::opencv_caffe::PowerParameter& V1LayerParameter::power_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.power_param)
  return _internal_power_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_power_param(::opencv_caffe::PowerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.power_param_);
  }
  _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.power_param)
}
inline ::opencv_caffe::PowerParameter* V1LayerParameter::release_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::opencv_caffe::PowerParameter* released = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::PowerParameter* V1LayerParameter::unsafe_arena_release_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.power_param)

  _impl_._has_bits_[0] &= ~0x00004000u;
  ::opencv_caffe::PowerParameter* temp = _impl_.power_param_;
  _impl_.power_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::PowerParameter* V1LayerParameter::_internal_mutable_power_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.power_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::PowerParameter>(GetArena());
    _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(p);
  }
  return _impl_.power_param_;
}
inline ::opencv_caffe::PowerParameter* V1LayerParameter::mutable_power_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::PowerParameter* _msg = _internal_mutable_power_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.power_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_power_param(::opencv_caffe::PowerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::PowerParameter*>(_impl_.power_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::PowerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }

  _impl_.power_param_ = reinterpret_cast<::opencv_caffe::PowerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.power_param)
}

// optional .opencv_caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relu_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.relu_param_ != nullptr) _impl_.relu_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::opencv_caffe::ReLUParameter& V1LayerParameter::_internal_relu_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ReLUParameter* p = _impl_.relu_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ReLUParameter&>(::opencv_caffe::_ReLUParameter_default_instance_);
}
inline const ::opencv_caffe::ReLUParameter& V1LayerParameter::relu_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.relu_param)
  return _internal_relu_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_relu_param(::opencv_caffe::ReLUParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.relu_param_);
  }
  _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.relu_param)
}
inline ::opencv_caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::opencv_caffe::ReLUParameter* released = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ReLUParameter* V1LayerParameter::unsafe_arena_release_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.relu_param)

  _impl_._has_bits_[0] &= ~0x00400000u;
  ::opencv_caffe::ReLUParameter* temp = _impl_.relu_param_;
  _impl_.relu_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ReLUParameter* V1LayerParameter::_internal_mutable_relu_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.relu_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ReLUParameter>(GetArena());
    _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(p);
  }
  return _impl_.relu_param_;
}
inline ::opencv_caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ReLUParameter* _msg = _internal_mutable_relu_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.relu_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_relu_param(::opencv_caffe::ReLUParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ReLUParameter*>(_impl_.relu_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }

  _impl_.relu_param_ = reinterpret_cast<::opencv_caffe::ReLUParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.relu_param)
}

// optional .opencv_caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sigmoid_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sigmoid_param_ != nullptr) _impl_.sigmoid_param_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const ::opencv_caffe::SigmoidParameter& V1LayerParameter::_internal_sigmoid_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SigmoidParameter* p = _impl_.sigmoid_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SigmoidParameter&>(::opencv_caffe::_SigmoidParameter_default_instance_);
}
inline const ::opencv_caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.sigmoid_param)
  return _internal_sigmoid_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sigmoid_param_);
  }
  _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.sigmoid_param)
}
inline ::opencv_caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x08000000u;
  ::opencv_caffe::SigmoidParameter* released = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SigmoidParameter* V1LayerParameter::unsafe_arena_release_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.sigmoid_param)

  _impl_._has_bits_[0] &= ~0x08000000u;
  ::opencv_caffe::SigmoidParameter* temp = _impl_.sigmoid_param_;
  _impl_.sigmoid_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SigmoidParameter* V1LayerParameter::_internal_mutable_sigmoid_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.sigmoid_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SigmoidParameter>(GetArena());
    _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(p);
  }
  return _impl_.sigmoid_param_;
}
inline ::opencv_caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SigmoidParameter* _msg = _internal_mutable_sigmoid_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.sigmoid_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::opencv_caffe::SigmoidParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SigmoidParameter*>(_impl_.sigmoid_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }

  _impl_.sigmoid_param_ = reinterpret_cast<::opencv_caffe::SigmoidParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.sigmoid_param)
}

// optional .opencv_caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.softmax_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.softmax_param_ != nullptr) _impl_.softmax_param_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const ::opencv_caffe::SoftmaxParameter& V1LayerParameter::_internal_softmax_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SoftmaxParameter* p = _impl_.softmax_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SoftmaxParameter&>(::opencv_caffe::_SoftmaxParameter_default_instance_);
}
inline const ::opencv_caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.softmax_param)
  return _internal_softmax_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.softmax_param_);
  }
  _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.softmax_param)
}
inline ::opencv_caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x10000000u;
  ::opencv_caffe::SoftmaxParameter* released = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SoftmaxParameter* V1LayerParameter::unsafe_arena_release_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.softmax_param)

  _impl_._has_bits_[0] &= ~0x10000000u;
  ::opencv_caffe::SoftmaxParameter* temp = _impl_.softmax_param_;
  _impl_.softmax_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SoftmaxParameter* V1LayerParameter::_internal_mutable_softmax_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.softmax_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SoftmaxParameter>(GetArena());
    _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(p);
  }
  return _impl_.softmax_param_;
}
inline ::opencv_caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SoftmaxParameter* _msg = _internal_mutable_softmax_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.softmax_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_softmax_param(::opencv_caffe::SoftmaxParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(_impl_.softmax_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }

  _impl_.softmax_param_ = reinterpret_cast<::opencv_caffe::SoftmaxParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.softmax_param)
}

// optional .opencv_caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slice_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.slice_param_ != nullptr) _impl_.slice_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::opencv_caffe::SliceParameter& V1LayerParameter::_internal_slice_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::SliceParameter* p = _impl_.slice_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::SliceParameter&>(::opencv_caffe::_SliceParameter_default_instance_);
}
inline const ::opencv_caffe::SliceParameter& V1LayerParameter::slice_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.slice_param)
  return _internal_slice_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_slice_param(::opencv_caffe::SliceParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.slice_param_);
  }
  _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.slice_param)
}
inline ::opencv_caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::opencv_caffe::SliceParameter* released = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::SliceParameter* V1LayerParameter::unsafe_arena_release_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.slice_param)

  _impl_._has_bits_[0] &= ~0x00800000u;
  ::opencv_caffe::SliceParameter* temp = _impl_.slice_param_;
  _impl_.slice_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::SliceParameter* V1LayerParameter::_internal_mutable_slice_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.slice_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::SliceParameter>(GetArena());
    _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(p);
  }
  return _impl_.slice_param_;
}
inline ::opencv_caffe::SliceParameter* V1LayerParameter::mutable_slice_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::SliceParameter* _msg = _internal_mutable_slice_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.slice_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_slice_param(::opencv_caffe::SliceParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::SliceParameter*>(_impl_.slice_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::SliceParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }

  _impl_.slice_param_ = reinterpret_cast<::opencv_caffe::SliceParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.slice_param)
}

// optional .opencv_caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tanh_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tanh_param_ != nullptr) _impl_.tanh_param_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::opencv_caffe::TanHParameter& V1LayerParameter::_internal_tanh_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::TanHParameter* p = _impl_.tanh_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::TanHParameter&>(::opencv_caffe::_TanHParameter_default_instance_);
}
inline const ::opencv_caffe::TanHParameter& V1LayerParameter::tanh_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.tanh_param)
  return _internal_tanh_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_tanh_param(::opencv_caffe::TanHParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tanh_param_);
  }
  _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.tanh_param)
}
inline ::opencv_caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x04000000u;
  ::opencv_caffe::TanHParameter* released = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::TanHParameter* V1LayerParameter::unsafe_arena_release_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.tanh_param)

  _impl_._has_bits_[0] &= ~0x04000000u;
  ::opencv_caffe::TanHParameter* temp = _impl_.tanh_param_;
  _impl_.tanh_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::TanHParameter* V1LayerParameter::_internal_mutable_tanh_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.tanh_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::TanHParameter>(GetArena());
    _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(p);
  }
  return _impl_.tanh_param_;
}
inline ::opencv_caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::TanHParameter* _msg = _internal_mutable_tanh_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.tanh_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_tanh_param(::opencv_caffe::TanHParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::TanHParameter*>(_impl_.tanh_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::TanHParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }

  _impl_.tanh_param_ = reinterpret_cast<::opencv_caffe::TanHParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.tanh_param)
}

// optional .opencv_caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.threshold_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.threshold_param_ != nullptr) _impl_.threshold_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::opencv_caffe::ThresholdParameter& V1LayerParameter::_internal_threshold_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::ThresholdParameter* p = _impl_.threshold_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::ThresholdParameter&>(::opencv_caffe::_ThresholdParameter_default_instance_);
}
inline const ::opencv_caffe::ThresholdParameter& V1LayerParameter::threshold_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.threshold_param)
  return _internal_threshold_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.threshold_param_);
  }
  _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.threshold_param)
}
inline ::opencv_caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::opencv_caffe::ThresholdParameter* released = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::ThresholdParameter* V1LayerParameter::unsafe_arena_release_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.threshold_param)

  _impl_._has_bits_[0] &= ~0x00040000u;
  ::opencv_caffe::ThresholdParameter* temp = _impl_.threshold_param_;
  _impl_.threshold_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::ThresholdParameter* V1LayerParameter::_internal_mutable_threshold_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.threshold_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::ThresholdParameter>(GetArena());
    _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(p);
  }
  return _impl_.threshold_param_;
}
inline ::opencv_caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::ThresholdParameter* _msg = _internal_mutable_threshold_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.threshold_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_threshold_param(::opencv_caffe::ThresholdParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::ThresholdParameter*>(_impl_.threshold_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }

  _impl_.threshold_param_ = reinterpret_cast<::opencv_caffe::ThresholdParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.threshold_param)
}

// optional .opencv_caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.window_data_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.window_data_param_ != nullptr) _impl_.window_data_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::opencv_caffe::WindowDataParameter& V1LayerParameter::_internal_window_data_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::WindowDataParameter* p = _impl_.window_data_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::WindowDataParameter&>(::opencv_caffe::_WindowDataParameter_default_instance_);
}
inline const ::opencv_caffe::WindowDataParameter& V1LayerParameter::window_data_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.window_data_param)
  return _internal_window_data_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.window_data_param_);
  }
  _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.window_data_param)
}
inline ::opencv_caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::opencv_caffe::WindowDataParameter* released = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::WindowDataParameter* V1LayerParameter::unsafe_arena_release_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.window_data_param)

  _impl_._has_bits_[0] &= ~0x00002000u;
  ::opencv_caffe::WindowDataParameter* temp = _impl_.window_data_param_;
  _impl_.window_data_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::WindowDataParameter* V1LayerParameter::_internal_mutable_window_data_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.window_data_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::WindowDataParameter>(GetArena());
    _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(p);
  }
  return _impl_.window_data_param_;
}
inline ::opencv_caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::WindowDataParameter* _msg = _internal_mutable_window_data_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.window_data_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_window_data_param(::opencv_caffe::WindowDataParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::WindowDataParameter*>(_impl_.window_data_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }

  _impl_.window_data_param_ = reinterpret_cast<::opencv_caffe::WindowDataParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.window_data_param)
}

// optional .opencv_caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_param_ != nullptr) _impl_.transform_param_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::opencv_caffe::TransformationParameter& V1LayerParameter::_internal_transform_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::TransformationParameter* p = _impl_.transform_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::TransformationParameter&>(::opencv_caffe::_TransformationParameter_default_instance_);
}
inline const ::opencv_caffe::TransformationParameter& V1LayerParameter::transform_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.transform_param)
  return _internal_transform_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_transform_param(::opencv_caffe::TransformationParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.transform_param_);
  }
  _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.transform_param)
}
inline ::opencv_caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x02000000u;
  ::opencv_caffe::TransformationParameter* released = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::TransformationParameter* V1LayerParameter::unsafe_arena_release_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.transform_param)

  _impl_._has_bits_[0] &= ~0x02000000u;
  ::opencv_caffe::TransformationParameter* temp = _impl_.transform_param_;
  _impl_.transform_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::TransformationParameter* V1LayerParameter::_internal_mutable_transform_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.transform_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::TransformationParameter>(GetArena());
    _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(p);
  }
  return _impl_.transform_param_;
}
inline ::opencv_caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::TransformationParameter* _msg = _internal_mutable_transform_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.transform_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_transform_param(::opencv_caffe::TransformationParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::TransformationParameter*>(_impl_.transform_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }

  _impl_.transform_param_ = reinterpret_cast<::opencv_caffe::TransformationParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.transform_param)
}

// optional .opencv_caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loss_param_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.loss_param_ != nullptr) _impl_.loss_param_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const ::opencv_caffe::LossParameter& V1LayerParameter::_internal_loss_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::LossParameter* p = _impl_.loss_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::LossParameter&>(::opencv_caffe::_LossParameter_default_instance_);
}
inline const ::opencv_caffe::LossParameter& V1LayerParameter::loss_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.loss_param)
  return _internal_loss_param();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_loss_param(::opencv_caffe::LossParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.loss_param_);
  }
  _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.loss_param)
}
inline ::opencv_caffe::LossParameter* V1LayerParameter::release_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x80000000u;
  ::opencv_caffe::LossParameter* released = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::LossParameter* V1LayerParameter::unsafe_arena_release_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.loss_param)

  _impl_._has_bits_[0] &= ~0x80000000u;
  ::opencv_caffe::LossParameter* temp = _impl_.loss_param_;
  _impl_.loss_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::LossParameter* V1LayerParameter::_internal_mutable_loss_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.loss_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::LossParameter>(GetArena());
    _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(p);
  }
  return _impl_.loss_param_;
}
inline ::opencv_caffe::LossParameter* V1LayerParameter::mutable_loss_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::LossParameter* _msg = _internal_mutable_loss_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.loss_param)
  return _msg;
}
inline void V1LayerParameter::set_allocated_loss_param(::opencv_caffe::LossParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::LossParameter*>(_impl_.loss_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::LossParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }

  _impl_.loss_param_ = reinterpret_cast<::opencv_caffe::LossParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.loss_param)
}

// optional .opencv_caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.layer_ != nullptr);
  return value;
}
inline void V1LayerParameter::clear_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.layer_ != nullptr) _impl_.layer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::opencv_caffe::V0LayerParameter& V1LayerParameter::_internal_layer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::V0LayerParameter* p = _impl_.layer_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::V0LayerParameter&>(::opencv_caffe::_V0LayerParameter_default_instance_);
}
inline const ::opencv_caffe::V0LayerParameter& V1LayerParameter::layer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V1LayerParameter.layer)
  return _internal_layer();
}
inline void V1LayerParameter::unsafe_arena_set_allocated_layer(::opencv_caffe::V0LayerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.layer_);
  }
  _impl_.layer_ = reinterpret_cast<::opencv_caffe::V0LayerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V1LayerParameter.layer)
}
inline ::opencv_caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::V0LayerParameter* released = _impl_.layer_;
  _impl_.layer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::V0LayerParameter* V1LayerParameter::unsafe_arena_release_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V1LayerParameter.layer)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::opencv_caffe::V0LayerParameter* temp = _impl_.layer_;
  _impl_.layer_ = nullptr;
  return temp;
}
inline ::opencv_caffe::V0LayerParameter* V1LayerParameter::_internal_mutable_layer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::V0LayerParameter>(GetArena());
    _impl_.layer_ = reinterpret_cast<::opencv_caffe::V0LayerParameter*>(p);
  }
  return _impl_.layer_;
}
inline ::opencv_caffe::V0LayerParameter* V1LayerParameter::mutable_layer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::V0LayerParameter* _msg = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V1LayerParameter.layer)
  return _msg;
}
inline void V1LayerParameter::set_allocated_layer(::opencv_caffe::V0LayerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::V0LayerParameter*>(_impl_.layer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::V0LayerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.layer_ = reinterpret_cast<::opencv_caffe::V0LayerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void V0LayerParameter::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V0LayerParameter::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V0LayerParameter::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.name)
}
inline std::string* V0LayerParameter::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.name)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void V0LayerParameter::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* V0LayerParameter::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* V0LayerParameter::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void V0LayerParameter::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void V0LayerParameter::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& V0LayerParameter::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V0LayerParameter::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.type)
}
inline std::string* V0LayerParameter::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.type)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void V0LayerParameter::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* V0LayerParameter::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* V0LayerParameter::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.type)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void V0LayerParameter::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void V0LayerParameter::clear_num_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.num_output)
  return _internal_num_output();
}
inline void V0LayerParameter::set_num_output(::uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.num_output)
}
inline ::uint32_t V0LayerParameter::_internal_num_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_output_;
}
inline void V0LayerParameter::_internal_set_num_output(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.num_output_ = value;
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_biasterm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.biasterm_ = true;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.biasterm)
  return _internal_biasterm();
}
inline void V0LayerParameter::set_biasterm(bool value) {
  _internal_set_biasterm(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.biasterm)
}
inline bool V0LayerParameter::_internal_biasterm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.biasterm_;
}
inline void V0LayerParameter::_internal_set_biasterm(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.biasterm_ = value;
}

// optional .opencv_caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weight_filler_ != nullptr);
  return value;
}
inline void V0LayerParameter::clear_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.weight_filler_ != nullptr) _impl_.weight_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::opencv_caffe::FillerParameter& V0LayerParameter::_internal_weight_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.weight_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& V0LayerParameter::weight_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.weight_filler)
  return _internal_weight_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weight_filler_);
  }
  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V0LayerParameter.weight_filler)
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::FillerParameter* released = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::unsafe_arena_release_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.weight_filler)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::opencv_caffe::FillerParameter* temp = _impl_.weight_filler_;
  _impl_.weight_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::_internal_mutable_weight_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.weight_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.weight_filler_;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_weight_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.weight_filler)
  return _msg;
}
inline void V0LayerParameter::set_allocated_weight_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.weight_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.weight_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.weight_filler)
}

// optional .opencv_caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bias_filler_ != nullptr);
  return value;
}
inline void V0LayerParameter::clear_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bias_filler_ != nullptr) _impl_.bias_filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::opencv_caffe::FillerParameter& V0LayerParameter::_internal_bias_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.bias_filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& V0LayerParameter::bias_filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.bias_filler)
  return _internal_bias_filler();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bias_filler_);
  }
  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V0LayerParameter.bias_filler)
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::FillerParameter* released = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::unsafe_arena_release_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.bias_filler)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::opencv_caffe::FillerParameter* temp = _impl_.bias_filler_;
  _impl_.bias_filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::_internal_mutable_bias_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.bias_filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.bias_filler_;
}
inline ::opencv_caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_bias_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.bias_filler)
  return _msg;
}
inline void V0LayerParameter::set_allocated_bias_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.bias_filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.bias_filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void V0LayerParameter::clear_pad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.pad)
  return _internal_pad();
}
inline void V0LayerParameter::set_pad(::uint32_t value) {
  _internal_set_pad(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.pad)
}
inline ::uint32_t V0LayerParameter::_internal_pad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pad_;
}
inline void V0LayerParameter::_internal_set_pad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.pad_ = value;
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void V0LayerParameter::clear_kernelsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.kernelsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.kernelsize)
  return _internal_kernelsize();
}
inline void V0LayerParameter::set_kernelsize(::uint32_t value) {
  _internal_set_kernelsize(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.kernelsize)
}
inline ::uint32_t V0LayerParameter::_internal_kernelsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.kernelsize_;
}
inline void V0LayerParameter::_internal_set_kernelsize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.kernelsize_ = value;
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_group() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.group_ = 1u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.group)
  return _internal_group();
}
inline void V0LayerParameter::set_group(::uint32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.group)
}
inline ::uint32_t V0LayerParameter::_internal_group() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_;
}
inline void V0LayerParameter::_internal_set_group(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.group_ = value;
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_stride() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stride_ = 1u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint32_t V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.stride)
  return _internal_stride();
}
inline void V0LayerParameter::set_stride(::uint32_t value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.stride)
}
inline ::uint32_t V0LayerParameter::_internal_stride() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stride_;
}
inline void V0LayerParameter::_internal_set_stride(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.stride_ = value;
}

// optional .opencv_caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void V0LayerParameter::clear_pool() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pool_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::opencv_caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.pool)
  return _internal_pool();
}
inline void V0LayerParameter::set_pool(::opencv_caffe::V0LayerParameter_PoolMethod value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.pool)
}
inline ::opencv_caffe::V0LayerParameter_PoolMethod V0LayerParameter::_internal_pool() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::opencv_caffe::V0LayerParameter_PoolMethod>(_impl_.pool_);
}
inline void V0LayerParameter::_internal_set_pool(::opencv_caffe::V0LayerParameter_PoolMethod value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::opencv_caffe::V0LayerParameter_PoolMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.pool_ = value;
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dropout_ratio_ = 0.5f;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.dropout_ratio)
  return _internal_dropout_ratio();
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  _internal_set_dropout_ratio(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.dropout_ratio)
}
inline float V0LayerParameter::_internal_dropout_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dropout_ratio_;
}
inline void V0LayerParameter::_internal_set_dropout_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.dropout_ratio_ = value;
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_local_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_size_ = 5u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::uint32_t V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.local_size)
  return _internal_local_size();
}
inline void V0LayerParameter::set_local_size(::uint32_t value) {
  _internal_set_local_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.local_size)
}
inline ::uint32_t V0LayerParameter::_internal_local_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.local_size_;
}
inline void V0LayerParameter::_internal_set_local_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.local_size_ = value;
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_alpha() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.alpha_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.alpha)
  return _internal_alpha();
}
inline void V0LayerParameter::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.alpha)
}
inline float V0LayerParameter::_internal_alpha() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.alpha_;
}
inline void V0LayerParameter::_internal_set_alpha(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.alpha_ = value;
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_beta() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.beta_ = 0.75f;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.beta)
  return _internal_beta();
}
inline void V0LayerParameter::set_beta(float value) {
  _internal_set_beta(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.beta)
}
inline float V0LayerParameter::_internal_beta() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.beta_;
}
inline void V0LayerParameter::_internal_set_beta(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.beta_ = value;
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k_ = 1;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.k)
  return _internal_k();
}
inline void V0LayerParameter::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.k)
}
inline float V0LayerParameter::_internal_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k_;
}
inline void V0LayerParameter::_internal_set_k(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.k_ = value;
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void V0LayerParameter::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& V0LayerParameter::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V0LayerParameter::set_source(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.source)
}
inline std::string* V0LayerParameter::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.source)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_.Get();
}
inline void V0LayerParameter::_internal_set_source(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(value, GetArena());
}
inline std::string* V0LayerParameter::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* V0LayerParameter::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.source)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void V0LayerParameter::set_allocated_source(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.source_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.scale)
  return _internal_scale();
}
inline void V0LayerParameter::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.scale)
}
inline float V0LayerParameter::_internal_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline void V0LayerParameter::_internal_set_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.scale_ = value;
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void V0LayerParameter::clear_meanfile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.meanfile_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& V0LayerParameter::meanfile() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.meanfile)
  return _internal_meanfile();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V0LayerParameter::set_meanfile(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.meanfile_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.meanfile)
}
inline std::string* V0LayerParameter::mutable_meanfile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_meanfile();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.meanfile)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_meanfile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.meanfile_.Get();
}
inline void V0LayerParameter::_internal_set_meanfile(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.meanfile_.Set(value, GetArena());
}
inline std::string* V0LayerParameter::_internal_mutable_meanfile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.meanfile_.Mutable( GetArena());
}
inline std::string* V0LayerParameter::release_meanfile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.meanfile)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.meanfile_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.meanfile_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void V0LayerParameter::set_allocated_meanfile(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.meanfile_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.meanfile_.IsDefault()) {
          _impl_.meanfile_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_batchsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batchsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.batchsize)
  return _internal_batchsize();
}
inline void V0LayerParameter::set_batchsize(::uint32_t value) {
  _internal_set_batchsize(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.batchsize)
}
inline ::uint32_t V0LayerParameter::_internal_batchsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batchsize_;
}
inline void V0LayerParameter::_internal_set_batchsize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.batchsize_ = value;
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_cropsize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cropsize_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.cropsize)
  return _internal_cropsize();
}
inline void V0LayerParameter::set_cropsize(::uint32_t value) {
  _internal_set_cropsize(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.cropsize)
}
inline ::uint32_t V0LayerParameter::_internal_cropsize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cropsize_;
}
inline void V0LayerParameter::_internal_set_cropsize(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.cropsize_ = value;
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_mirror() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.mirror)
  return _internal_mirror();
}
inline void V0LayerParameter::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.mirror)
}
inline bool V0LayerParameter::_internal_mirror() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mirror_;
}
inline void V0LayerParameter::_internal_set_mirror(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.mirror_ = value;
}

// repeated .opencv_caffe.BlobProto blobs = 50;
inline int V0LayerParameter::_internal_blobs_size() const {
  return _internal_blobs().size();
}
inline int V0LayerParameter::blobs_size() const {
  return _internal_blobs_size();
}
inline void V0LayerParameter::clear_blobs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_.Clear();
}
inline ::opencv_caffe::BlobProto* V0LayerParameter::mutable_blobs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.blobs)
  return _internal_mutable_blobs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>* V0LayerParameter::mutable_blobs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V0LayerParameter.blobs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs();
}
inline const ::opencv_caffe::BlobProto& V0LayerParameter::blobs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.blobs)
  return _internal_blobs().Get(index);
}
inline ::opencv_caffe::BlobProto* V0LayerParameter::add_blobs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::opencv_caffe::BlobProto* _add = _internal_mutable_blobs()->Add();
  // @@protoc_insertion_point(field_add:opencv_caffe.V0LayerParameter.blobs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>& V0LayerParameter::blobs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V0LayerParameter.blobs)
  return _internal_blobs();
}
inline const ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>&
V0LayerParameter::_internal_blobs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_;
}
inline ::google::protobuf::RepeatedPtrField<::opencv_caffe::BlobProto>*
V0LayerParameter::_internal_mutable_blobs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::_internal_blobs_lr_size() const {
  return _internal_blobs_lr().size();
}
inline int V0LayerParameter::blobs_lr_size() const {
  return _internal_blobs_lr_size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr().Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  _internal_mutable_blobs_lr()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blobs_lr()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField<float>& V0LayerParameter::blobs_lr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V0LayerParameter.blobs_lr)
  return _internal_blobs_lr();
}
inline ::google::protobuf::RepeatedField<float>* V0LayerParameter::mutable_blobs_lr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V0LayerParameter.blobs_lr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blobs_lr();
}
inline const ::google::protobuf::RepeatedField<float>& V0LayerParameter::_internal_blobs_lr()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blobs_lr_;
}
inline ::google::protobuf::RepeatedField<float>* V0LayerParameter::_internal_mutable_blobs_lr() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::_internal_weight_decay_size() const {
  return _internal_weight_decay().size();
}
inline int V0LayerParameter::weight_decay_size() const {
  return _internal_weight_decay_size();
}
inline void V0LayerParameter::clear_weight_decay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay().Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  _internal_mutable_weight_decay()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_weight_decay()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField<float>& V0LayerParameter::weight_decay() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.V0LayerParameter.weight_decay)
  return _internal_weight_decay();
}
inline ::google::protobuf::RepeatedField<float>* V0LayerParameter::mutable_weight_decay()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.V0LayerParameter.weight_decay)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_weight_decay();
}
inline const ::google::protobuf::RepeatedField<float>& V0LayerParameter::_internal_weight_decay()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weight_decay_;
}
inline ::google::protobuf::RepeatedField<float>* V0LayerParameter::_internal_mutable_weight_decay() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_rand_skip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rand_skip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.rand_skip)
  return _internal_rand_skip();
}
inline void V0LayerParameter::set_rand_skip(::uint32_t value) {
  _internal_set_rand_skip(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.rand_skip)
}
inline ::uint32_t V0LayerParameter::_internal_rand_skip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rand_skip_;
}
inline void V0LayerParameter::_internal_set_rand_skip(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.rand_skip_ = value;
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.det_fg_threshold_ = 0.5f;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.det_fg_threshold)
  return _internal_det_fg_threshold();
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  _internal_set_det_fg_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_fg_threshold)
}
inline float V0LayerParameter::_internal_det_fg_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.det_fg_threshold_;
}
inline void V0LayerParameter::_internal_set_det_fg_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.det_fg_threshold_ = value;
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.det_bg_threshold_ = 0.5f;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.det_bg_threshold)
  return _internal_det_bg_threshold();
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  _internal_set_det_bg_threshold(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_bg_threshold)
}
inline float V0LayerParameter::_internal_det_bg_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.det_bg_threshold_;
}
inline void V0LayerParameter::_internal_set_det_bg_threshold(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.det_bg_threshold_ = value;
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.det_fg_fraction_ = 0.25f;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.det_fg_fraction)
  return _internal_det_fg_fraction();
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  _internal_set_det_fg_fraction(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_fg_fraction)
}
inline float V0LayerParameter::_internal_det_fg_fraction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.det_fg_fraction_;
}
inline void V0LayerParameter::_internal_set_det_fg_fraction(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.det_fg_fraction_ = value;
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_det_context_pad() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.det_context_pad_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.det_context_pad)
  return _internal_det_context_pad();
}
inline void V0LayerParameter::set_det_context_pad(::uint32_t value) {
  _internal_set_det_context_pad(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_context_pad)
}
inline ::uint32_t V0LayerParameter::_internal_det_context_pad() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.det_context_pad_;
}
inline void V0LayerParameter::_internal_set_det_context_pad(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.det_context_pad_ = value;
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.det_crop_mode_.ClearToDefault(::opencv_caffe::V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& V0LayerParameter::det_crop_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.det_crop_mode)
  if (_impl_.det_crop_mode_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_.get();
  }
  return _internal_det_crop_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void V0LayerParameter::set_det_crop_mode(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.det_crop_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.det_crop_mode)
}
inline std::string* V0LayerParameter::mutable_det_crop_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.det_crop_mode)
  return _s;
}
inline const std::string& V0LayerParameter::_internal_det_crop_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.det_crop_mode_.Get();
}
inline void V0LayerParameter::_internal_set_det_crop_mode(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.det_crop_mode_.Set(value, GetArena());
}
inline std::string* V0LayerParameter::_internal_mutable_det_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.det_crop_mode_.Mutable(::opencv_caffe::V0LayerParameter::Impl_::_i_give_permission_to_break_this_code_default_det_crop_mode_, GetArena());
}
inline std::string* V0LayerParameter::release_det_crop_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.det_crop_mode)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  return _impl_.det_crop_mode_.Release();
}
inline void V0LayerParameter::set_allocated_det_crop_mode(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.det_crop_mode_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_new_num() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.new_num)
  return _internal_new_num();
}
inline void V0LayerParameter::set_new_num(::int32_t value) {
  _internal_set_new_num(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.new_num)
}
inline ::int32_t V0LayerParameter::_internal_new_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_num_;
}
inline void V0LayerParameter::_internal_set_new_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.new_num_ = value;
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_new_channels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.new_channels)
  return _internal_new_channels();
}
inline void V0LayerParameter::set_new_channels(::int32_t value) {
  _internal_set_new_channels(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.new_channels)
}
inline ::int32_t V0LayerParameter::_internal_new_channels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_channels_;
}
inline void V0LayerParameter::_internal_set_new_channels(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.new_channels_ = value;
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_new_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.new_height)
  return _internal_new_height();
}
inline void V0LayerParameter::set_new_height(::int32_t value) {
  _internal_set_new_height(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.new_height)
}
inline ::int32_t V0LayerParameter::_internal_new_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_height_;
}
inline void V0LayerParameter::_internal_set_new_height(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.new_height_ = value;
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_new_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.new_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.new_width)
  return _internal_new_width();
}
inline void V0LayerParameter::set_new_width(::int32_t value) {
  _internal_set_new_width(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.new_width)
}
inline ::int32_t V0LayerParameter::_internal_new_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.new_width_;
}
inline void V0LayerParameter::_internal_set_new_width(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.new_width_ = value;
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_shuffle_images() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.shuffle_images_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.shuffle_images)
  return _internal_shuffle_images();
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  _internal_set_shuffle_images(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.shuffle_images)
}
inline bool V0LayerParameter::_internal_shuffle_images() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.shuffle_images_;
}
inline void V0LayerParameter::_internal_set_shuffle_images(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.shuffle_images_ = value;
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void V0LayerParameter::clear_concat_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.concat_dim_ = 1u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint32_t V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.concat_dim)
  return _internal_concat_dim();
}
inline void V0LayerParameter::set_concat_dim(::uint32_t value) {
  _internal_set_concat_dim(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.V0LayerParameter.concat_dim)
}
inline ::uint32_t V0LayerParameter::_internal_concat_dim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.concat_dim_;
}
inline void V0LayerParameter::_internal_set_concat_dim(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.concat_dim_ = value;
}

// optional .opencv_caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hdf5_output_param_ != nullptr);
  return value;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.hdf5_output_param_ != nullptr) _impl_.hdf5_output_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::opencv_caffe::HDF5OutputParameter& V0LayerParameter::_internal_hdf5_output_param() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::HDF5OutputParameter* p = _impl_.hdf5_output_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::HDF5OutputParameter&>(::opencv_caffe::_HDF5OutputParameter_default_instance_);
}
inline const ::opencv_caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.V0LayerParameter.hdf5_output_param)
  return _internal_hdf5_output_param();
}
inline void V0LayerParameter::unsafe_arena_set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hdf5_output_param_);
  }
  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.V0LayerParameter.hdf5_output_param)
}
inline ::opencv_caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::HDF5OutputParameter* released = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::HDF5OutputParameter* V0LayerParameter::unsafe_arena_release_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.V0LayerParameter.hdf5_output_param)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::opencv_caffe::HDF5OutputParameter* temp = _impl_.hdf5_output_param_;
  _impl_.hdf5_output_param_ = nullptr;
  return temp;
}
inline ::opencv_caffe::HDF5OutputParameter* V0LayerParameter::_internal_mutable_hdf5_output_param() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.hdf5_output_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::HDF5OutputParameter>(GetArena());
    _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(p);
  }
  return _impl_.hdf5_output_param_;
}
inline ::opencv_caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::HDF5OutputParameter* _msg = _internal_mutable_hdf5_output_param();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.V0LayerParameter.hdf5_output_param)
  return _msg;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::opencv_caffe::HDF5OutputParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(_impl_.hdf5_output_param_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.hdf5_output_param_ = reinterpret_cast<::opencv_caffe::HDF5OutputParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .opencv_caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filler_ != nullptr);
  return value;
}
inline void PReLUParameter::clear_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.filler_ != nullptr) _impl_.filler_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::opencv_caffe::FillerParameter& PReLUParameter::_internal_filler() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::opencv_caffe::FillerParameter* p = _impl_.filler_;
  return p != nullptr ? *p : reinterpret_cast<const ::opencv_caffe::FillerParameter&>(::opencv_caffe::_FillerParameter_default_instance_);
}
inline const ::opencv_caffe::FillerParameter& PReLUParameter::filler() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:opencv_caffe.PReLUParameter.filler)
  return _internal_filler();
}
inline void PReLUParameter::unsafe_arena_set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.filler_);
  }
  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:opencv_caffe.PReLUParameter.filler)
}
inline ::opencv_caffe::FillerParameter* PReLUParameter::release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* released = _impl_.filler_;
  _impl_.filler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::opencv_caffe::FillerParameter* PReLUParameter::unsafe_arena_release_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:opencv_caffe.PReLUParameter.filler)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::opencv_caffe::FillerParameter* temp = _impl_.filler_;
  _impl_.filler_ = nullptr;
  return temp;
}
inline ::opencv_caffe::FillerParameter* PReLUParameter::_internal_mutable_filler() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.filler_ == nullptr) {
    auto* p = CreateMaybeMessage<::opencv_caffe::FillerParameter>(GetArena());
    _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(p);
  }
  return _impl_.filler_;
}
inline ::opencv_caffe::FillerParameter* PReLUParameter::mutable_filler() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::opencv_caffe::FillerParameter* _msg = _internal_mutable_filler();
  // @@protoc_insertion_point(field_mutable:opencv_caffe.PReLUParameter.filler)
  return _msg;
}
inline void PReLUParameter::set_allocated_filler(::opencv_caffe::FillerParameter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::opencv_caffe::FillerParameter*>(_impl_.filler_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::opencv_caffe::FillerParameter*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.filler_ = reinterpret_cast<::opencv_caffe::FillerParameter*>(value);
  // @@protoc_insertion_point(field_set_allocated:opencv_caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PReLUParameter::clear_channel_shared() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_shared_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PReLUParameter.channel_shared)
  return _internal_channel_shared();
}
inline void PReLUParameter::set_channel_shared(bool value) {
  _internal_set_channel_shared(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PReLUParameter.channel_shared)
}
inline bool PReLUParameter::_internal_channel_shared() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_shared_;
}
inline void PReLUParameter::_internal_set_channel_shared(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_shared_ = value;
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::has_xmin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NormalizedBBox::clear_xmin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.xmin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.xmin)
  return _internal_xmin();
}
inline void NormalizedBBox::set_xmin(float value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.xmin)
}
inline float NormalizedBBox::_internal_xmin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.xmin_;
}
inline void NormalizedBBox::_internal_set_xmin(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xmin_ = value;
}

// optional float ymin = 2;
inline bool NormalizedBBox::has_ymin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void NormalizedBBox::clear_ymin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ymin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.ymin)
  return _internal_ymin();
}
inline void NormalizedBBox::set_ymin(float value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.ymin)
}
inline float NormalizedBBox::_internal_ymin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ymin_;
}
inline void NormalizedBBox::_internal_set_ymin(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ymin_ = value;
}

// optional float xmax = 3;
inline bool NormalizedBBox::has_xmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NormalizedBBox::clear_xmax() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.xmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.xmax)
  return _internal_xmax();
}
inline void NormalizedBBox::set_xmax(float value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.xmax)
}
inline float NormalizedBBox::_internal_xmax() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.xmax_;
}
inline void NormalizedBBox::_internal_set_xmax(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.xmax_ = value;
}

// optional float ymax = 4;
inline bool NormalizedBBox::has_ymax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NormalizedBBox::clear_ymax() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ymax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.ymax)
  return _internal_ymax();
}
inline void NormalizedBBox::set_ymax(float value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.ymax)
}
inline float NormalizedBBox::_internal_ymax() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ymax_;
}
inline void NormalizedBBox::_internal_set_ymax(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ymax_ = value;
}

// optional int32 label = 5;
inline bool NormalizedBBox::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NormalizedBBox::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.label)
  return _internal_label();
}
inline void NormalizedBBox::set_label(::int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.label)
}
inline ::int32_t NormalizedBBox::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_;
}
inline void NormalizedBBox::_internal_set_label(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.label_ = value;
}

// optional bool difficult = 6;
inline bool NormalizedBBox::has_difficult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NormalizedBBox::clear_difficult() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.difficult_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.difficult)
  return _internal_difficult();
}
inline void NormalizedBBox::set_difficult(bool value) {
  _internal_set_difficult(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.difficult)
}
inline bool NormalizedBBox::_internal_difficult() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.difficult_;
}
inline void NormalizedBBox::_internal_set_difficult(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.difficult_ = value;
}

// optional float score = 7;
inline bool NormalizedBBox::has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NormalizedBBox::clear_score() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.score)
  return _internal_score();
}
inline void NormalizedBBox::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.score)
}
inline float NormalizedBBox::_internal_score() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.score_;
}
inline void NormalizedBBox::_internal_set_score(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.score_ = value;
}

// optional float size = 8;
inline bool NormalizedBBox::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void NormalizedBBox::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.NormalizedBBox.size)
  return _internal_size();
}
inline void NormalizedBBox::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.NormalizedBBox.size)
}
inline float NormalizedBBox::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void NormalizedBBox::_internal_set_size(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional uint32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pooled_h_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ROIPoolingParameter.pooled_h)
  return _internal_pooled_h();
}
inline void ROIPoolingParameter::set_pooled_h(::uint32_t value) {
  _internal_set_pooled_h(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ROIPoolingParameter.pooled_h)
}
inline ::uint32_t ROIPoolingParameter::_internal_pooled_h() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pooled_h_;
}
inline void ROIPoolingParameter::_internal_set_pooled_h(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pooled_h_ = value;
}

// optional uint32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pooled_w_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ROIPoolingParameter.pooled_w)
  return _internal_pooled_w();
}
inline void ROIPoolingParameter::set_pooled_w(::uint32_t value) {
  _internal_set_pooled_w(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ROIPoolingParameter.pooled_w)
}
inline ::uint32_t ROIPoolingParameter::_internal_pooled_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pooled_w_;
}
inline void ROIPoolingParameter::_internal_set_pooled_w(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pooled_w_ = value;
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spatial_scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ROIPoolingParameter.spatial_scale)
  return _internal_spatial_scale();
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  _internal_set_spatial_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ROIPoolingParameter.spatial_scale)
}
inline float ROIPoolingParameter::_internal_spatial_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spatial_scale_;
}
inline void ROIPoolingParameter::_internal_set_spatial_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.spatial_scale_ = value;
}

// -------------------------------------------------------------------

// ProposalParameter

// optional uint32 feat_stride = 1 [default = 16];
inline bool ProposalParameter::has_feat_stride() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ProposalParameter::clear_feat_stride() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.feat_stride_ = 16u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ProposalParameter::feat_stride() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.feat_stride)
  return _internal_feat_stride();
}
inline void ProposalParameter::set_feat_stride(::uint32_t value) {
  _internal_set_feat_stride(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.feat_stride)
}
inline ::uint32_t ProposalParameter::_internal_feat_stride() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.feat_stride_;
}
inline void ProposalParameter::_internal_set_feat_stride(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.feat_stride_ = value;
}

// optional uint32 base_size = 2 [default = 16];
inline bool ProposalParameter::has_base_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ProposalParameter::clear_base_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.base_size_ = 16u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ProposalParameter::base_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.base_size)
  return _internal_base_size();
}
inline void ProposalParameter::set_base_size(::uint32_t value) {
  _internal_set_base_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.base_size)
}
inline ::uint32_t ProposalParameter::_internal_base_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_size_;
}
inline void ProposalParameter::_internal_set_base_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.base_size_ = value;
}

// optional uint32 min_size = 3 [default = 16];
inline bool ProposalParameter::has_min_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ProposalParameter::clear_min_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_size_ = 16u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t ProposalParameter::min_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.min_size)
  return _internal_min_size();
}
inline void ProposalParameter::set_min_size(::uint32_t value) {
  _internal_set_min_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.min_size)
}
inline ::uint32_t ProposalParameter::_internal_min_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_size_;
}
inline void ProposalParameter::_internal_set_min_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_size_ = value;
}

// repeated float ratio = 4;
inline int ProposalParameter::_internal_ratio_size() const {
  return _internal_ratio().size();
}
inline int ProposalParameter::ratio_size() const {
  return _internal_ratio_size();
}
inline void ProposalParameter::clear_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ratio_.Clear();
}
inline float ProposalParameter::ratio(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.ratio)
  return _internal_ratio().Get(index);
}
inline void ProposalParameter::set_ratio(int index, float value) {
  _internal_mutable_ratio()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.ratio)
}
inline void ProposalParameter::add_ratio(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_ratio()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ProposalParameter.ratio)
}
inline const ::google::protobuf::RepeatedField<float>& ProposalParameter::ratio() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ProposalParameter.ratio)
  return _internal_ratio();
}
inline ::google::protobuf::RepeatedField<float>* ProposalParameter::mutable_ratio()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ProposalParameter.ratio)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ratio();
}
inline const ::google::protobuf::RepeatedField<float>& ProposalParameter::_internal_ratio()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ratio_;
}
inline ::google::protobuf::RepeatedField<float>* ProposalParameter::_internal_mutable_ratio() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ratio_;
}

// repeated float scale = 5;
inline int ProposalParameter::_internal_scale_size() const {
  return _internal_scale().size();
}
inline int ProposalParameter::scale_size() const {
  return _internal_scale_size();
}
inline void ProposalParameter::clear_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scale_.Clear();
}
inline float ProposalParameter::scale(int index) const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.scale)
  return _internal_scale().Get(index);
}
inline void ProposalParameter::set_scale(int index, float value) {
  _internal_mutable_scale()->Set(index, value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.scale)
}
inline void ProposalParameter::add_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_scale()->Add(value);
  // @@protoc_insertion_point(field_add:opencv_caffe.ProposalParameter.scale)
}
inline const ::google::protobuf::RepeatedField<float>& ProposalParameter::scale() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:opencv_caffe.ProposalParameter.scale)
  return _internal_scale();
}
inline ::google::protobuf::RepeatedField<float>* ProposalParameter::mutable_scale()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:opencv_caffe.ProposalParameter.scale)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scale();
}
inline const ::google::protobuf::RepeatedField<float>& ProposalParameter::_internal_scale()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scale_;
}
inline ::google::protobuf::RepeatedField<float>* ProposalParameter::_internal_mutable_scale() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scale_;
}

// optional uint32 pre_nms_topn = 6 [default = 6000];
inline bool ProposalParameter::has_pre_nms_topn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ProposalParameter::clear_pre_nms_topn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pre_nms_topn_ = 6000u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ProposalParameter::pre_nms_topn() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.pre_nms_topn)
  return _internal_pre_nms_topn();
}
inline void ProposalParameter::set_pre_nms_topn(::uint32_t value) {
  _internal_set_pre_nms_topn(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.pre_nms_topn)
}
inline ::uint32_t ProposalParameter::_internal_pre_nms_topn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pre_nms_topn_;
}
inline void ProposalParameter::_internal_set_pre_nms_topn(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pre_nms_topn_ = value;
}

// optional uint32 post_nms_topn = 7 [default = 300];
inline bool ProposalParameter::has_post_nms_topn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ProposalParameter::clear_post_nms_topn() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.post_nms_topn_ = 300u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ProposalParameter::post_nms_topn() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.post_nms_topn)
  return _internal_post_nms_topn();
}
inline void ProposalParameter::set_post_nms_topn(::uint32_t value) {
  _internal_set_post_nms_topn(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.post_nms_topn)
}
inline ::uint32_t ProposalParameter::_internal_post_nms_topn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.post_nms_topn_;
}
inline void ProposalParameter::_internal_set_post_nms_topn(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.post_nms_topn_ = value;
}

// optional float nms_thresh = 8 [default = 0.7];
inline bool ProposalParameter::has_nms_thresh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ProposalParameter::clear_nms_thresh() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nms_thresh_ = 0.7f;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ProposalParameter::nms_thresh() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.ProposalParameter.nms_thresh)
  return _internal_nms_thresh();
}
inline void ProposalParameter::set_nms_thresh(float value) {
  _internal_set_nms_thresh(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.ProposalParameter.nms_thresh)
}
inline float ProposalParameter::_internal_nms_thresh() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nms_thresh_;
}
inline void ProposalParameter::_internal_set_nms_thresh(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nms_thresh_ = value;
}

// -------------------------------------------------------------------

// PSROIPoolingParameter

// required float spatial_scale = 1;
inline bool PSROIPoolingParameter::has_spatial_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PSROIPoolingParameter::clear_spatial_scale() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spatial_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PSROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PSROIPoolingParameter.spatial_scale)
  return _internal_spatial_scale();
}
inline void PSROIPoolingParameter::set_spatial_scale(float value) {
  _internal_set_spatial_scale(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PSROIPoolingParameter.spatial_scale)
}
inline float PSROIPoolingParameter::_internal_spatial_scale() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spatial_scale_;
}
inline void PSROIPoolingParameter::_internal_set_spatial_scale(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.spatial_scale_ = value;
}

// required int32 output_dim = 2;
inline bool PSROIPoolingParameter::has_output_dim() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PSROIPoolingParameter::clear_output_dim() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.output_dim_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PSROIPoolingParameter::output_dim() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PSROIPoolingParameter.output_dim)
  return _internal_output_dim();
}
inline void PSROIPoolingParameter::set_output_dim(::int32_t value) {
  _internal_set_output_dim(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PSROIPoolingParameter.output_dim)
}
inline ::int32_t PSROIPoolingParameter::_internal_output_dim() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.output_dim_;
}
inline void PSROIPoolingParameter::_internal_set_output_dim(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.output_dim_ = value;
}

// required int32 group_size = 3;
inline bool PSROIPoolingParameter::has_group_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PSROIPoolingParameter::clear_group_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.group_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t PSROIPoolingParameter::group_size() const {
  // @@protoc_insertion_point(field_get:opencv_caffe.PSROIPoolingParameter.group_size)
  return _internal_group_size();
}
inline void PSROIPoolingParameter::set_group_size(::int32_t value) {
  _internal_set_group_size(value);
  // @@protoc_insertion_point(field_set:opencv_caffe.PSROIPoolingParameter.group_size)
}
inline ::int32_t PSROIPoolingParameter::_internal_group_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.group_size_;
}
inline void PSROIPoolingParameter::_internal_set_group_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.group_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv_caffe


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::opencv_caffe::PriorBoxParameter_CodeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::PriorBoxParameter_CodeType>() {
  return ::opencv_caffe::PriorBoxParameter_CodeType_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::FillerParameter_VarianceNorm> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::FillerParameter_VarianceNorm>() {
  return ::opencv_caffe::FillerParameter_VarianceNorm_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SolverParameter_SnapshotFormat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SolverParameter_SnapshotFormat>() {
  return ::opencv_caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SolverParameter_SolverMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SolverParameter_SolverMode>() {
  return ::opencv_caffe::SolverParameter_SolverMode_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SolverParameter_SolverType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SolverParameter_SolverType>() {
  return ::opencv_caffe::SolverParameter_SolverType_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::ParamSpec_DimCheckMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::ParamSpec_DimCheckMode>() {
  return ::opencv_caffe::ParamSpec_DimCheckMode_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::LossParameter_NormalizationMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::LossParameter_NormalizationMode>() {
  return ::opencv_caffe::LossParameter_NormalizationMode_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::ConvolutionParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::ConvolutionParameter_Engine>() {
  return ::opencv_caffe::ConvolutionParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::DataParameter_DB> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::DataParameter_DB>() {
  return ::opencv_caffe::DataParameter_DB_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::EltwiseParameter_EltwiseOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::EltwiseParameter_EltwiseOp>() {
  return ::opencv_caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::HingeLossParameter_Norm> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::HingeLossParameter_Norm>() {
  return ::opencv_caffe::HingeLossParameter_Norm_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::LRNParameter_NormRegion> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::LRNParameter_NormRegion>() {
  return ::opencv_caffe::LRNParameter_NormRegion_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::LRNParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::LRNParameter_Engine>() {
  return ::opencv_caffe::LRNParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::PoolingParameter_PoolMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::PoolingParameter_PoolMethod>() {
  return ::opencv_caffe::PoolingParameter_PoolMethod_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::PoolingParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::PoolingParameter_Engine>() {
  return ::opencv_caffe::PoolingParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::ReductionParameter_ReductionOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::ReductionParameter_ReductionOp>() {
  return ::opencv_caffe::ReductionParameter_ReductionOp_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::ReLUParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::ReLUParameter_Engine>() {
  return ::opencv_caffe::ReLUParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SigmoidParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SigmoidParameter_Engine>() {
  return ::opencv_caffe::SigmoidParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SoftmaxParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SoftmaxParameter_Engine>() {
  return ::opencv_caffe::SoftmaxParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::TanHParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::TanHParameter_Engine>() {
  return ::opencv_caffe::TanHParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SPPParameter_PoolMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SPPParameter_PoolMethod>() {
  return ::opencv_caffe::SPPParameter_PoolMethod_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::SPPParameter_Engine> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::SPPParameter_Engine>() {
  return ::opencv_caffe::SPPParameter_Engine_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::V1LayerParameter_LayerType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::V1LayerParameter_LayerType>() {
  return ::opencv_caffe::V1LayerParameter_LayerType_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::V1LayerParameter_DimCheckMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::V1LayerParameter_DimCheckMode>() {
  return ::opencv_caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::V0LayerParameter_PoolMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::V0LayerParameter_PoolMethod>() {
  return ::opencv_caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::Type>() {
  return ::opencv_caffe::Type_descriptor();
}
template <>
struct is_proto_enum<::opencv_caffe::Phase> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::opencv_caffe::Phase>() {
  return ::opencv_caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_opencv_2dcaffe_2eproto_2epb_2eh
